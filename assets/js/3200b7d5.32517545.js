"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[6832],{919:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"tips-and-tricks/Keywords","title":"39 Keywords","description":"Python is a versatile and powerful programming language known for its simplicity and readability. Understanding its keywords is essential for mastering Python. In this tutorial, we\'ll explore all 39 Python keywords, including code snippets to illustrate their usage. This comprehensive tutorial covers all 39 Python keywords, providing code snippets and explanations for each. Understanding these keywords will empower you to write efficient and effective Python code.","source":"@site/docs/tips-and-tricks/39-Keywords.md","sourceDirName":"tips-and-tricks","slug":"/tips-and-tricks/Keywords","permalink":"/Python/docs/tips-and-tricks/Keywords","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tips-and-tricks/39-Keywords.md","tags":[],"version":"current","sidebarPosition":39,"frontMatter":{},"sidebar":"tipsAndTricksSidebar","previous":{"title":"20 Essential Tips & Tricks in Python","permalink":"/Python/docs/tips-and-tricks/tips-and-tricks"},"next":{"title":"50 Linux Terminal Commands","permalink":"/Python/docs/tips-and-tricks/linux-commands"}}');var i=s(4848),t=s(8453);const c={},o="39 Keywords",a={},l=[];function d(n){const e={code:"code",h1:"h1",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"39-keywords",children:"39 Keywords"})}),"\n",(0,i.jsx)(e.p,{children:"Python is a versatile and powerful programming language known for its simplicity and readability. Understanding its keywords is essential for mastering Python. In this tutorial, we'll explore all 39 Python keywords, including code snippets to illustrate their usage. This comprehensive tutorial covers all 39 Python keywords, providing code snippets and explanations for each. Understanding these keywords will empower you to write efficient and effective Python code."}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Table of Contents:"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"False"}),"\n",(0,i.jsx)(e.li,{children:"None"}),"\n",(0,i.jsx)(e.li,{children:"True"}),"\n",(0,i.jsx)(e.li,{children:"and"}),"\n",(0,i.jsx)(e.li,{children:"as"}),"\n",(0,i.jsx)(e.li,{children:"assert"}),"\n",(0,i.jsx)(e.li,{children:"async"}),"\n",(0,i.jsx)(e.li,{children:"await"}),"\n",(0,i.jsx)(e.li,{children:"break"}),"\n",(0,i.jsx)(e.li,{children:"class"}),"\n",(0,i.jsx)(e.li,{children:"continue"}),"\n",(0,i.jsx)(e.li,{children:"def"}),"\n",(0,i.jsx)(e.li,{children:"del"}),"\n",(0,i.jsx)(e.li,{children:"elif"}),"\n",(0,i.jsx)(e.li,{children:"else"}),"\n",(0,i.jsx)(e.li,{children:"except"}),"\n",(0,i.jsx)(e.li,{children:"finally"}),"\n",(0,i.jsx)(e.li,{children:"for"}),"\n",(0,i.jsx)(e.li,{children:"from"}),"\n",(0,i.jsx)(e.li,{children:"global"}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"1. False:"}),"\nThe ",(0,i.jsx)(e.code,{children:"False"})," keyword represents the Boolean value ",(0,i.jsx)(e.code,{children:"False"}),", equivalent to ",(0,i.jsx)(e.code,{children:"0"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"has_money = False\nprint(has_money)  # Output: False\nprint(int(False))  # Output: 0\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"2. None:"}),"\n",(0,i.jsx)(e.code,{children:"None"})," denotes the absence of a value, often used as a placeholder or to signify missing data."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"selected_user = None\nprint(selected_user)  # Output: None\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"3. True:"}),"\nSimilar to ",(0,i.jsx)(e.code,{children:"False"}),", ",(0,i.jsx)(e.code,{children:"True"})," represents the Boolean value ",(0,i.jsx)(e.code,{children:"True"}),", equivalent to ",(0,i.jsx)(e.code,{children:"1"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"has_money = True\nprint(has_money)  # Output: True\nprint(int(True))  # Output: 1\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"4. and:"}),"\nThe ",(0,i.jsx)(e.code,{children:"and"})," keyword is used for logical conjunction, requiring all conditions to be ",(0,i.jsx)(e.code,{children:"True"})," for the overall condition to be ",(0,i.jsx)(e.code,{children:"True"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'a = 5\nb = 10\nc = 15\n\nif a < b and b < c:\n    print("Both conditions are true.")\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"5. as:"}),"\n",(0,i.jsx)(e.code,{children:"as"})," is used for aliasing, providing an alternative name for a module or its components."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"import math as m\nprint(m.cos(10))  # Output: Cosine of 10 radians\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"6. assert:"}),"\n",(0,i.jsx)(e.code,{children:"assert"})," is used for debugging and ensuring conditions are met. If the condition is ",(0,i.jsx)(e.code,{children:"False"}),", it raises an ",(0,i.jsx)(e.code,{children:"AssertionError"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'database = True\nassert database, "Database not found."\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"7. async:"}),"\nUsed in asynchronous programming, ",(0,i.jsx)(e.code,{children:"async"})," defines a coroutine, allowing concurrent execution of code."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"import asyncio\n\nasync def main():\n    # Asynchronous code here\n\nasyncio.run(main())\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"8. await:"}),"\n",(0,i.jsx)(e.code,{children:"await"})," is used within ",(0,i.jsx)(e.code,{children:"async"})," functions to pause execution until an asynchronous operation completes."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"async def my_task(number):\n    # Asynchronous task\n    return number * 2\n\nasync def main():\n    result = await my_task(5)\n    print(result)\n\nasyncio.run(main())\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"9. break:"}),"\n",(0,i.jsx)(e.code,{children:"break"})," is used to exit a loop prematurely."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"for i in range(10):\n    if i == 5:\n        break\n    print(i)\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"10. class:"}),"\n",(0,i.jsx)(e.code,{children:"class"})," is used to create user-defined classes."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'class Person:\n    def __init__(self, name):\n        self.name = name\n\nperson1 = Person("Alice")\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"11. continue:"}),"\n",(0,i.jsx)(e.code,{children:"continue"})," is used to skip the rest of the loop's code and start the next iteration."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'names = ["Tom", "Bob", "James"]\n\nfor name in names:\n    if name == "Bob":\n        print("We do not say hello to Bob.")\n        continue\n    print("Hello", name)\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"12. def:"}),"\n",(0,i.jsx)(e.code,{children:"def"})," is used to define functions or methods."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'def greet(name):\n    print("Hello,", name)\n\ngreet("Alice")\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"13. del:"}),"\n",(0,i.jsx)(e.code,{children:"del"})," is used to delete references to objects."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"name = 10\ndel name\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"14. elif:"}),"\n",(0,i.jsx)(e.code,{children:"elif"}),' is short for "else if" and is used to check additional conditions.']}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'weather = "rainy"\n\nif weather == "rainy":\n    print("Remember your umbrella.")\nelif weather == "cloudy":\n    print("It might rain.")\nelse:\n    print("Enjoy the weather!")\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"15. else:"}),"\n",(0,i.jsx)(e.code,{children:"else"})," is used as a final condition block when all other conditions fail."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"if condition:\n    # Code block\nelse:\n    # Code block\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"16. except:"}),"\n",(0,i.jsx)(e.code,{children:"except"})," is used in exception handling to catch specific exceptions."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'try:\n    # Risky code\nexcept ValueError as e:\n    print("An error occurred:", e)\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"17. finally:"}),"\n",(0,i.jsx)(e.code,{children:"finally"})," is used in exception handling to execute code regardless of whether an exception occurred or not."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"try:\n    # Risky code\nexcept:\n    # Exception handling\nfinally:\n    # Cleanup code\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"18. for:"}),"\n",(0,i.jsx)(e.code,{children:"for"})," is used to iterate over a sequence (such as a list or tuple)."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'fruits = ["apple", "banana", "cherry"]\n\nfor fruit in fruits:\n    print(fruit)\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"19. from:"}),"\n",(0,i.jsx)(e.code,{children:"from"})," is used to import specific attributes or submodules from a module."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"from math import sqrt\nprint(sqrt(16))  # Output: 4.0\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"20. global:"}),"\n",(0,i.jsx)(e.code,{children:"global"})," is used to declare that a variable is in the global scope within a function."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'name = "Bob"\n\ndef print_name():\n    global name\n    print(name)\n\nprint_name()  # Output: Bob\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"21. if:"}),"\n",(0,i.jsx)(e.code,{children:"if"})," is used for conditional execution, executing code if a specified condition is ",(0,i.jsx)(e.code,{children:"True"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'x = 10\n\nif x > 5:\n    print("x is greater than 5")\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"22. import:"}),"\n",(0,i.jsx)(e.code,{children:"import"})," is used to import modules or packages into a Python script."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"import math\nprint(math.pi)  # Output: 3.141592653589793\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"23. in:"}),"\n",(0,i.jsx)(e.code,{children:"in"})," is used to check if a value exists within a sequence (such as a list, tuple, or string)."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'fruits = ["apple", "banana", "cherry"]\nif "banana" in fruits:\n    print("Yes, banana is in the fruits list")\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"24. is:"}),"\n",(0,i.jsx)(e.code,{children:"is"})," is used to test object identity, checking if two variables refer to the same object."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'x = [1, 2, 3]\ny = [1, 2, 3]\n\nif x is y:\n    print("x and y are the same object")\nelse:\n    print("x and y are different objects")\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"25. lambda:"}),"\n",(0,i.jsx)(e.code,{children:"lambda"})," is used to create anonymous functions, typically for short functions."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"add = lambda x, y: x + y\nprint(add(2, 3))  # Output: 5\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"26. nonlocal:"}),"\n",(0,i.jsx)(e.code,{children:"nonlocal"})," is used to declare that a variable is not local to a function, but it is also not global."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"def outer():\n    x = 10\n    def inner():\n        nonlocal x\n        x += 1\n        print(x)\n    inner()\n\nouter()  # Output: 11\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"27. not:"}),"\n",(0,i.jsx)(e.code,{children:"not"})," is a logical negation operator, reversing the logical state of its operand."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"x = True\nprint(not x)  # Output: False\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"28. or:"}),"\n",(0,i.jsx)(e.code,{children:"or"})," is used for logical disjunction, requiring at least one condition to be ",(0,i.jsx)(e.code,{children:"True"})," for the overall condition to be ",(0,i.jsx)(e.code,{children:"True"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'x = 5\n\nif x < 0 or x > 10:\n    print("x is either less than 0 or greater than 10")\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"29. pass:"}),"\n",(0,i.jsx)(e.code,{children:"pass"})," is a null operation, used as a placeholder where syntax requires a statement but no action is needed."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"def my_function():\n    pass  # Placeholder for future code implementation\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"30. raise:"}),"\n",(0,i.jsx)(e.code,{children:"raise"})," is used to raise exceptions programmatically."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'x = 10\nif x > 5:\n    raise Exception("x should not exceed 5")\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"31. return:"}),"\n",(0,i.jsx)(e.code,{children:"return"})," is used to exit a function and return a value."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"def add(x, y):\n    return x + y\n\nresult = add(3, 4)\nprint(result)  # Output: 7\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"32. try:"}),"\n",(0,i.jsx)(e.code,{children:"try"})," is used for exception handling, allowing code to be executed with the potential for errors to be caught."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print("Cannot divide by zero")\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"33. while:"}),"\n",(0,i.jsx)(e.code,{children:"while"})," is used to create a loop that continues executing as long as a condition is ",(0,i.jsx)(e.code,{children:"True"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"x = 0\nwhile x < 5:\n    print(x)\n    x += 1\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"34. with:"}),"\n",(0,i.jsx)(e.code,{children:"with"})," is used for context management, ensuring that cleanup code is executed even if an error occurs."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'with open("file.txt", "r") as file:\n    content = file.read()\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"35. yield:"}),"\n",(0,i.jsx)(e.code,{children:"yield"})," is used in generator functions to produce a series of values."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"def my_generator():\n    yield 1\n    yield 2\n    yield 3\n\ngen = my_generator()\nprint(next(gen))  # Output: 1\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"36. case (Python 3.10 and later):"}),"\n",(0,i.jsx)(e.code,{children:"case"})," is used in match-case statements for pattern matching."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'number = 5\n\nmatch number:\n    case 0:\n        print("Zero")\n    case 1:\n        print("One")\n    case _:\n        print("Other")\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"37. match (Python 3.10 and later):"}),"\n",(0,i.jsx)(e.code,{children:"match"})," is used for pattern matching, replacing complex ",(0,i.jsx)(e.code,{children:"if-elif-else"})," chains."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'number = 5\n\nmatch number:\n    case 0:\n        print("Zero")\n    case 1:\n        print("One")\n    case _:\n        print("Other")\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"38. case (Python 3.10 and later):"}),"\n",(0,i.jsx)(e.code,{children:"case"})," is used in match-case statements for pattern matching."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'number = 5\n\nmatch number:\n    case 0:\n        print("Zero")\n    case 1:\n        print("One")\n    case _:\n        print("Other")\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"39. match (Python 3.10 and later):"}),"\n",(0,i.jsx)(e.code,{children:"match"})," is used for pattern matching, replacing complex ",(0,i.jsx)(e.code,{children:"if-elif-else"})," chains."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'number = 5\n\nmatch number:\n    case 0:\n        print("Zero")\n    case 1:\n        print("One")\n    case _:\n        print("Other")\n'})})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>c,x:()=>o});var r=s(6540);const i={},t=r.createContext(i);function c(n){const e=r.useContext(t);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:c(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);