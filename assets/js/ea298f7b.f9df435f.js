"use strict";(self.webpackChunkpython=self.webpackChunkpython||[]).push([[6491],{7621:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"python-guide/Dataclasses/Notes_App","title":"Note Taking App","description":"This tutorial will guide you through creating a simple note-taking app in Python using data classes and regular classes. The app will allow you to add, edit, and delete notes. We will also use the Uuid library to generate unique identifiers for each note.","source":"@site/docs/python-guide/09_Dataclasses/06_Notes_App.md","sourceDirName":"python-guide/09_Dataclasses","slug":"/python-guide/Dataclasses/Notes_App","permalink":"/Python/docs/python-guide/Dataclasses/Notes_App","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-guide/09_Dataclasses/06_Notes_App.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Using @property","permalink":"/Python/docs/python-guide/Dataclasses/@property"},"next":{"title":"Advanced","permalink":"/Python/docs/category/advanced"}}');var o=n(4848),i=n(8453);const a={},l="Note Taking App",d={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"Step 1: Import Dependencies",id:"step-1-import-dependencies",level:3},{value:"Step 2: Create the Note Data Class",id:"step-2-create-the-note-data-class",level:3},{value:"Step 3: Display Sample Note",id:"step-3-display-sample-note",level:3},{value:"Step 4: Create the Note App Class",id:"step-4-create-the-note-app-class",level:3},{value:"Step 5: Implement Add Note Functionality",id:"step-5-implement-add-note-functionality",level:3},{value:"Step 6: Implement Edit Note Functionality",id:"step-6-implement-edit-note-functionality",level:3},{value:"Step 7: Implement Delete Note Functionality",id:"step-7-implement-delete-note-functionality",level:3},{value:"Step 8: Complete the App",id:"step-8-complete-the-app",level:3},{value:"Changes and Additions",id:"changes-and-additions",level:2},{value:"Step 1: Update <code>NoteApp</code> Class",id:"step-1-update-noteapp-class",level:3},{value:"Step 2: Add Validation for Empty Notes",id:"step-2-add-validation-for-empty-notes",level:3},{value:"Step 3: Update the <code>run_app</code> Method",id:"step-3-update-the-run_app-method",level:3},{value:"Step 4: Test the App",id:"step-4-test-the-app",level:3},{value:"Homework Challenges",id:"homework-challenges",level:2}];function r(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"note-taking-app",children:"Note Taking App"})}),"\n",(0,o.jsxs)(t.p,{children:["This tutorial will guide you through creating a simple note-taking app in Python using data classes and regular classes. The app will allow you to add, edit, and delete notes. We will also use the ",(0,o.jsx)(t.code,{children:"Uuid"})," library to generate unique identifiers for each note."]}),"\n",(0,o.jsx)(t.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,o.jsx)(t.h3,{id:"step-1-import-dependencies",children:"Step 1: Import Dependencies"}),"\n",(0,o.jsx)(t.p,{children:"Open your Python file and start by importing the necessary modules."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"from dataclasses import dataclass, field\nfrom uuid import UUID, uuid4\n"})}),"\n",(0,o.jsx)(t.h3,{id:"step-2-create-the-note-data-class",children:"Step 2: Create the Note Data Class"}),"\n",(0,o.jsxs)(t.p,{children:["Define the ",(0,o.jsx)(t.code,{children:"Note"})," data class with a unique identifier (",(0,o.jsx)(t.code,{children:"id"}),"), title, and body."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"@dataclass\nclass Note:\n    id: UUID = field(init=False, default_factory=uuid4)\n    title: str\n    body: str\n\n    def __post_init__(self):\n        self.id = uuid4()\n"})}),"\n",(0,o.jsx)(t.h3,{id:"step-3-display-sample-note",children:"Step 3: Display Sample Note"}),"\n",(0,o.jsx)(t.p,{children:"Create a sample note and print it to demonstrate the use of UUID."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'if __name__ == "__main__":\n    sample_note = Note(title="Hello", body="My name is Bob")\n    print(sample_note)\n'})}),"\n",(0,o.jsx)(t.p,{children:"Run your program to see the generated UUID for the sample note."}),"\n",(0,o.jsx)(t.h3,{id:"step-4-create-the-note-app-class",children:"Step 4: Create the Note App Class"}),"\n",(0,o.jsxs)(t.p,{children:["Define the ",(0,o.jsx)(t.code,{children:"NoteApp"})," class, which will handle the note-taking application."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'class NoteApp:\n    def __init__(self, author: str, notes: list = None):\n        self.author = author\n        self._notes = notes or []\n        self.display_instructions()\n\n    @staticmethod\n    def display_instructions():\n        print("Welcome to the Notes App!")\n        print("Here are the commands:")\n        print("1. Add a new note")\n        print("2. Edit a note")\n        print("3. Delete a note")\n        print("4. Display all notes")\n\n    # Add other methods here\n'})}),"\n",(0,o.jsx)(t.h3,{id:"step-5-implement-add-note-functionality",children:"Step 5: Implement Add Note Functionality"}),"\n",(0,o.jsxs)(t.p,{children:["Add the ",(0,o.jsx)(t.code,{children:"_add_note"})," method to allow users to add new notes."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'def _add_note(self, title: str, body: str):\n    new_note = Note(title=title, body=body)\n    self._notes.append(new_note)\n    print("Note was added successfully.")\n'})}),"\n",(0,o.jsx)(t.h3,{id:"step-6-implement-edit-note-functionality",children:"Step 6: Implement Edit Note Functionality"}),"\n",(0,o.jsxs)(t.p,{children:["Add the ",(0,o.jsx)(t.code,{children:"_edit_note"})," method to allow users to edit existing notes."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'def _edit_note(self, note_index: int, new_title: str, new_body: str):\n    try:\n        current_note = self._notes[note_index - 1]\n        current_note.title = new_title\n        current_note.body = new_body\n        print("Note was updated successfully.")\n    except (IndexError, ValueError):\n        print("Please select a valid note index.")\n        self._edit_note(note_index, new_title, new_body)\n'})}),"\n",(0,o.jsx)(t.h3,{id:"step-7-implement-delete-note-functionality",children:"Step 7: Implement Delete Note Functionality"}),"\n",(0,o.jsxs)(t.p,{children:["Add the ",(0,o.jsx)(t.code,{children:"_delete_note"})," method to allow users to delete existing notes."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'def _delete_note(self, note_index: int):\n    try:\n        deleted_note = self._notes.pop(note_index - 1)\n        print(f"Note \'{deleted_note.title}\' was deleted successfully.")\n    except (IndexError, ValueError):\n        print("Please select a valid note index.")\n        self._delete_note(note_index)\n'})}),"\n",(0,o.jsx)(t.h3,{id:"step-8-complete-the-app",children:"Step 8: Complete the App"}),"\n",(0,o.jsx)(t.p,{children:"Add other necessary methods to complete the app, such as displaying all notes and handling user input."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# Add methods for displaying notes and user input handling\n\nif __name__ == "__main__":\n    # Example usage\n    my_note_app = NoteApp(author="John Doe")\n'})}),"\n",(0,o.jsx)(t.p,{children:"Feel free to expand on this foundation and customize the app based on your requirements. Now you have a simple note-taking app in Python using data classes and regular classes."}),"\n",(0,o.jsx)(t.h2,{id:"changes-and-additions",children:"Changes and Additions"}),"\n",(0,o.jsxs)(t.h3,{id:"step-1-update-noteapp-class",children:["Step 1: Update ",(0,o.jsx)(t.code,{children:"NoteApp"})," Class"]}),"\n",(0,o.jsxs)(t.p,{children:["Extend the ",(0,o.jsx)(t.code,{children:"NoteApp"})," class to include the new functionality."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class NoteApp:\n    # ... (previous methods)\n\n    def display_notes_details(self):\n        total_notes = len(self._notes)\n        total_characters = sum(len(note.body) for note in self._notes)\n        print(f\"\\nTotal Notes: {total_notes}\")\n        print(f\"Total Characters: {total_characters}\")\n        print(f\"Author: {self.author}\")\n\n    def run_app(self):\n        while True:\n            user_input = input(\"\\nSelect an option (1-4): \")\n            self.select_option(user_input)\n\n    def select_option(self, option: str):\n        if option not in {'1', '2', '3', '4'}:\n            print(\"Please pick a valid option.\")\n            return\n\n        if option == '1':\n            title = input(\"Enter the title for the new note: \")\n            body = input(\"Enter the body for the new note: \")\n            self._add_note(title, body)\n        elif option == '2':\n            self._edit_note()\n        elif option == '3':\n            self._delete_note()\n        elif option == '4':\n            self.display_notes()\n        elif option == '5':\n            self.display_instructions()\n        elif option == '6':\n            self.display_notes_details()\n"})}),"\n",(0,o.jsx)(t.h3,{id:"step-2-add-validation-for-empty-notes",children:"Step 2: Add Validation for Empty Notes"}),"\n",(0,o.jsxs)(t.p,{children:["Add a check in the ",(0,o.jsx)(t.code,{children:"_add_note"})," method to ensure the user doesn't add empty notes."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'def _add_note(self, title: str, body: str):\n    if not title.strip() or not body.strip():\n        print("Title and body cannot be empty. Note not added.")\n        return\n    new_note = Note(title=title, body=body)\n    self._notes.append(new_note)\n    print("Note was added successfully.")\n'})}),"\n",(0,o.jsxs)(t.h3,{id:"step-3-update-the-run_app-method",children:["Step 3: Update the ",(0,o.jsx)(t.code,{children:"run_app"})," Method"]}),"\n",(0,o.jsxs)(t.p,{children:["Modify the ",(0,o.jsx)(t.code,{children:"run_app"})," method to handle the new options."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'def run_app(self):\n    while True:\n        user_input = input("\\nSelect an option (1-6): ")\n        self.select_option(user_input)\n'})}),"\n",(0,o.jsx)(t.h3,{id:"step-4-test-the-app",children:"Step 4: Test the App"}),"\n",(0,o.jsx)(t.p,{children:"Update the main section to reflect the changes and test the app."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'if __name__ == "__main__":\n    sample_notes = [\n        Note(title="Title 1", body="Hello there, Bob"),\n        Note(title="Title 2", body="More text"),\n    ]\n\n    my_note_app = NoteApp(author="John Doe", notes=sample_notes)\n    my_note_app.run_app()\n'})}),"\n",(0,o.jsx)(t.h2,{id:"homework-challenges",children:"Homework Challenges"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Prevent Empty Notes:"})," Modify the app to prevent users from adding notes with empty titles or bodies."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Display Commands Option:"})," Add a fifth option that allows users to display the commands once again."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Additional Information Option:"})," Add a sixth option that provides details about the notes, including the total number of characters, total notes, and author information."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Feel free to experiment and enhance the app further based on your preferences and learning goals."})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(r,{...e})}):r(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var s=n(6540);const o={},i=s.createContext(o);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);