"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[6287],{2105:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guide/Lists/List_Comprehensions","title":"List Comprehensions Explained","description":"List comprehensions might seem daunting at first, but once you grasp their power, you\'ll find them indispensable in your Python programming toolkit. They allow for concise and efficient creation of lists, reducing the amount of code needed for simple list operations.","source":"@site/docs/guide/06_Lists/01_List_Comprehensions.md","sourceDirName":"guide/06_Lists","slug":"/guide/Lists/List_Comprehensions","permalink":"/Python/docs/guide/Lists/List_Comprehensions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide/06_Lists/01_List_Comprehensions.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"getting-started","permalink":"/Python/docs/guide/Lists/getting-started"},"next":{"title":"Slicing in Python","permalink":"/Python/docs/guide/Lists/Slicing"}}');var t=s(4848),r=s(8453);const o={},a="List Comprehensions Explained",l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Doubling Numbers",id:"example-1-doubling-numbers",level:3},{value:"Example 2: Filtering Names",id:"example-2-filtering-names",level:3},{value:"Example 3: Selecting Even Numbers",id:"example-3-selecting-even-numbers",level:3}];function m(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"list-comprehensions-explained",children:"List Comprehensions Explained"})}),"\n",(0,t.jsx)(n.p,{children:"List comprehensions might seem daunting at first, but once you grasp their power, you'll find them indispensable in your Python programming toolkit. They allow for concise and efficient creation of lists, reducing the amount of code needed for simple list operations."}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"List comprehensions provide a compact syntax for creating lists in Python. They are particularly useful when you need to apply an operation to every element in a list and collect the results."}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.p,{children:"Let's dive into some examples to illustrate the power of list comprehensions."}),"\n",(0,t.jsx)(n.h3,{id:"example-1-doubling-numbers",children:"Example 1: Doubling Numbers"}),"\n",(0,t.jsxs)(n.p,{children:["Suppose we have a list of numbers ",(0,t.jsx)(n.code,{children:"[1, 2, 3]"}),", and we want to double each number."]}),"\n",(0,t.jsx)(n.p,{children:"Without list comprehension:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"numbers = [1, 2, 3]\ndoubled = []\nfor number in numbers:\n    doubled.append(number * 2)\nprint(doubled)  # Output: [2, 4, 6]\n"})}),"\n",(0,t.jsx)(n.p,{children:"With list comprehension:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"numbers = [1, 2, 3]\ndoubled_lc = [number * 2 for number in numbers]\nprint(doubled_lc)  # Output: [2, 4, 6]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-2-filtering-names",children:"Example 2: Filtering Names"}),"\n",(0,t.jsx)(n.p,{children:"Let's filter names that start with the letter 'J' from a list of names."}),"\n",(0,t.jsx)(n.p,{children:"Without list comprehension:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"names = ['Mario', 'James', 'Luigi', 'John']\nj_names = []\nfor name in names:\n    if name.startswith('J'):\n        j_names.append(name)\nprint(j_names)  # Output: ['James', 'John']\n"})}),"\n",(0,t.jsx)(n.p,{children:"With list comprehension:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"names = ['Mario', 'James', 'Luigi', 'John']\nj_names_lc = [name for name in names if name.startswith('J')]\nprint(j_names_lc)  # Output: ['James', 'John']\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-3-selecting-even-numbers",children:"Example 3: Selecting Even Numbers"}),"\n",(0,t.jsx)(n.p,{children:"Let's extract even numbers from a list of integers."}),"\n",(0,t.jsx)(n.p,{children:"Without list comprehension:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = []\nfor number in numbers:\n    if number % 2 == 0:\n        even_numbers.append(number)\nprint(even_numbers)  # Output: [2, 4, 6, 8, 10]\n"})}),"\n",(0,t.jsx)(n.p,{children:"With list comprehension:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers_lc = [number for number in numbers if number % 2 == 0]\nprint(even_numbers_lc)  # Output: [2, 4, 6, 8, 10]\n"})}),"\n",(0,t.jsx)(n.p,{children:"List comprehensions offer a concise and readable way to create lists in Python. By leveraging their syntax, you can write more expressive and efficient code. With practice, list comprehensions will become an essential tool in your Python programming arsenal."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);