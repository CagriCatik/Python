"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[192],{3398:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"data-analysis/Combining_Datasets/concat()","title":"concat()","description":"The concat() function in Pandas is a powerful tool for combining data from multiple DataFrames. It offers flexible options for handling datasets of different sizes, columns, or indices. This documentation will walk you through its functionality, use cases, and practical examples.","source":"@site/docs/data-analysis/05_Combining_Datasets/02_concat().md","sourceDirName":"data-analysis/05_Combining_Datasets","slug":"/data-analysis/Combining_Datasets/concat()","permalink":"/Python/docs/data-analysis/Combining_Datasets/concat()","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-analysis/05_Combining_Datasets/02_concat().md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"dataAnalysisSidebar","previous":{"title":"Combining Datasets","permalink":"/Python/docs/data-analysis/Combining_Datasets/Intro"},"next":{"title":"merge()","permalink":"/Python/docs/data-analysis/Combining_Datasets/merge()"}}');var a=i(4848),t=i(8453);const r={},o="concat()",d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters:",id:"parameters",level:3},{value:"Examples",id:"examples",level:2},{value:"1. Basic Concatenation",id:"1-basic-concatenation",level:3},{value:"2. Horizontal Concatenation",id:"2-horizontal-concatenation",level:3},{value:"3. Adding Keys for Multi-Level Indexing",id:"3-adding-keys-for-multi-level-indexing",level:3},{value:"4. Ignoring Index",id:"4-ignoring-index",level:3},{value:"5. Different Indices",id:"5-different-indices",level:3},{value:"6. Different Column Names",id:"6-different-column-names",level:3},{value:"7. Join Options",id:"7-join-options",level:3},{value:"Outer Join (default):",id:"outer-join-default",level:4},{value:"Inner Join:",id:"inner-join",level:4},{value:"Conclusion",id:"conclusion",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"concat",children:(0,a.jsx)(e.code,{children:"concat()"})})}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"concat()"})," function in Pandas is a powerful tool for combining data from multiple DataFrames. It offers flexible options for handling datasets of different sizes, columns, or indices. This documentation will walk you through its functionality, use cases, and practical examples."]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(e.p,{children:"In real-world scenarios, data often comes from various sources and may not have consistent structures. You might encounter datasets with:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"Different indices."}),"\n",(0,a.jsx)(e.li,{children:"Varying column names."}),"\n",(0,a.jsx)(e.li,{children:"Overlapping or completely distinct data points."}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"concat()"})," function allows seamless merging of these datasets into a single DataFrame, addressing scenarios where information may or may not overlap."]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"pandas.concat(objs, axis=0, join='outer', ignore_index=False, keys=None, ...) -> DataFrame\n"})}),"\n",(0,a.jsx)(e.h3,{id:"parameters",children:"Parameters:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"objs"})}),": List or tuple of DataFrames or Series to concatenate."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"axis"})}),": ",(0,a.jsx)(e.code,{children:"0"})," (default) for vertical concatenation, ",(0,a.jsx)(e.code,{children:"1"})," for horizontal concatenation."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"join"})}),": Specifies how to handle indexes and columns:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:'"outer"'})," (default): Union of all columns or indices."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:'"inner"'}),": Intersection of columns or indices."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"ignore_index"})}),": Boolean. Resets the index to default integer indexing."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"keys"})}),": List of keys to create a multi-level index."]}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(e.h3,{id:"1-basic-concatenation",children:"1. Basic Concatenation"}),"\n",(0,a.jsx)(e.p,{children:"Combine two DataFrames vertically (default behavior):"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import pandas as pd\n\n# Define DataFrames\ndata1 = {"A": [1, 2, 3], "B": [4, 5, 6], "C": [7, 8, 9]}\ndata2 = {"A": [10, 11, 12], "B": [13, 14, 15], "C": [16, 17, 18]}\n\n# Convert to DataFrames\ndf1 = pd.DataFrame(data1)\ndf2 = pd.DataFrame(data2)\n\n# Concatenate\nresult = pd.concat([df1, df2])\nprint(result)\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Output:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"    A   B   C\n0   1   4   7\n1   2   5   8\n2   3   6   9\n0  10  13  16\n1  11  14  17\n2  12  15  18\n"})}),"\n",(0,a.jsx)(e.p,{children:"Notice that indices are repeated."}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h3,{id:"2-horizontal-concatenation",children:"2. Horizontal Concatenation"}),"\n",(0,a.jsxs)(e.p,{children:["Concatenate DataFrames along the horizontal axis by setting ",(0,a.jsx)(e.code,{children:"axis=1"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"result = pd.concat([df1, df2], axis=1)\nprint(result)\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Output:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"    A  B  C   A   B   C\n0   1  4  7  10  13  16\n1   2  5  8  11  14  17\n2   3  6  9  12  15  18\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h3,{id:"3-adding-keys-for-multi-level-indexing",children:"3. Adding Keys for Multi-Level Indexing"}),"\n",(0,a.jsxs)(e.p,{children:["Use the ",(0,a.jsx)(e.code,{children:"keys"})," parameter to distinguish between datasets:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"result = pd.concat([df1, df2], keys=['data1', 'data2'])\nprint(result)\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Output:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"          A   B   C\ndata1 0   1   4   7\n      1   2   5   8\n      2   3   6   9\ndata2 0  10  13  16\n      1  11  14  17\n      2  12  15  18\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h3,{id:"4-ignoring-index",children:"4. Ignoring Index"}),"\n",(0,a.jsxs)(e.p,{children:["Reset the index using ",(0,a.jsx)(e.code,{children:"ignore_index=True"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"result = pd.concat([df1, df2], ignore_index=True)\nprint(result)\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Output:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"    A   B   C\n0   1   4   7\n1   2   5   8\n2   3   6   9\n3  10  13  16\n4  11  14  17\n5  12  15  18\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h3,{id:"5-different-indices",children:"5. Different Indices"}),"\n",(0,a.jsx)(e.p,{children:"Handle DataFrames with differing indices:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# Modify indices\ndf1.index = [1, 2, 3]\ndf2.index = [4, 5, 6]\n\nresult = pd.concat([df1, df2])\nprint(result)\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Output:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"    A   B   C\n1   1   4   7\n2   2   5   8\n3   3   6   9\n4  10  13  16\n5  11  14  17\n6  12  15  18\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h3,{id:"6-different-column-names",children:"6. Different Column Names"}),"\n",(0,a.jsx)(e.p,{children:"Concatenate DataFrames with mismatched columns:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# Modify columns\ndata2 = {"D": [10, 11, 12], "E": [13, 14, 15], "F": [16, 17, 18]}\ndf2 = pd.DataFrame(data2)\n\nresult = pd.concat([df1, df2], sort=False)\nprint(result)\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Output:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"     A    B    C     D     E     F\n0  1.0  4.0  7.0   NaN   NaN   NaN\n1  2.0  5.0  8.0   NaN   NaN   NaN\n2  3.0  6.0  9.0   NaN   NaN   NaN\n0  NaN  NaN  NaN  10.0  13.0  16.0\n1  NaN  NaN  NaN  11.0  14.0  17.0\n2  NaN  NaN  NaN  12.0  15.0  18.0\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h3,{id:"7-join-options",children:"7. Join Options"}),"\n",(0,a.jsx)(e.h4,{id:"outer-join-default",children:"Outer Join (default):"}),"\n",(0,a.jsx)(e.p,{children:"Includes all columns:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"result = pd.concat([df1, df2], join='outer')\nprint(result)\n"})}),"\n",(0,a.jsx)(e.h4,{id:"inner-join",children:"Inner Join:"}),"\n",(0,a.jsx)(e.p,{children:"Keeps only overlapping columns:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"result = pd.concat([df1, df2], join='inner')\nprint(result)\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"concat()"})," function in Pandas is essential for combining datasets in flexible and efficient ways. By understanding its parameters and behaviors, you can handle various real-world data integration tasks with ease."]})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>o});var s=i(6540);const a={},t=s.createContext(a);function r(n){const e=s.useContext(t);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),s.createElement(t.Provider,{value:e},n.children)}}}]);