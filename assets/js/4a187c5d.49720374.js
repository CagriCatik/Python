"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[9808],{1212:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"guide/Python_Basics/Sets/README","title":"Sets","description":"In Python, sets are a data type similar to lists but with distinct characteristics. Sets have no guaranteed order, and they cannot contain duplicate elements. This makes sets useful for situations where uniqueness and order are not crucial, and you need to perform operations like adding and removing elements efficiently.","source":"@site/docs/guide/01_Python_Basics/17_Sets/README.md","sourceDirName":"guide/01_Python_Basics/17_Sets","slug":"/guide/Python_Basics/Sets/","permalink":"/Python/docs/guide/Python_Basics/Sets/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide/01_Python_Basics/17_Sets/README.md","tags":[],"version":"current","frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Tuple","permalink":"/Python/docs/guide/Python_Basics/Tuples/"},"next":{"title":"Frozen Sets","permalink":"/Python/docs/guide/Python_Basics/Frozensets/"}}');var i=t(4848),a=t(8453);const r={},o="Sets",d={},l=[{value:"Creating a Set",id:"creating-a-set",level:2},{value:"Mutating Sets",id:"mutating-sets",level:2},{value:"Adding Elements",id:"adding-elements",level:3},{value:"Removing Elements",id:"removing-elements",level:3},{value:"Removing a Random Element",id:"removing-a-random-element",level:3},{value:"Clearing the Set",id:"clearing-the-set",level:3},{value:"Creating an Empty Set",id:"creating-an-empty-set",level:2},{value:"Limitations of Sets",id:"limitations-of-sets",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"sets",children:"Sets"})}),"\n",(0,i.jsx)(n.p,{children:"In Python, sets are a data type similar to lists but with distinct characteristics. Sets have no guaranteed order, and they cannot contain duplicate elements. This makes sets useful for situations where uniqueness and order are not crucial, and you need to perform operations like adding and removing elements efficiently."}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-set",children:"Creating a Set"}),"\n",(0,i.jsxs)(n.p,{children:["To create a set, use curly brackets ",(0,i.jsx)(n.code,{children:"{}"})," and insert the values inside. Here's an example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Creating a set\nelements = {99, True, 'Bob'}\n\n# Printing the set\nprint(elements)\n"})}),"\n",(0,i.jsx)(n.p,{children:"The order of elements in the set is not guaranteed, and it may vary each time the script runs."}),"\n",(0,i.jsx)(n.h2,{id:"mutating-sets",children:"Mutating Sets"}),"\n",(0,i.jsx)(n.p,{children:"Sets can be mutated by adding, removing, or clearing elements. Here are some common set operations:"}),"\n",(0,i.jsx)(n.h3,{id:"adding-elements",children:"Adding Elements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Adding elements to the set\nelements.add('James')\n# Print the updated set\nprint(elements)  # Order may vary\n"})}),"\n",(0,i.jsx)(n.h3,{id:"removing-elements",children:"Removing Elements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Removing a specific element\nelements.remove('Bob')\n# Print the set without 'Bob'\nprint(elements)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"removing-a-random-element",children:"Removing a Random Element"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Removing a random element using pop\nelements.pop()\n# Print the updated set\nprint(elements)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"clearing-the-set",children:"Clearing the Set"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Clearing the set\nelements.clear()\n# Print the empty set\nprint(elements)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"creating-an-empty-set",children:"Creating an Empty Set"}),"\n",(0,i.jsx)(n.p,{children:"To create an empty set, use the set constructor with parentheses:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Creating an empty set\nempty_set = set()\n# Print the empty set\nprint(empty_set)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note: Using ",(0,i.jsx)(n.code,{children:"{}"})," to represent an empty set may create a dictionary, not a set."]}),"\n",(0,i.jsx)(n.h2,{id:"limitations-of-sets",children:"Limitations of Sets"}),"\n",(0,i.jsxs)(n.p,{children:["Since sets have no guaranteed order, indexing is not supported. Attempting to access elements using index notation will result in a ",(0,i.jsx)(n.code,{children:"TypeError"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# This will raise a TypeError\n# Indexing is not supported for sets\n# elements[0]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Remember that sets are useful when order and duplicates are not essential, making them suitable for various applications."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);