"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[8817],{7054:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"rest-api/Building-REST-API/building_rest_api","title":"Building REST APIs with Flask","description":"In this tutorial, we\'ll explore how to build REST APIs using Flask, a popular micro-framework for Python. Flask is lightweight and flexible, making it an excellent choice for developing simple yet powerful APIs.","source":"@site/docs/rest-api/Building-REST-API/01_building_rest_api.md","sourceDirName":"rest-api/Building-REST-API","slug":"/rest-api/Building-REST-API/building_rest_api","permalink":"/Python/docs/rest-api/Building-REST-API/building_rest_api","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rest-api/Building-REST-API/01_building_rest_api.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"restAPISidebar","previous":{"title":"Building REST APIs","permalink":"/Python/docs/category/building-rest-apis"},"next":{"title":"Expanding and Using Flask App","permalink":"/Python/docs/rest-api/Building-REST-API/expanding_using_flask"}}');var r=s(4848),l=s(8453);const a={},t="Building REST APIs with Flask",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Step 1: Setting Up Flask",id:"step-1-setting-up-flask",level:2},{value:"Install Flask",id:"install-flask",level:3},{value:"Create a Basic Flask App",id:"create-a-basic-flask-app",level:3},{value:"Run the Flask App",id:"run-the-flask-app",level:3},{value:"Step 2: Creating a Basic API",id:"step-2-creating-a-basic-api",level:2},{value:"Define Your API Endpoints",id:"define-your-api-endpoints",level:3},{value:"Testing the API",id:"testing-the-api",level:3},{value:"Step 3: Handling Requests and Responses",id:"step-3-handling-requests-and-responses",level:2},{value:"Parsing Request Data",id:"parsing-request-data",level:3},{value:"Returning Responses",id:"returning-responses",level:3},{value:"Step 4: Implementing CRUD Operations",id:"step-4-implementing-crud-operations",level:2},{value:"Create",id:"create",level:3},{value:"Read",id:"read",level:3},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3},{value:"Step 5: Running the Flask Application",id:"step-5-running-the-flask-application",level:2},{value:"Running in Production",id:"running-in-production",level:3},{value:"Conclusion",id:"conclusion",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"building-rest-apis-with-flask",children:"Building REST APIs with Flask"})}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, we'll explore how to build REST APIs using Flask, a popular micro-framework for Python. Flask is lightweight and flexible, making it an excellent choice for developing simple yet powerful APIs."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Flask allows you to quickly create web services with minimal setup. We\u2019ll cover:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Setting up Flask"}),"\n",(0,r.jsx)(n.li,{children:"Creating a basic API"}),"\n",(0,r.jsx)(n.li,{children:"Handling requests and responses"}),"\n",(0,r.jsx)(n.li,{children:"Implementing CRUD operations"}),"\n",(0,r.jsx)(n.li,{children:"Running the Flask application"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-1-setting-up-flask",children:"Step 1: Setting Up Flask"}),"\n",(0,r.jsx)(n.h3,{id:"install-flask",children:"Install Flask"}),"\n",(0,r.jsx)(n.p,{children:"First, ensure you have Flask installed. You can install it using pip:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install Flask\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-a-basic-flask-app",children:"Create a Basic Flask App"}),"\n",(0,r.jsxs)(n.p,{children:["Create a new file named ",(0,r.jsx)(n.code,{children:"app.py"}),". This file will contain our Flask application."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run(debug=True)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"run-the-flask-app",children:"Run the Flask App"}),"\n",(0,r.jsx)(n.p,{children:"Run the application with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python app.py\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Navigate to ",(0,r.jsx)(n.code,{children:"http://127.0.0.1:5000"}),' in your browser, and you should see "Hello, World!"']}),"\n",(0,r.jsx)(n.h2,{id:"step-2-creating-a-basic-api",children:"Step 2: Creating a Basic API"}),"\n",(0,r.jsx)(n.h3,{id:"define-your-api-endpoints",children:"Define Your API Endpoints"}),"\n",(0,r.jsxs)(n.p,{children:["Modify ",(0,r.jsx)(n.code,{children:"app.py"})," to include API endpoints. For demonstration, we'll create a simple API for managing users."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n# In-memory storage for demonstration purposes\nusers = []\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n    return jsonify(users), 200\n\n@app.route('/users', methods=['POST'])\ndef add_user():\n    user = request.json\n    users.append(user)\n    return jsonify(user), 201\n\nif __name__ == '__main__':\n    app.run(debug=True)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"testing-the-api",children:"Testing the API"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["GET ",(0,r.jsx)(n.code,{children:"/users"})]}),": Retrieves the list of users."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["POST ",(0,r.jsx)(n.code,{children:"/users"})]}),": Adds a new user. Send JSON data in the request body."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You can use tools like Postman or ",(0,r.jsx)(n.code,{children:"curl"})," to test these endpoints."]}),"\n",(0,r.jsx)(n.h2,{id:"step-3-handling-requests-and-responses",children:"Step 3: Handling Requests and Responses"}),"\n",(0,r.jsx)(n.h3,{id:"parsing-request-data",children:"Parsing Request Data"}),"\n",(0,r.jsx)(n.p,{children:"Flask allows you to easily access request data. For JSON data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@app.route('/users', methods=['POST'])\ndef add_user():\n    if not request.json:\n        return jsonify({\"error\": \"No input data provided\"}), 400\n    \n    user = request.json\n    if 'name' not in user or 'email' not in user:\n        return jsonify({\"error\": \"Missing 'name' or 'email'\"}), 400\n    \n    users.append(user)\n    return jsonify(user), 201\n"})}),"\n",(0,r.jsx)(n.h3,{id:"returning-responses",children:"Returning Responses"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"jsonify"})," to return JSON responses and set appropriate status codes."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@app.route('/users/<int:user_id>', methods=['GET'])\ndef get_user(user_id):\n    user = next((u for u in users if u['id'] == user_id), None)\n    if user is None:\n        return jsonify({\"error\": \"User not found\"}), 404\n    return jsonify(user), 200\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-4-implementing-crud-operations",children:"Step 4: Implementing CRUD Operations"}),"\n",(0,r.jsx)(n.h3,{id:"create",children:"Create"}),"\n",(0,r.jsxs)(n.p,{children:["Already covered in the ",(0,r.jsx)(n.code,{children:"POST /users"})," endpoint."]}),"\n",(0,r.jsx)(n.h3,{id:"read",children:"Read"}),"\n",(0,r.jsxs)(n.p,{children:["Retrieve all users or a specific user with the ",(0,r.jsx)(n.code,{children:"GET /users"})," and ",(0,r.jsx)(n.code,{children:"GET /users/<int:user_id>"})," endpoints."]}),"\n",(0,r.jsx)(n.h3,{id:"update",children:"Update"}),"\n",(0,r.jsx)(n.p,{children:"Add an endpoint to update user details."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@app.route('/users/<int:user_id>', methods=['PUT'])\ndef update_user(user_id):\n    user = next((u for u in users if u['id'] == user_id), None)\n    if user is None:\n        return jsonify({\"error\": \"User not found\"}), 404\n    \n    data = request.json\n    user.update(data)\n    return jsonify(user), 200\n"})}),"\n",(0,r.jsx)(n.h3,{id:"delete",children:"Delete"}),"\n",(0,r.jsx)(n.p,{children:"Add an endpoint to delete a user."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@app.route('/users/<int:user_id>', methods=['DELETE'])\ndef delete_user(user_id):\n    global users\n    users = [u for u in users if u['id'] != user_id]\n    return jsonify({\"message\": \"User deleted\"}), 204\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-5-running-the-flask-application",children:"Step 5: Running the Flask Application"}),"\n",(0,r.jsxs)(n.p,{children:["Ensure your application is ready for development by setting ",(0,r.jsx)(n.code,{children:"debug=True"})," in ",(0,r.jsx)(n.code,{children:"app.run()"}),". For production, consider using a WSGI server like Gunicorn."]}),"\n",(0,r.jsx)(n.h3,{id:"running-in-production",children:"Running in Production"}),"\n",(0,r.jsx)(n.p,{children:"Install Gunicorn:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install gunicorn\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run your Flask app with Gunicorn:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"gunicorn -w 4 app:app\n"})}),"\n",(0,r.jsx)(n.p,{children:"This command runs your app with 4 worker processes, suitable for handling production traffic."}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, we've covered the basics of building REST APIs with Flask, including setting up Flask, creating endpoints, handling requests and responses, and implementing CRUD operations. Flask\u2019s simplicity and flexibility make it an excellent choice for developing APIs quickly and efficiently."}),"\n",(0,r.jsx)(n.p,{children:"In the next chapter, we\u2019ll explore how to expand and use Flask applications in more complex scenarios. Stay tuned!"})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>t});var i=s(6540);const r={},l=i.createContext(r);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);