"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[8912],{2931:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"python-guide/Dataclasses/@property","title":"Using @property","description":"In Python, the @property decorator is a powerful tool for creating class properties, allowing you to define methods that can be accessed like attributes. This tutorial will walk you through a scenario where the use of @property is beneficial, using a class representing fruit pricing as an example.","source":"@site/docs/python-guide/09_Dataclasses/05_@property.md","sourceDirName":"python-guide/09_Dataclasses","slug":"/python-guide/Dataclasses/@property","permalink":"/Python/docs/python-guide/Dataclasses/@property","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-guide/09_Dataclasses/05_@property.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Post Initializer with Init Var","permalink":"/Python/docs/python-guide/Dataclasses/InitVar"},"next":{"title":"Note Taking App","permalink":"/Python/docs/python-guide/Dataclasses/Notes_App"}}');var i=r(4848),s=r(8453);const a={},o="Using @property",p={},l=[{value:"Problem Description",id:"problem-description",level:2},{value:"Solution using @property",id:"solution-using-property",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"using-property",children:"Using @property"})}),"\n",(0,i.jsxs)(t.p,{children:["In Python, the ",(0,i.jsx)(t.code,{children:"@property"})," decorator is a powerful tool for creating class properties, allowing you to define methods that can be accessed like attributes. This tutorial will walk you through a scenario where the use of ",(0,i.jsx)(t.code,{children:"@property"})," is beneficial, using a class representing fruit pricing as an example."]}),"\n",(0,i.jsx)(t.h2,{id:"problem-description",children:"Problem Description"}),"\n",(0,i.jsxs)(t.p,{children:["Consider a class ",(0,i.jsx)(t.code,{children:"Fruit"})," with attributes for the name, weight in grams, and price per kilo. Initially, a post-initializer method was used to calculate the total price. However, this approach had a flaw: if the price per kilo changed during the program's execution, the total price did not reflect the update."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'class Fruit:\n    def __init__(self, name, grams, price_per_kilo):\n        self.name = name\n        self.grams = grams\n        self.price_per_kilo = price_per_kilo\n        self.total_price = self.calculate_total_price()\n\n    def calculate_total_price(self):\n        return (self.grams / 1000) * self.price_per_kilo\n\n# Example usage:\nif __name__ == "__main__":\n    apple = Fruit("Apple", 1500, 5)\n    print(apple.total_price)  # Output: 7.5\n\n    # If price_per_kilo changes, total_price doesn\'t update\n    apple.price_per_kilo = 20\n    print(apple.total_price)  # Output: 7.5 (not updated)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"solution-using-property",children:"Solution using @property"}),"\n",(0,i.jsxs)(t.p,{children:["To address this issue, we'll replace the post-initializer method with a property using the ",(0,i.jsx)(t.code,{children:"@property"})," decorator. This ensures that the total price is recalculated every time it is accessed, reflecting any changes in the price per kilo."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'class Fruit:\n    def __init__(self, name, grams, price_per_kilo):\n        self.name = name\n        self.grams = grams\n        self.price_per_kilo = price_per_kilo\n\n    @property\n    def total_price(self):\n        return (self.grams / 1000) * self.price_per_kilo\n\n# Example usage:\nif __name__ == "__main__":\n    apple = Fruit("Apple", 1500, 5)\n    print(apple.total_price)  # Output: 7.5\n\n    # Now, if price_per_kilo changes, total_price updates accordingly\n    apple.price_per_kilo = 20\n    print(apple.total_price)  # Output: 30.0 (updated)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(t.p,{children:["Using ",(0,i.jsx)(t.code,{children:"@property"})," provides a cleaner and more efficient way to handle scenarios where values need to be calculated dynamically based on the current state of the object. It ensures that every access to the property triggers the associated method, allowing for up-to-date information without the need for manual updates."]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>o});var n=r(6540);const i={},s=n.createContext(i);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);