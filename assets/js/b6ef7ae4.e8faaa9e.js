"use strict";(self.webpackChunkpython=self.webpackChunkpython||[]).push([[725],{8987:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"tips-and-tricks/decorators","title":"5 Useful Python Decorators","description":"In this tutorial, we\'ll explore various decorators, both custom-made and built-in, that can enhance the functionality and efficiency of your Python code. Each decorator serves a specific purpose, ranging from retrying failed operations to deprecating functions and handling program termination gracefully.","source":"@site/docs/tips-and-tricks/decorators.md","sourceDirName":"tips-and-tricks","slug":"/tips-and-tricks/decorators","permalink":"/Python/docs/tips-and-tricks/decorators","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tips-and-tricks/decorators.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tipsAndTricksSidebar","previous":{"title":"50 Linux Terminal Commands","permalink":"/Python/docs/tips-and-tricks/linux-commands"},"next":{"title":"Removing Code Duplication","permalink":"/Python/docs/tips-and-tricks/dont-dry"}}');var i=t(4848),o=t(8453);const a={},c="5 Useful Python Decorators",s={},d=[{value:"1. Retry Decorator",id:"1-retry-decorator",level:2},{value:"Implementation",id:"implementation",level:3},{value:"2. Cache Decorator",id:"2-cache-decorator",level:2},{value:"Implementation",id:"implementation-1",level:3},{value:"3. Get Time Decorator",id:"3-get-time-decorator",level:2},{value:"Implementation",id:"implementation-2",level:3},{value:"4. Deprecated Decorator",id:"4-deprecated-decorator",level:2},{value:"Implementation",id:"implementation-3",level:3},{value:"5. At Exit Register Decorator",id:"5-at-exit-register-decorator",level:2},{value:"Implementation",id:"implementation-4",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"5-useful-python-decorators",children:"5 Useful Python Decorators"})}),"\n",(0,i.jsx)(n.p,{children:"In this tutorial, we'll explore various decorators, both custom-made and built-in, that can enhance the functionality and efficiency of your Python code. Each decorator serves a specific purpose, ranging from retrying failed operations to deprecating functions and handling program termination gracefully."}),"\n",(0,i.jsx)(n.h2,{id:"1-retry-decorator",children:"1. Retry Decorator"}),"\n",(0,i.jsxs)(n.p,{children:["The first decorator we'll explore is the ",(0,i.jsx)(n.code,{children:"retry"})," decorator, designed to retry a function call a specified number of times with a delay between each attempt. This decorator is particularly useful for handling operations that may fail due to external factors such as network issues."]}),"\n",(0,i.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from indent import retry\n\n@retry(retries=4, delay=1)\ndef connect():\n    """\n    Attempt to establish a connection.\n    """\n    # Simulate connection attempt\n    # Raise an exception if connection fails\n    raise ConnectionError("Could not connect to the internet")\n\n# Main entry point\nif __name__ == "__main__":\n    connect()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"2-cache-decorator",children:"2. Cache Decorator"}),"\n",(0,i.jsxs)(n.p,{children:["Next, let's explore the ",(0,i.jsx)(n.code,{children:"cache"})," decorator, which caches the return value of a function, reducing redundant computations for repeated function calls with the same arguments."]}),"\n",(0,i.jsx)(n.h3,{id:"implementation-1",children:"Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from indent import cache\n\n@cache\ndef count_vowels(text):\n    """\n    Count the number of vowels in a given string.\n    """\n    # Expensive operation (simulated delay)\n    # Count vowels in the text\n    vowel_count = sum(1 for char in text if char in \'aeiouAEIOU\')\n    return vowel_count\n\n# Main entry point\nif __name__ == "__main__":\n    print(count_vowels("Bob"))  # First call\n    print(count_vowels("Bob"))  # Subsequent call (cached result)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"3-get-time-decorator",children:"3. Get Time Decorator"}),"\n",(0,i.jsxs)(n.p,{children:["Moving on, let's examine the ",(0,i.jsx)(n.code,{children:"get_time"})," decorator, which measures the execution time of a function. This decorator is useful for performance analysis and optimization."]}),"\n",(0,i.jsx)(n.h3,{id:"implementation-2",children:"Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from indent import get_time\n\n@get_time\ndef connect():\n    """\n    Simulate connecting to an imaginary database.\n    """\n    # Simulate connection process\n    time.sleep(2)\n\n@get_time\ndef fifty_million_loops():\n    """\n    Perform fifty million iterations.\n    """\n    for _ in range(50000000):\n        pass\n\n# Main entry point\nif __name__ == "__main__":\n    connect()\n    fifty_million_loops()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"4-deprecated-decorator",children:"4. Deprecated Decorator"}),"\n",(0,i.jsxs)(n.p,{children:["Now, let's dive into decorators introduced by Carberra. The ",(0,i.jsx)(n.code,{children:"deprecated"})," decorator marks functions as deprecated, providing warnings to users and encouraging them to migrate to alternative solutions."]}),"\n",(0,i.jsx)(n.h3,{id:"implementation-3",children:"Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from deprecated import deprecated\n\n@deprecated("Adding is deprecated", version="1.0.0")\ndef add(x: int, y: int) -> int:\n    """\n    Add two integers.\n    """\n    return x + y\n\n# Main entry point\nif __name__ == "__main__":\n    print(add(5, 7))  # Deprecated function call\n'})}),"\n",(0,i.jsx)(n.h2,{id:"5-at-exit-register-decorator",children:"5. At Exit Register Decorator"}),"\n",(0,i.jsxs)(n.p,{children:["Finally, let's explore the ",(0,i.jsx)(n.code,{children:"at_exit.register"})," decorator, which registers a function to be executed when the program terminates. This decorator is valuable for performing cleanup tasks before exiting the program."]}),"\n",(0,i.jsx)(n.h3,{id:"implementation-4",children:"Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import atexit\n\n@atexit.register\ndef exit_handler():\n    """\n    Function to be called when the program terminates.\n    """\n    print("We\'re exiting now")\n\ndef main():\n    """\n    Main function.\n    """\n    for i in range(10):\n        print(2 ** i)\n\nif __name__ == "__main__":\n    main()\n'})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(6540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);