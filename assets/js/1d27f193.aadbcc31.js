"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[370],{5964:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"design-patterns/creational/creational","title":"Introduction","description":"Creational design patterns deal with object creation mechanisms, aiming to create objects in a manner suitable to the situation. They ensure that the system is decoupled from the specifics of the object creation process.","source":"@site/docs/design-patterns/01_creational/01_creational.md","sourceDirName":"design-patterns/01_creational","slug":"/design-patterns/creational/","permalink":"/Python/docs/design-patterns/creational/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/design-patterns/01_creational/01_creational.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"designPatternsSidebar","previous":{"title":"Creational Design Patterns","permalink":"/Python/docs/category/creational-design-patterns"},"next":{"title":"singleton","permalink":"/Python/docs/design-patterns/creational/singleton"}}');var s=n(4848),o=n(8453);const a={},c="Introduction",i={},l=[{value:"1. Singleton Pattern",id:"1-singleton-pattern",level:2},{value:"2. Factory Method Pattern",id:"2-factory-method-pattern",level:2},{value:"3. Abstract Factory Pattern",id:"3-abstract-factory-pattern",level:2},{value:"4. Builder Pattern",id:"4-builder-pattern",level:2},{value:"5. Prototype Pattern",id:"5-prototype-pattern",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,s.jsx)(t.p,{children:"Creational design patterns deal with object creation mechanisms, aiming to create objects in a manner suitable to the situation. They ensure that the system is decoupled from the specifics of the object creation process."}),"\n",(0,s.jsx)(t.h2,{id:"1-singleton-pattern",children:"1. Singleton Pattern"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"Singleton Pattern"})," ensures that a class has only one instance and provides a global point of access to that instance."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Use Case"}),": Managing shared resources, such as configuration objects or connection pools."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Implementation"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"class Singleton:\n    _instance = None\n\n    def __new__(cls, *args, **kwargs):\n        if not cls._instance:\n            cls._instance = super().__new__(cls, *args, **kwargs)\n        return cls._instance\n\n# Usage\ns1 = Singleton()\ns2 = Singleton()\nprint(s1 is s2)  # Output: True\n"})}),"\n",(0,s.jsx)(t.h2,{id:"2-factory-method-pattern",children:"2. Factory Method Pattern"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"Factory Method Pattern"})," provides an interface for creating objects but allows subclasses to alter the type of objects that will be created."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Use Case"}),": Delegating the instantiation process to child classes."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Implementation"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from abc import ABC, abstractmethod\n\nclass Product(ABC):\n    @abstractmethod\n    def operation(self):\n        pass\n\nclass ConcreteProductA(Product):\n    def operation(self):\n        return "Result of ConcreteProductA"\n\nclass ConcreteProductB(Product):\n    def operation(self):\n        return "Result of ConcreteProductB"\n\nclass Creator(ABC):\n    @abstractmethod\n    def factory_method(self):\n        pass\n\n    def some_operation(self):\n        product = self.factory_method()\n        return f"Creator: Working with {product.operation()}"\n\nclass ConcreteCreatorA(Creator):\n    def factory_method(self):\n        return ConcreteProductA()\n\nclass ConcreteCreatorB(Creator):\n    def factory_method(self):\n        return ConcreteProductB()\n\n# Usage\ncreator = ConcreteCreatorA()\nprint(creator.some_operation())  # Output: Creator: Working with Result of ConcreteProductA\n'})}),"\n",(0,s.jsx)(t.h2,{id:"3-abstract-factory-pattern",children:"3. Abstract Factory Pattern"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"Abstract Factory Pattern"})," provides an interface for creating families of related or dependent objects without specifying their concrete classes."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Use Case"}),": Creating a suite of related objects, such as GUI components for different operating systems."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Implementation"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from abc import ABC, abstractmethod\n\nclass AbstractFactory(ABC):\n    @abstractmethod\n    def create_product_a(self):\n        pass\n\n    @abstractmethod\n    def create_product_b(self):\n        pass\n\nclass ConcreteFactory1(AbstractFactory):\n    def create_product_a(self):\n        return ProductA1()\n\n    def create_product_b(self):\n        return ProductB1()\n\nclass ConcreteFactory2(AbstractFactory):\n    def create_product_a(self):\n        return ProductA2()\n\n    def create_product_b(self):\n        return ProductB2()\n\nclass AbstractProductA(ABC):\n    @abstractmethod\n    def useful_function_a(self):\n        pass\n\nclass AbstractProductB(ABC):\n    @abstractmethod\n    def useful_function_b(self):\n        pass\n\nclass ProductA1(AbstractProductA):\n    def useful_function_a(self):\n        return "The result of ProductA1"\n\nclass ProductB1(AbstractProductB):\n    def useful_function_b(self):\n        return "The result of ProductB1"\n\nclass ProductA2(AbstractProductA):\n    def useful_function_a(self):\n        return "The result of ProductA2"\n\nclass ProductB2(AbstractProductB):\n    def useful_function_b(self):\n        return "The result of ProductB2"\n\n# Usage\nfactory = ConcreteFactory1()\nproduct_a = factory.create_product_a()\nproduct_b = factory.create_product_b()\nprint(product_a.useful_function_a())  # Output: The result of ProductA1\nprint(product_b.useful_function_b())  # Output: The result of ProductB1\n'})}),"\n",(0,s.jsx)(t.h2,{id:"4-builder-pattern",children:"4. Builder Pattern"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"Builder Pattern"})," separates the construction of a complex object from its representation, allowing the same construction process to create different representations."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Use Case"}),": Building complex objects step-by-step, such as constructing HTML documents or meal plans."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Implementation"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'class Builder:\n    def __init__(self):\n        self.product = Product()\n\n    def reset(self):\n        self.product = Product()\n\n    def produce_part_a(self):\n        self.product.add("PartA")\n\n    def produce_part_b(self):\n        self.product.add("PartB")\n\n    def produce_part_c(self):\n        self.product.add("PartC")\n\nclass Product:\n    def __init__(self):\n        self.parts = []\n\n    def add(self, part):\n        self.parts.append(part)\n\n    def list_parts(self):\n        return ", ".join(self.parts)\n\nclass Director:\n    def __init__(self, builder):\n        self.builder = builder\n\n    def build_minimal_viable_product(self):\n        self.builder.produce_part_a()\n\n    def build_full_featured_product(self):\n        self.builder.produce_part_a()\n        self.builder.produce_part_b()\n        self.builder.produce_part_c()\n\n# Usage\nbuilder = Builder()\ndirector = Director(builder)\n\ndirector.build_minimal_viable_product()\nprint(builder.product.list_parts())  # Output: PartA\n\ndirector.build_full_featured_product()\nprint(builder.product.list_parts())  # Output: PartA, PartB, PartC\n'})}),"\n",(0,s.jsx)(t.h2,{id:"5-prototype-pattern",children:"5. Prototype Pattern"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"Prototype Pattern"})," allows objects to be cloned, reducing the overhead of creating objects from scratch."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Use Case"}),": When object creation is expensive or complex."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Implementation"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"import copy\n\nclass Prototype:\n    def __init__(self, value):\n        self.value = value\n\n    def clone(self):\n        return copy.deepcopy(self)\n\n# Usage\noriginal = Prototype([1, 2, 3])\nclone = original.clone()\nprint(original.value == clone.value)  # Output: True\nprint(original is clone)  # Output: False\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var r=n(6540);const s={},o=r.createContext(s);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);