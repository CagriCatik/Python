"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[7951],{2091:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"design-patterns/structural/structural","title":"Introduction","description":"Structural design patterns deal with object composition, ensuring that if one part of a system changes, the entire structure does not need to change. They focus on the relationship between entities to make the structure more flexible and efficient.","source":"@site/docs/design-patterns/02_structural/01_structural.md","sourceDirName":"design-patterns/02_structural","slug":"/design-patterns/structural/structural","permalink":"/Python/docs/design-patterns/structural/structural","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/design-patterns/02_structural/01_structural.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"designPatternsSidebar","previous":{"title":"Structural Design Patterns","permalink":"/Python/docs/category/structural-design-patterns"},"next":{"title":"Behavioral Design Patterns","permalink":"/Python/docs/category/behavioral-design-patterns"}}');var r=t(4848),a=t(8453);const o={},i="Introduction",l={},c=[{value:"1. Adapter Pattern",id:"1-adapter-pattern",level:2},{value:"2. Bridge Pattern",id:"2-bridge-pattern",level:2},{value:"3. Composite Pattern",id:"3-composite-pattern",level:2},{value:"4. Decorator Pattern",id:"4-decorator-pattern",level:2},{value:"5. Facade Pattern",id:"5-facade-pattern",level:2},{value:"6. Flyweight Pattern",id:"6-flyweight-pattern",level:2},{value:"7. Proxy Pattern",id:"7-proxy-pattern",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,r.jsx)(n.p,{children:"Structural design patterns deal with object composition, ensuring that if one part of a system changes, the entire structure does not need to change. They focus on the relationship between entities to make the structure more flexible and efficient."}),"\n",(0,r.jsx)(n.h2,{id:"1-adapter-pattern",children:"1. Adapter Pattern"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Adapter Pattern"})," allows objects with incompatible interfaces to work together by translating one interface into another."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Case"}),": Integrating legacy systems with modern interfaces."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Target:\n    def request(self):\n        return "Target: The default target\'s behavior."\n\nclass Adaptee:\n    def specific_request(self):\n        return ".eetpadA eht fo roivaheb laicepS"\n\nclass Adapter(Target):\n    def __init__(self, adaptee):\n        self.adaptee = adaptee\n\n    def request(self):\n        return f"Adapter: (TRANSLATED) {self.adaptee.specific_request()[::-1]}"\n\n# Usage\nadaptee = Adaptee()\nadapter = Adapter(adaptee)\nprint(adapter.request())  # Output: Adapter: (TRANSLATED) Special behavior of the Adaptee.\n'})}),"\n",(0,r.jsx)(n.h2,{id:"2-bridge-pattern",children:"2. Bridge Pattern"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Bridge Pattern"})," separates an object\u2019s abstraction from its implementation, allowing the two to vary independently."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Case"}),": Developing a cross-platform GUI framework."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Implementation:\n    def operation_implementation(self):\n        pass\n\nclass ConcreteImplementationA(Implementation):\n    def operation_implementation(self):\n        return "ConcreteImplementationA: Here\'s the result on the platform A."\n\nclass ConcreteImplementationB(Implementation):\n    def operation_implementation(self):\n        return "ConcreteImplementationB: Here\'s the result on the platform B."\n\nclass Abstraction:\n    def __init__(self, implementation):\n        self.implementation = implementation\n\n    def operation(self):\n        return (f"Abstraction: Base operation with: {self.implementation.operation_implementation()}")\n\n# Usage\nimplementation_a = ConcreteImplementationA()\nabstraction_a = Abstraction(implementation_a)\nprint(abstraction_a.operation())\n\nimplementation_b = ConcreteImplementationB()\nabstraction_b = Abstraction(implementation_b)\nprint(abstraction_b.operation())\n'})}),"\n",(0,r.jsx)(n.h2,{id:"3-composite-pattern",children:"3. Composite Pattern"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Composite Pattern"})," allows you to compose objects into tree structures and work with them as if they were individual objects."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Case"}),": Representing hierarchical structures like file systems."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Component:\n    def operation(self):\n        pass\n\nclass Leaf(Component):\n    def __init__(self, name):\n        self.name = name\n\n    def operation(self):\n        return self.name\n\nclass Composite(Component):\n    def __init__(self):\n        self.children = []\n\n    def add(self, component):\n        self.children.append(component)\n\n    def remove(self, component):\n        self.children.remove(component)\n\n    def operation(self):\n        results = [child.operation() for child in self.children]\n        return f"Composite({\', \'.join(results)})"\n\n# Usage\nleaf1 = Leaf("Leaf1")\nleaf2 = Leaf("Leaf2")\ncomposite = Composite()\ncomposite.add(leaf1)\ncomposite.add(leaf2)\nprint(composite.operation())  # Output: Composite(Leaf1, Leaf2)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"4-decorator-pattern",children:"4. Decorator Pattern"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Decorator Pattern"})," dynamically adds new responsibilities to objects without modifying their structure."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Case"}),": Adding logging or authentication features."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Component:\n    def operation(self):\n        pass\n\nclass ConcreteComponent(Component):\n    def operation(self):\n        return "ConcreteComponent"\n\nclass Decorator(Component):\n    def __init__(self, component):\n        self._component = component\n\n    def operation(self):\n        return self._component.operation()\n\nclass ConcreteDecoratorA(Decorator):\n    def operation(self):\n        return f"ConcreteDecoratorA({super().operation()})"\n\nclass ConcreteDecoratorB(Decorator):\n    def operation(self):\n        return f"ConcreteDecoratorB({super().operation()})"\n\n# Usage\nsimple = ConcreteComponent()\ndecorator_a = ConcreteDecoratorA(simple)\ndecorator_b = ConcreteDecoratorB(decorator_a)\nprint(decorator_b.operation())  # Output: ConcreteDecoratorB(ConcreteDecoratorA(ConcreteComponent))\n'})}),"\n",(0,r.jsx)(n.h2,{id:"5-facade-pattern",children:"5. Facade Pattern"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Facade Pattern"})," provides a simplified interface to a larger body of code, making it easier to use."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Case"}),": Simplifying interactions with complex subsystems."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class SubsystemA:\n    def operation_a(self):\n        return "SubsystemA: Ready!"\n\nclass SubsystemB:\n    def operation_b(self):\n        return "SubsystemB: Go!"\n\nclass Facade:\n    def __init__(self):\n        self._subsystem_a = SubsystemA()\n        self._subsystem_b = SubsystemB()\n\n    def operation(self):\n        results = []\n        results.append(self._subsystem_a.operation_a())\n        results.append(self._subsystem_b.operation_b())\n        return "\\n".join(results)\n\n# Usage\nfacade = Facade()\nprint(facade.operation())\n'})}),"\n",(0,r.jsx)(n.h2,{id:"6-flyweight-pattern",children:"6. Flyweight Pattern"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Flyweight Pattern"})," minimizes memory usage by sharing as much data as possible with other similar objects."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Case"}),": Optimizing memory usage for a large number of similar objects."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Flyweight:\n    def __init__(self, shared_state):\n        self.shared_state = shared_state\n\n    def operation(self, unique_state):\n        return f"Flyweight: Shared({self.shared_state}) and Unique({unique_state})"\n\nclass FlyweightFactory:\n    def __init__(self):\n        self._flyweights = {}\n\n    def get_flyweight(self, key):\n        if key not in self._flyweights:\n            self._flyweights[key] = Flyweight(key)\n        return self._flyweights[key]\n\n# Usage\nfactory = FlyweightFactory()\nflyweight1 = factory.get_flyweight("State1")\nflyweight2 = factory.get_flyweight("State1")\nprint(flyweight1.operation("Unique1"))  # Shared and unique state\nprint(flyweight1 is flyweight2)  # Output: True\n'})}),"\n",(0,r.jsx)(n.h2,{id:"7-proxy-pattern",children:"7. Proxy Pattern"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Proxy Pattern"})," provides a surrogate or placeholder to control access to an object."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Case"}),": Implementing lazy initialization, access control, or logging."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Subject:\n    def request(self):\n        pass\n\nclass RealSubject(Subject):\n    def request(self):\n        return "RealSubject: Handling request."\n\nclass Proxy(Subject):\n    def __init__(self, real_subject):\n        self._real_subject = real_subject\n\n    def request(self):\n        return f"Proxy: Logging before forwarding to {self._real_subject.request()}"\n\n# Usage\nreal_subject = RealSubject()\nproxy = Proxy(real_subject)\nprint(proxy.request())\n'})}),"\n",(0,r.jsxs)(n.p,{children:["These structural patterns offer robust strategies to manage the relationships between objects, ensuring flexibility and scalability. Next, we will explore ",(0,r.jsx)(n.strong,{children:"Behavioral Design Patterns"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(6540);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);