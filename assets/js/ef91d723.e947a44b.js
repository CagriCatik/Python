"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[1146],{7051:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"python-guide/AsyncIO/Gather","title":"Using Futures for Asynchronous Tasks","description":"Efficient handling of multiple asynchronous tasks is essential in modern programming, especially when dealing with I/O-bound operations. Python provides a robust framework for asynchronous programming through the asyncio library. In this guide, we will explore how to use futures in Python to manage multiple asynchronous tasks effectively.","source":"@site/docs/python-guide/11_AsyncIO/04_Gather.md","sourceDirName":"python-guide/11_AsyncIO","slug":"/python-guide/AsyncIO/Gather","permalink":"/Python/docs/python-guide/AsyncIO/Gather","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-guide/11_AsyncIO/04_Gather.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Tasks for Asynchronous Operations","permalink":"/Python/docs/python-guide/AsyncIO/Tasks"},"next":{"title":"Asynchronous Website Status Checker","permalink":"/Python/docs/python-guide/AsyncIO/Website_Status"}}');var i=t(4848),r=t(8453);const a={},o="Using Futures for Asynchronous Tasks",l={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setting Up the Code",id:"setting-up-the-code",level:2},{value:"Understanding Futures in Python",id:"understanding-futures-in-python",level:2},{value:"Creating and Using Futures with <code>asyncio.gather()</code>",id:"creating-and-using-futures-with-asynciogather",level:2},{value:"Handling Exceptions in Futures",id:"handling-exceptions-in-futures",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"Experiment and Learn",id:"experiment-and-learn",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"using-futures-for-asynchronous-tasks",children:"Using Futures for Asynchronous Tasks"})}),"\n",(0,i.jsxs)(n.p,{children:["Efficient handling of multiple asynchronous tasks is essential in modern programming, especially when dealing with I/O-bound operations. Python provides a robust framework for asynchronous programming through the ",(0,i.jsx)(n.code,{children:"asyncio"})," library. In this guide, we will explore how to use futures in Python to manage multiple asynchronous tasks effectively."]}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"Before diving in, ensure you have:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"A basic understanding of asynchronous programming in Python."}),"\n",(0,i.jsxs)(n.li,{children:["Python 3.7 or newer installed (as ",(0,i.jsx)(n.code,{children:"asyncio"}),"'s key features are better supported in these versions)."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-the-code",children:"Setting Up the Code"}),"\n",(0,i.jsx)(n.p,{children:"The following function serves as the foundation for our examples. It simulates fetching data asynchronously with a delay."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import asyncio\n\n# Simulates fetching data with a delay\nasync def fetch_data(input_value, delay):\n    await asyncio.sleep(delay)\n    return {"input": input_value, "result": f"Data for {input_value}"}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"understanding-futures-in-python",children:"Understanding Futures in Python"}),"\n",(0,i.jsx)(n.p,{children:"A future represents the eventual result of an asynchronous operation. Instead of handling each task sequentially, futures allow us to initiate multiple tasks simultaneously and gather their results efficiently."}),"\n",(0,i.jsxs)(n.h2,{id:"creating-and-using-futures-with-asynciogather",children:["Creating and Using Futures with ",(0,i.jsx)(n.code,{children:"asyncio.gather()"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"asyncio.gather()"})," function provides a convenient way to run multiple coroutines concurrently. Here\u2019s how you can use it:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Main function to handle multiple tasks\nasync def main():\n    tasks = asyncio.gather(\n        fetch_data(1, 1),\n        fetch_data(2, 2),\n        fetch_data(3, 2)  # Simulating a task that might raise an exception\n    )\n\n    results = await tasks\n    print_results(results)\n\n# Helper function to print results\ndef print_results(results):\n    for result in results:\n        print(result["result"])\n\n# Run the main function\nasyncio.run(main())\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the example above, ",(0,i.jsx)(n.code,{children:"asyncio.gather()"})," creates a future that collects the results of all specified tasks. The tasks are executed concurrently, significantly improving efficiency compared to running them sequentially."]}),"\n",(0,i.jsx)(n.h2,{id:"handling-exceptions-in-futures",children:"Handling Exceptions in Futures"}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes, tasks may raise exceptions. It\u2019s crucial to handle these gracefully to prevent one failing task from crashing the entire program. Modify the ",(0,i.jsx)(n.code,{children:"fetch_data"})," function to simulate an exception:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'async def fetch_data(input_value, delay, fails=False):\n    await asyncio.sleep(delay)\n    if fails:\n        raise Exception(f"Task {input_value} failed!")\n    return {"input": input_value, "result": f"Data for {input_value}"}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Update the ",(0,i.jsx)(n.code,{children:"main"})," function to handle exceptions using the ",(0,i.jsx)(n.code,{children:"return_exceptions=True"})," parameter in ",(0,i.jsx)(n.code,{children:"asyncio.gather()"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'async def main():\n    tasks = asyncio.gather(\n        fetch_data(1, 1),\n        fetch_data(2, 2),\n        fetch_data(3, 2, fails=True),\n        return_exceptions=True\n    )\n\n    results = await tasks\n    print_results(results)\n\n# Updated helper function\ndef print_results(results):\n    for result in results:\n        if isinstance(result, Exception):\n            print(f"An exception occurred: {result}")\n        else:\n            print(result["result"])\n\n# Run the main function\nasyncio.run(main())\n'})}),"\n",(0,i.jsx)(n.p,{children:"Here, any exceptions raised by tasks are captured and returned as part of the results list. This allows the program to continue executing other tasks without interruption."}),"\n",(0,i.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Concurrent Execution"}),": Using ",(0,i.jsx)(n.code,{children:"asyncio.gather()"}),", multiple tasks can be executed simultaneously, reducing the total runtime."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Exception Handling"}),": The ",(0,i.jsx)(n.code,{children:"return_exceptions=True"})," parameter ensures that exceptions are returned as part of the results, making error handling more manageable."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Improved Readability"}),": The separation of task execution and result printing improves the overall clarity and maintainability of the code."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"experiment-and-learn",children:"Experiment and Learn"}),"\n",(0,i.jsx)(n.p,{children:"Try modifying the examples to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add more tasks with varying delays."}),"\n",(0,i.jsx)(n.li,{children:"Simulate different types of exceptions."}),"\n",(0,i.jsxs)(n.li,{children:["Explore the behavior when ",(0,i.jsx)(n.code,{children:"return_exceptions"})," is set to ",(0,i.jsx)(n.code,{children:"False"}),"."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);