"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[488],{7942:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rest-api/Designing-REST-API/put_patch_delete","title":"Consuming APIs - PUT, PATCH, and DELETE","description":"In this chapter, we will focus on how to consume REST APIs using Python for PUT, PATCH, and DELETE requests. These methods are used to update and delete resources, providing more control over the data in your RESTful services.","source":"@site/docs/rest-api/Designing-REST-API/04_put_patch_delete.md","sourceDirName":"rest-api/Designing-REST-API","slug":"/rest-api/Designing-REST-API/put_patch_delete","permalink":"/Python/docs/rest-api/Designing-REST-API/put_patch_delete","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rest-api/Designing-REST-API/04_put_patch_delete.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"restAPISidebar","previous":{"title":"Consuming APIs - GET and POST","permalink":"/Python/docs/rest-api/Designing-REST-API/get_post"},"next":{"title":"Designing REST APIs","permalink":"/Python/docs/rest-api/Designing-REST-API/designing_rest_api"}}');var r=n(4848),i=n(8453);const a={},o="Consuming APIs - PUT, PATCH, and DELETE",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Making PUT Requests",id:"making-put-requests",level:2},{value:"Example: Updating a Resource",id:"example-updating-a-resource",level:3},{value:"Explanation",id:"explanation",level:3},{value:"Making PATCH Requests",id:"making-patch-requests",level:2},{value:"Example: Partially Updating a Resource",id:"example-partially-updating-a-resource",level:3},{value:"Explanation",id:"explanation-1",level:3},{value:"Making DELETE Requests",id:"making-delete-requests",level:2},{value:"Example: Deleting a Resource",id:"example-deleting-a-resource",level:3},{value:"Explanation",id:"explanation-2",level:3},{value:"Handling Errors and Responses",id:"handling-errors-and-responses",level:2},{value:"Common Status Codes",id:"common-status-codes",level:3},{value:"Example: Error Handling",id:"example-error-handling",level:3},{value:"Conclusion",id:"conclusion",level:2}];function u(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"consuming-apis---put-patch-and-delete",children:"Consuming APIs - PUT, PATCH, and DELETE"})}),"\n",(0,r.jsx)(s.p,{children:"In this chapter, we will focus on how to consume REST APIs using Python for PUT, PATCH, and DELETE requests. These methods are used to update and delete resources, providing more control over the data in your RESTful services."}),"\n",(0,r.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PUT Requests"}),": Used to update an existing resource or create it if it does not exist."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PATCH Requests"}),": Used to partially update an existing resource."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DELETE Requests"}),": Used to remove a resource."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(s.p,{children:["Make sure you have the ",(0,r.jsx)(s.code,{children:"requests"})," library installed. If not, you can install it using:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"pip install requests\n"})}),"\n",(0,r.jsx)(s.h2,{id:"making-put-requests",children:"Making PUT Requests"}),"\n",(0,r.jsx)(s.p,{children:"PUT requests are used to update an entire resource or create a new resource if it doesn't exist. When using PUT, you send the complete resource representation to the server."}),"\n",(0,r.jsx)(s.h3,{id:"example-updating-a-resource",children:"Example: Updating a Resource"}),"\n",(0,r.jsx)(s.p,{children:"Let's update a user's information with a PUT request:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"import requests\n\n# Define the API endpoint\nurl = 'https://api.example.com/users/1'\n\n# Define the updated data\npayload = {\n    'name': 'Jane Doe',\n    'email': 'jane.doe@example.com'\n}\n\n# Send the PUT request\nresponse = requests.put(url, json=payload)\n\n# Check if the request was successful\nif response.status_code == 200:\n    print(\"User updated successfully!\")\n    updated_user = response.json()  # Get the updated user data\n    print(f\"User ID: {updated_user['id']}, Name: {updated_user['name']}\")\nelse:\n    print(f\"Failed to update user: {response.status_code}\")\n"})}),"\n",(0,r.jsx)(s.h3,{id:"explanation",children:"Explanation"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"URL"}),": The endpoint of the resource you want to update, including the resource ID."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Payload"}),": The updated resource data sent in the request body."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PUT Request"}),": Use ",(0,r.jsx)(s.code,{children:"requests.put()"})," to send the PUT request. The ",(0,r.jsx)(s.code,{children:"json"})," parameter handles serialization."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Response Handling"}),": Check for a ",(0,r.jsx)(s.code,{children:"200 OK"})," status code to confirm the update. Use ",(0,r.jsx)(s.code,{children:"response.json()"})," to get the updated resource data."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"making-patch-requests",children:"Making PATCH Requests"}),"\n",(0,r.jsx)(s.p,{children:"PATCH requests are used to partially update an existing resource. Unlike PUT, PATCH only requires the fields that need to be updated."}),"\n",(0,r.jsx)(s.h3,{id:"example-partially-updating-a-resource",children:"Example: Partially Updating a Resource"}),"\n",(0,r.jsx)(s.p,{children:"Let\u2019s say you want to update only the email address of a user:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"import requests\n\n# Define the API endpoint\nurl = 'https://api.example.com/users/1'\n\n# Define the partial data to update\npayload = {\n    'email': 'new.email@example.com'\n}\n\n# Send the PATCH request\nresponse = requests.patch(url, json=payload)\n\n# Check if the request was successful\nif response.status_code == 200:\n    print(\"User updated successfully!\")\n    updated_user = response.json()  # Get the updated user data\n    print(f\"User ID: {updated_user['id']}, Email: {updated_user['email']}\")\nelse:\n    print(f\"Failed to update user: {response.status_code}\")\n"})}),"\n",(0,r.jsx)(s.h3,{id:"explanation-1",children:"Explanation"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"URL"}),": The endpoint of the resource to be partially updated."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Payload"}),": The partial update data sent in the request body."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PATCH Request"}),": Use ",(0,r.jsx)(s.code,{children:"requests.patch()"})," to send the PATCH request. The ",(0,r.jsx)(s.code,{children:"json"})," parameter handles serialization."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Response Handling"}),": Check for a ",(0,r.jsx)(s.code,{children:"200 OK"})," status code to confirm the partial update. Use ",(0,r.jsx)(s.code,{children:"response.json()"})," to get the updated resource data."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"making-delete-requests",children:"Making DELETE Requests"}),"\n",(0,r.jsx)(s.p,{children:"DELETE requests are used to remove a resource from the server. This method typically does not require a request body."}),"\n",(0,r.jsx)(s.h3,{id:"example-deleting-a-resource",children:"Example: Deleting a Resource"}),"\n",(0,r.jsx)(s.p,{children:"Here\u2019s how to delete a user with a DELETE request:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import requests\n\n# Define the API endpoint\nurl = \'https://api.example.com/users/1\'\n\n# Send the DELETE request\nresponse = requests.delete(url)\n\n# Check if the request was successful\nif response.status_code == 204:\n    print("User deleted successfully!")\nelse:\n    print(f"Failed to delete user: {response.status_code}")\n'})}),"\n",(0,r.jsx)(s.h3,{id:"explanation-2",children:"Explanation"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"URL"}),": The endpoint of the resource you want to delete."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DELETE Request"}),": Use ",(0,r.jsx)(s.code,{children:"requests.delete()"})," to send the DELETE request."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Response Handling"}),": Check for a ",(0,r.jsx)(s.code,{children:"204 No Content"})," status code, which indicates successful deletion."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"handling-errors-and-responses",children:"Handling Errors and Responses"}),"\n",(0,r.jsx)(s.h3,{id:"common-status-codes",children:"Common Status Codes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"200 OK"}),": The request was successful and the response contains data."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"201 Created"}),": The resource was created successfully (used with POST)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"204 No Content"}),": The request was successful but there is no content to return (used with DELETE)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"400 Bad Request"}),": The request was invalid or malformed."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"404 Not Found"}),": The requested resource was not found."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"500 Internal Server Error"}),": An error occurred on the server."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"example-error-handling",children:"Example: Error Handling"}),"\n",(0,r.jsx)(s.p,{children:"Here\u2019s how to handle errors and unexpected responses:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import requests\n\n# Example PUT request\nurl = \'https://api.example.com/users/1\'\npayload = {\'name\': \'Jane Doe\'}\n\nresponse = requests.put(url, json=payload)\n\nif response.status_code == 200:\n    print("Update successful!")\nelif response.status_code == 404:\n    print("Resource not found.")\nelif response.status_code == 400:\n    print("Bad request. Check your data.")\nelif response.status_code == 500:\n    print("Server error. Try again later.")\nelse:\n    print(f"Unexpected error: {response.status_code}")\n'})}),"\n",(0,r.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(s.p,{children:["In this chapter, we have explored how to make PUT, PATCH, and DELETE requests using Python\u2019s ",(0,r.jsx)(s.code,{children:"requests"})," library. These methods allow you to update and delete resources, giving you full control over your interactions with RESTful APIs."]}),"\n",(0,r.jsx)(s.p,{children:"In the next chapter, we will discuss how to handle API authentication and manage sessions, which is crucial for secure and efficient API interactions. Stay tuned!"})]})}function c(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var t=n(6540);const r={},i=t.createContext(r);function a(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);