"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[5155],{6933:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"python-guide/File-Management/Glob","title":"Glob Module","description":"The glob module in Python is a powerful tool for finding file paths matching specific patterns. It uses Unix shell-like rules for pattern matching, making it an efficient way to search for files and directories.","source":"@site/docs/python-guide/15_File-Management/08_Glob.md","sourceDirName":"python-guide/15_File-Management","slug":"/python-guide/File-Management/Glob","permalink":"/Python/docs/python-guide/File-Management/Glob","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-guide/15_File-Management/08_Glob.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Caching JSON","permalink":"/Python/docs/python-guide/File-Management/Caching-JSON"},"next":{"title":"Pickling","permalink":"/Python/docs/python-guide/File-Management/Pickling"}}');var l=i(4848),t=i(8453);const r={},o="Glob Module",a={},c=[{value:"Importing the Glob Module",id:"importing-the-glob-module",level:2},{value:"Finding Files",id:"finding-files",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Pattern Matching",id:"pattern-matching",level:3},{value:"Examples:",id:"examples",level:4},{value:"Recursive Search",id:"recursive-search",level:2},{value:"Using the Generator Version",id:"using-the-generator-version",level:2},{value:"Advantages of the Glob Module",id:"advantages-of-the-glob-module",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"glob-module",children:"Glob Module"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"glob"})," module in Python is a powerful tool for finding file paths matching specific patterns. It uses Unix shell-like rules for pattern matching, making it an efficient way to search for files and directories."]}),"\n",(0,l.jsx)(n.h2,{id:"importing-the-glob-module",children:"Importing the Glob Module"}),"\n",(0,l.jsxs)(n.p,{children:["To use the ",(0,l.jsx)(n.code,{children:"glob"})," module, first import it:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"import glob\n"})}),"\n",(0,l.jsx)(n.h2,{id:"finding-files",children:"Finding Files"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"glob"})," module provides various methods to find files matching patterns. The most commonly used function is ",(0,l.jsx)(n.code,{children:"glob.glob()"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(n.code,{children:"glob.glob()"})," to find files based on a specified pattern. It returns a list of path names that match the pattern:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# Find files named 'index.js'\nfiles = glob.glob(\"index.js\")\nprint(files)  # Output: ['index.js']\n"})}),"\n",(0,l.jsx)(n.h3,{id:"pattern-matching",children:"Pattern Matching"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"glob"})," module supports several pattern-matching features:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"*"}),": Matches zero or more characters."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"?"}),": Matches any single character."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"[...]"}),": Matches any character within the specified set."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"[!...]"})," or ",(0,l.jsx)(n.code,{children:"[^...]"}),": Matches any character not within the specified set."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"examples",children:"Examples:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# Match files with names starting with any two characters followed by 'dex' and ending with '.js'\nfiles = glob.glob(\"??dex*.js\")\nprint(files)  # Example Output: ['index.js']\n\n# Match all files in the current directory\nfiles = glob.glob(\"*\")\nprint(files)\n\n# Match files starting with 'i' or 'l' and ending with '.js'\nfiles = glob.glob(\"[il]*.js\")\nprint(files)\n\n# Match files not starting with 'i' or 'l' and ending with '.js'\nfiles = glob.glob(\"[!il]*.js\")\nprint(files)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"recursive-search",children:"Recursive Search"}),"\n",(0,l.jsxs)(n.p,{children:["To search for files recursively in subdirectories, use the ",(0,l.jsx)(n.code,{children:"**"})," syntax with the ",(0,l.jsx)(n.code,{children:"recursive=True"})," parameter:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Find all JavaScript files recursively in all directories\nfiles = glob.glob("**/*.js", recursive=True)\nprint(files)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"using-the-generator-version",children:"Using the Generator Version"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"glob.iglob()"})," function provides a generator, which yields file names one at a time. This is useful for handling large directories without loading all file names into memory at once:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Using the generator version of glob\nfiles_generator = glob.iglob("**/*.js", recursive=True)\nfor file in files_generator:\n    print(file)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"advantages-of-the-glob-module",children:"Advantages of the Glob Module"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Flexible Pattern Matching"}),": Supports wildcards for powerful and flexible file searches."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Recursive Search"}),": Easily search through directories and subdirectories."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Memory Efficiency"}),": The ",(0,l.jsx)(n.code,{children:"iglob"})," generator version avoids loading all results into memory at once."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"glob"})," module in Python is a convenient and efficient tool for searching for files and directories based on patterns. Whether you need to locate specific files, perform recursive searches, or use pattern matching, the ",(0,l.jsx)(n.code,{children:"glob"})," module offers a simple yet powerful solution for managing file discovery tasks in Python."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var s=i(6540);const l={},t=s.createContext(l);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);