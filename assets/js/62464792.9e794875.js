"use strict";(self.webpackChunkpython=self.webpackChunkpython||[]).push([[735],{2924:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"python-guide/Python_Basics/Lists","title":"Lists","description":"Lists are a versatile data type in Python that allows you to create structures to hold and manipulate elements. In Python, lists are incredibly flexible, allowing you to include elements of various data types.","source":"@site/docs/python-guide/01_Python_Basics/15_Lists.md","sourceDirName":"python-guide/01_Python_Basics","slug":"/python-guide/Python_Basics/Lists","permalink":"/Python/docs/python-guide/Python_Basics/Lists","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-guide/01_Python_Basics/15_Lists.md","tags":[],"version":"current","sidebarPosition":15,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Boolean Data Type","permalink":"/Python/docs/python-guide/Python_Basics/Booleans"},"next":{"title":"Tuple","permalink":"/Python/docs/python-guide/Python_Basics/Tuples"}}');var i=s(4848),a=s(8453);const l={},o="Lists",r={},c=[{value:"Creating a List",id:"creating-a-list",level:2},{value:"Accessing Elements",id:"accessing-elements",level:2},{value:"Basic Operations on Lists",id:"basic-operations-on-lists",level:2},{value:"Append",id:"append",level:3},{value:"Remove",id:"remove",level:3},{value:"Pop",id:"pop",level:3},{value:"Change Element Value",id:"change-element-value",level:3},{value:"Insert",id:"insert",level:3},{value:"Clear",id:"clear",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"lists",children:"Lists"})}),"\n",(0,i.jsx)(n.p,{children:"Lists are a versatile data type in Python that allows you to create structures to hold and manipulate elements. In Python, lists are incredibly flexible, allowing you to include elements of various data types."}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-list",children:"Creating a List"}),"\n",(0,i.jsx)(n.p,{children:"To create a list, use square brackets and include the elements you want inside. Elements can be of any data type, making lists highly adaptable."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Example of creating a list of strings (names of people)\nmy_list = ["Bob", "James", "Tom"]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"accessing-elements",children:"Accessing Elements"}),"\n",(0,i.jsx)(n.p,{children:"Accessing elements in a list is done using indexing, with the index starting at 0."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Accessing elements by index\nfirst_person = my_list[0]  # Retrieves "Bob"\nsecond_person = my_list[1]  # Retrieves "James"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"basic-operations-on-lists",children:"Basic Operations on Lists"}),"\n",(0,i.jsx)(n.h3,{id:"append",children:"Append"}),"\n",(0,i.jsx)(n.p,{children:"Add an element to the end of the list."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'my_list.append("Jeremy")\n# Result: ["Bob", "James", "Tom", "Jeremy"]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"remove",children:"Remove"}),"\n",(0,i.jsx)(n.p,{children:"Remove a specific element from the list."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'my_list.remove("Bob")\n# Result: ["James", "Tom", "Jeremy"]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pop",children:"Pop"}),"\n",(0,i.jsx)(n.p,{children:"Remove and return the last element from the list."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'my_list.pop()\n# Result: ["James", "Tom"]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"change-element-value",children:"Change Element Value"}),"\n",(0,i.jsx)(n.p,{children:"Change the value of an element at a specific index."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'my_list[0] = "Charlotte"\n# Result: ["Charlotte", "Tom"]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"insert",children:"Insert"}),"\n",(0,i.jsx)(n.p,{children:"Insert an element at a specified position."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'my_list.insert(1, "Timothy")\n# Result: ["Charlotte", "Timothy", "Tom"]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"clear",children:"Clear"}),"\n",(0,i.jsx)(n.p,{children:"Remove all elements from the list."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"my_list.clear()\n# Result: []\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(6540);const i={},a=t.createContext(i);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);