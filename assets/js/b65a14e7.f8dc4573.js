"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[3546],{2827:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guide/AsyncIO/Getting_Started","title":"Asynchronous Programming with Asyncio in Python","description":"This tutorial will guide you through the basics of using Asyncio in Python for asynchronous programming. Asyncio is a built-in module that allows you to write asynchronous code, enabling more efficient handling of tasks that involve waiting, such as network requests or I/O operations.","source":"@site/docs/guide/11_AsyncIO/02_Getting_Started.md","sourceDirName":"guide/11_AsyncIO","slug":"/guide/AsyncIO/Getting_Started","permalink":"/Python/docs/guide/AsyncIO/Getting_Started","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide/11_AsyncIO/02_Getting_Started.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Introduction","permalink":"/Python/docs/guide/AsyncIO/Intro"},"next":{"title":"Tasks","permalink":"/Python/docs/guide/AsyncIO/Tasks"}}');var o=t(4848),i=t(8453);const a={},r="Asynchronous Programming with Asyncio in Python",c={},d=[{value:"Getting Started",id:"getting-started",level:2},{value:"Creating an Asynchronous Function",id:"creating-an-asynchronous-function",level:2},{value:"Using the Asynchronous Function",id:"using-the-asynchronous-function",level:2},{value:"Creating Tasks for Concurrent Execution",id:"creating-tasks-for-concurrent-execution",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"asynchronous-programming-with-asyncio-in-python",children:"Asynchronous Programming with Asyncio in Python"})}),"\n",(0,o.jsx)(e.p,{children:"This tutorial will guide you through the basics of using Asyncio in Python for asynchronous programming. Asyncio is a built-in module that allows you to write asynchronous code, enabling more efficient handling of tasks that involve waiting, such as network requests or I/O operations."}),"\n",(0,o.jsx)(e.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,o.jsx)(e.p,{children:"To begin using Asyncio, follow these steps:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["Import the ",(0,o.jsx)(e.code,{children:"asyncio"})," module."]}),"\n",(0,o.jsxs)(e.li,{children:["Import the ",(0,o.jsx)(e.code,{children:"task"})," type from ",(0,o.jsx)(e.code,{children:"asyncio"}),"."]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import asyncio\nfrom asyncio import Task\n"})}),"\n",(0,o.jsx)(e.p,{children:"Now, let's set up the main entry point for our script and make it asynchronous."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'async def main():\n    # Your synchronous code goes here\n    pass\n\nif __name__ == "__main__":\n    asyncio.run(main())\n'})}),"\n",(0,o.jsx)(e.p,{children:"Ensure that your script has an asynchronous main entry point as shown above. This is essential for running your code asynchronously with Asyncio."}),"\n",(0,o.jsx)(e.h2,{id:"creating-an-asynchronous-function",children:"Creating an Asynchronous Function"}),"\n",(0,o.jsxs)(e.p,{children:["Let's create an asynchronous function (coroutine) called ",(0,o.jsx)(e.code,{children:"fetch_data"})," to simulate fetching data asynchronously."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from datetime import datetime\n\nasync def fetch_data(input_data):\n    print("Fetching data...")\n  \n    start_time = datetime.now()\n  \n    # Simulate asynchronous task using asyncio.sleep\n    await asyncio.sleep(3)\n  \n    end_time = datetime.now()\n  \n    print("Data retrieved.")\n  \n    return {\n        \'input\': input_data,\n        \'start_time\': start_time.strftime("%M:%S"),\n        \'end_time\': end_time.strftime("%M:%S")\n    }\n'})}),"\n",(0,o.jsxs)(e.p,{children:["In this example, the ",(0,o.jsx)(e.code,{children:"fetch_data"})," function simulates fetching data asynchronously with a 3-second pause. The ",(0,o.jsx)(e.code,{children:"await"})," keyword is used to indicate asynchronous behavior."]}),"\n",(0,o.jsx)(e.h2,{id:"using-the-asynchronous-function",children:"Using the Asynchronous Function"}),"\n",(0,o.jsxs)(e.p,{children:["Now, let's use the ",(0,o.jsx)(e.code,{children:"fetch_data"})," function inside our main entry point to demonstrate asynchronous execution."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'async def main():\n    data_one = await fetch_data(1)\n    data_two = await fetch_data(2)\n\n    print(f"Data one: {data_one}")\n    print(f"Data two: {data_two}")\n\nif __name__ == "__main__":\n    asyncio.run(main())\n'})}),"\n",(0,o.jsxs)(e.p,{children:["In this example, we await the execution of the ",(0,o.jsx)(e.code,{children:"fetch_data"})," function for both ",(0,o.jsx)(e.code,{children:"data_one"})," and ",(0,o.jsx)(e.code,{children:"data_two"}),". However, this still runs synchronously, as we're waiting for each function to complete before moving on to the next."]}),"\n",(0,o.jsx)(e.h2,{id:"creating-tasks-for-concurrent-execution",children:"Creating Tasks for Concurrent Execution"}),"\n",(0,o.jsx)(e.p,{children:"To fully leverage asynchronous programming, create tasks to run multiple asynchronous functions concurrently. Modify the main entry point as follows:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'async def main():\n    task_one = asyncio.create_task(fetch_data(1))\n    task_two = asyncio.create_task(fetch_data(2))\n\n    data_one = await task_one\n    data_two = await task_two\n\n    print(f"Data one: {data_one}")\n    print(f"Data two: {data_two}")\n'})}),"\n",(0,o.jsxs)(e.p,{children:["By creating tasks using ",(0,o.jsx)(e.code,{children:"asyncio.create_task"}),", we can initiate multiple asynchronous functions simultaneously. This allows the script to run more efficiently, making the most of asynchronous capabilities."]})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>r});var s=t(6540);const o={},i=s.createContext(o);function a(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);