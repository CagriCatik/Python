"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[8597],{6681:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"python-guide/AsyncIO/Tasks","title":"Tasks for Asynchronous Operations","description":"Tasks are independently managed coroutines that provide flexibility in handling asynchronous operations. Using tasks in Python, you can schedule, execute, and manage concurrent workflows efficiently.","source":"@site/docs/python-guide/11_AsyncIO/03_Tasks.md","sourceDirName":"python-guide/11_AsyncIO","slug":"/python-guide/AsyncIO/Tasks","permalink":"/Python/docs/python-guide/AsyncIO/Tasks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-guide/11_AsyncIO/03_Tasks.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Asynchronous Programming with Asyncio","permalink":"/Python/docs/python-guide/AsyncIO/Getting_Started"},"next":{"title":"Using Futures for Asynchronous Tasks","permalink":"/Python/docs/python-guide/AsyncIO/Gather"}}');var s=t(4848),i=t(8453);const c={},r="Tasks for Asynchronous Operations",o={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Example 1: Running a Task",id:"example-1-running-a-task",level:2},{value:"Explanation:",id:"explanation",level:3},{value:"Example 2: Canceling a Task",id:"example-2-canceling-a-task",level:2},{value:"Key Points:",id:"key-points",level:3},{value:"Example 3: Accessing Task Result and Checking Completion",id:"example-3-accessing-task-result-and-checking-completion",level:2},{value:"Highlights:",id:"highlights",level:3},{value:"Example 4: Setting a Timeout for a Task",id:"example-4-setting-a-timeout-for-a-task",level:2},{value:"Insights:",id:"insights",level:3},{value:"Key Takeaways",id:"key-takeaways",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"tasks-for-asynchronous-operations",children:"Tasks for Asynchronous Operations"})}),"\n",(0,s.jsx)(n.p,{children:"Tasks are independently managed coroutines that provide flexibility in handling asynchronous operations. Using tasks in Python, you can schedule, execute, and manage concurrent workflows efficiently."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.p,{children:"Before getting started, ensure the following:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"asyncio"})," library is available in your Python environment."]}),"\n",(0,s.jsx)(n.li,{children:"Python 3.7 or newer is installed for better compatibility and performance."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Here\u2019s an essential import for this guide:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import asyncio\nfrom datetime import datetime\n"})}),"\n",(0,s.jsx)(n.h2,{id:"example-1-running-a-task",children:"Example 1: Running a Task"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"asyncio.create_task"})," method allows you to create and run a non-blocking task. Here\u2019s a basic example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'async def fetch_data(input_data, delay):\n    # Simulate fetching data from an API with a specified delay\n    await asyncio.sleep(delay)\n    return {"input_data": input_data, "timestamp": str(datetime.now())}\n\nasync def main():\n    task = asyncio.create_task(fetch_data(1, 3))\n    print("Running other code while the task is active.")\n    await asyncio.sleep(1)  # Simulate other code running concurrently\n    data = await task\n    print("Retrieved data:", data)\n\nasyncio.run(main())\n'})}),"\n",(0,s.jsx)(n.h3,{id:"explanation",children:"Explanation:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"create_task"})," method schedules the coroutine ",(0,s.jsx)(n.code,{children:"fetch_data"})," to run concurrently."]}),"\n",(0,s.jsx)(n.li,{children:"While the task executes, other code can run without blocking."}),"\n",(0,s.jsx)(n.li,{children:"The program retrieves the task result after it completes."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-2-canceling-a-task",children:"Example 2: Canceling a Task"}),"\n",(0,s.jsx)(n.p,{children:"You might need to cancel a task if it exceeds a predefined duration. Here\u2019s how:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'async def fetch_data(input_data, delay):\n    await asyncio.sleep(delay)\n    return {"input_data": input_data, "timestamp": str(datetime.now())}\n\nasync def main():\n    task = asyncio.create_task(fetch_data(2, 10))\n    await asyncio.sleep(1)  # Allow the task to start\n    task.cancel("Took too long")\n  \n    try:\n        data = await task\n        print("Retrieved data:", data)\n    except asyncio.CancelledError:\n        print("Task was canceled.")\n\nasyncio.run(main())\n'})}),"\n",(0,s.jsx)(n.h3,{id:"key-points",children:"Key Points:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"task.cancel()"})," sends a cancellation request to the task."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"CancelledError"})," exception is raised when the task is canceled."]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.code,{children:"try-except"})," block handles the cancellation."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-3-accessing-task-result-and-checking-completion",children:"Example 3: Accessing Task Result and Checking Completion"}),"\n",(0,s.jsx)(n.p,{children:"Tasks allow you to access their results and check their completion status:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'async def fetch_data(input_data, delay):\n    await asyncio.sleep(delay)\n    return {"input_data": input_data, "timestamp": str(datetime.now())}\n\nasync def main():\n    task = asyncio.create_task(fetch_data(3, 3))\n\n    try:\n        data = task.result()  # Attempt to access the result immediately\n        print("Retrieved data without waiting:", data)\n    except asyncio.InvalidStateError as e:\n        print(f"Error: {e}")\n\n    await asyncio.sleep(4)  # Wait for the task to complete\n    try:\n        data = await task\n        print("Retrieved data after waiting:", data)\n    except asyncio.CancelledError:\n        print("Task was canceled.")\n\n    print("Is the task done?", task.done())\n\nasyncio.run(main())\n'})}),"\n",(0,s.jsx)(n.h3,{id:"highlights",children:"Highlights:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"task.result()"})," to access the result of a task."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"InvalidStateError"})," is raised if the result is accessed before the task completes."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"task.done()"})," method checks if the task has finished."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-4-setting-a-timeout-for-a-task",children:"Example 4: Setting a Timeout for a Task"}),"\n",(0,s.jsxs)(n.p,{children:["To prevent tasks from running indefinitely, use ",(0,s.jsx)(n.code,{children:"asyncio.wait_for"})," to set a timeout:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'async def fetch_data(input_data, delay):\n    await asyncio.sleep(delay)\n    return {"input_data": input_data, "timestamp": str(datetime.now())}\n\nasync def main():\n    task = asyncio.create_task(fetch_data(5, 30))\n\n    try:\n        data = await asyncio.wait_for(task, timeout=3)\n        print("Retrieved data within the timeout:", data)\n    except asyncio.TimeoutError:\n        print("Request took too long. Try again.")\n    except asyncio.CancelledError:\n        print("Task was canceled.")\n\nasyncio.run(main())\n'})}),"\n",(0,s.jsx)(n.h3,{id:"insights",children:"Insights:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"asyncio.wait_for"})," method enforces a timeout on task execution."]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.code,{children:"TimeoutError"})," is raised if the task exceeds the specified time limit."]}),"\n",(0,s.jsx)(n.li,{children:"The task can still be canceled manually if needed."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scheduling Tasks"}),": Use ",(0,s.jsx)(n.code,{children:"asyncio.create_task"})," to schedule coroutines for concurrent execution."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Task Cancellation"}),": Tasks can be canceled using the ",(0,s.jsx)(n.code,{children:"cancel()"})," method, and cancellations should be handled appropriately."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Result Handling"}),": Access task results using ",(0,s.jsx)(n.code,{children:"task.result()"})," after ensuring the task is complete."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Timeout Management"}),": Enforce execution limits with ",(0,s.jsx)(n.code,{children:"asyncio.wait_for"})," to handle tasks exceeding desired durations."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var a=t(6540);const s={},i=a.createContext(s);function c(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);