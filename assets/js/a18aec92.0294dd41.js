"use strict";(self.webpackChunkpython=self.webpackChunkpython||[]).push([[513],{2846:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"data-analysis/Combining_Datasets/inner_join","title":"Inner Join","description":"The inner join method in Pandas is a highly focused way to merge two datasets, keeping only the rows with matching values in the specified column(s) in both DataFrames. It excludes rows that do not intersect, making it a precise tool for aligning related data.","source":"@site/docs/data-analysis/05_Combining_Datasets/05_inner_join.md","sourceDirName":"data-analysis/05_Combining_Datasets","slug":"/data-analysis/Combining_Datasets/inner_join","permalink":"/Python/docs/data-analysis/Combining_Datasets/inner_join","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-analysis/05_Combining_Datasets/05_inner_join.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"dataAnalysisSidebar","previous":{"title":"Outer Join","permalink":"/Python/docs/data-analysis/Combining_Datasets/outer_join"},"next":{"title":"left_right_join","permalink":"/Python/docs/data-analysis/Combining_Datasets/left_right_join"}}');var r=i(4848),a=i(8453);const t={},l="Inner Join",o={},d=[{value:"Syntax",id:"syntax",level:2},{value:"Parameters:",id:"parameters",level:3},{value:"Example: Inner Join",id:"example-inner-join",level:2},{value:"1. Data Preparation",id:"1-data-preparation",level:3},{value:"employees_2021.csv",id:"employees_2021csv",level:4},{value:"employees_2022.csv",id:"employees_2022csv",level:4},{value:"2. Inner Join on a Specific Column",id:"2-inner-join-on-a-specific-column",level:3},{value:"3. Inner Join on Multiple Columns",id:"3-inner-join-on-multiple-columns",level:3},{value:"4. Default Behavior Without <code>on</code>",id:"4-default-behavior-without-on",level:3},{value:"5. Explanation of Results",id:"5-explanation-of-results",level:3},{value:"Key Takeaways:",id:"key-takeaways",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"inner-join",children:"Inner Join"})}),"\n",(0,r.jsx)(n.p,{children:"The inner join method in Pandas is a highly focused way to merge two datasets, keeping only the rows with matching values in the specified column(s) in both DataFrames. It excludes rows that do not intersect, making it a precise tool for aligning related data."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"pandas.merge(left, right, how='inner', on=None, ...)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"left"})}),": DataFrame to merge."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"right"})}),": DataFrame to merge with."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"how"})}),": Join type, set to ",(0,r.jsx)(n.code,{children:'"inner"'})," (default)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"on"})}),": Column or index level names to join on."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"example-inner-join",children:"Example: Inner Join"}),"\n",(0,r.jsx)(n.h3,{id:"1-data-preparation",children:"1. Data Preparation"}),"\n",(0,r.jsx)(n.p,{children:"We will use the same datasets as before:"}),"\n",(0,r.jsx)(n.h4,{id:"employees_2021csv",children:"employees_2021.csv"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Salary"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"John"}),(0,r.jsx)(n.td,{children:"70000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Ava"}),(0,r.jsx)(n.td,{children:"65000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Liam"}),(0,r.jsx)(n.td,{children:"80000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Benjamin"}),(0,r.jsx)(n.td,{children:"75000"})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"employees_2022csv",children:"employees_2022.csv"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Salary"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"John"}),(0,r.jsx)(n.td,{children:"75000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Liam"}),(0,r.jsx)(n.td,{children:"80000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Benjamin"}),(0,r.jsx)(n.td,{children:"75000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Isabella"}),(0,r.jsx)(n.td,{children:"72000"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"2-inner-join-on-a-specific-column",children:"2. Inner Join on a Specific Column"}),"\n",(0,r.jsxs)(n.p,{children:["To merge the datasets on the ",(0,r.jsx)(n.code,{children:"Name"})," column:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pandas as pd\n\n# Load datasets\ndf1 = pd.DataFrame({"Name": ["John", "Ava", "Liam", "Benjamin"], "Salary": [70000, 65000, 80000, 75000]})\ndf2 = pd.DataFrame({"Name": ["John", "Liam", "Benjamin", "Isabella"], "Salary": [75000, 80000, 75000, 72000]})\n\n# Perform inner join\nresult = pd.merge(df1, df2, how="inner", on="Name")\nprint(result)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"      Name  Salary_x  Salary_y\n0    Liam     80000     80000\n1  Benjamin     75000     75000\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"3-inner-join-on-multiple-columns",children:"3. Inner Join on Multiple Columns"}),"\n",(0,r.jsx)(n.p,{children:"When you merge on multiple columns, only rows with matching values in all specified columns are included:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = pd.merge(df1, df2, how="inner", on=["Name", "Salary"])\nprint(result)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"      Name  Salary\n0    Liam   80000\n1  Benjamin   75000\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here, both the ",(0,r.jsx)(n.code,{children:"Name"})," and ",(0,r.jsx)(n.code,{children:"Salary"})," columns must match."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"4-default-behavior-without-on",children:["4. Default Behavior Without ",(0,r.jsx)(n.code,{children:"on"})]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.code,{children:"on"})," is omitted, the join operates on all overlapping columns:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = pd.merge(df1, df2, how="inner")\nprint(result)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"      Name  Salary\n0    Liam   80000\n1  Benjamin   75000\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This behavior is identical to specifying all overlapping columns in the ",(0,r.jsx)(n.code,{children:"on"})," parameter."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"5-explanation-of-results",children:"5. Explanation of Results"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Intersection Only"}),": Rows appear in the result only if the values in the specified column(s) match in both DataFrames."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Column Suffixes"}),": When column names overlap (like ",(0,r.jsx)(n.code,{children:"Salary"}),"), Pandas appends ",(0,r.jsx)(n.code,{children:"_x"})," and ",(0,r.jsx)(n.code,{children:"_y"})," to differentiate them unless specified otherwise."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Precision"}),": You can control which columns are considered using the ",(0,r.jsx)(n.code,{children:"on"})," parameter."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"key-takeaways",children:"Key Takeaways:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Focused Merge"}),": Inner join only retains rows that exist in both DataFrames."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Customizable Keys"}),": Use the ",(0,r.jsx)(n.code,{children:"on"})," parameter to specify the column(s) for the join."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Intersection of Columns"}),": Omitted ",(0,r.jsx)(n.code,{children:"on"})," considers all overlapping columns for matching."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["The inner join method is ideal for extracting the intersection of datasets based on specified keys. It is the default behavior of ",(0,r.jsx)(n.code,{children:"merge()"})," and provides precision in aligning datasets by excluding non-overlapping rows."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var s=i(6540);const r={},a=s.createContext(r);function t(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);