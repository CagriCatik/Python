"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[5899],{6568:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tips-and-tricks/critical-mistakes-to-avoid","title":"5 Critical Python Mistakes to Avoid","description":"In this tutorial, we will delve into five common mistakes that many Python developers make, especially when starting out. Avoiding these mistakes will help you write more efficient, readable, and reliable code.","source":"@site/docs/tips-and-tricks/5-critical-mistakes-to-avoid.md","sourceDirName":"tips-and-tricks","slug":"/tips-and-tricks/critical-mistakes-to-avoid","permalink":"/Python/docs/tips-and-tricks/critical-mistakes-to-avoid","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tips-and-tricks/5-critical-mistakes-to-avoid.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"tipsAndTricksSidebar","previous":{"title":"5 Useful F-String Tricks in Python","permalink":"/Python/docs/tips-and-tricks/F-String-Tricks"},"next":{"title":"Understanding and Addressing Python\'s 5 Worst Features","permalink":"/Python/docs/tips-and-tricks/worst-Features"}}');var o=i(4848),a=i(8453);const r={},s="5 Critical Python Mistakes to Avoid",l={},c=[{value:"Mistake 1: Performing Unreliable Benchmarks",id:"mistake-1-performing-unreliable-benchmarks",level:2},{value:"Incorrect Benchmarking Example",id:"incorrect-benchmarking-example",level:3},{value:"Improved Benchmarking Approach",id:"improved-benchmarking-approach",level:3},{value:"Mistake 2: Premature Optimization",id:"mistake-2-premature-optimization",level:2},{value:"Example of Premature Optimization",id:"example-of-premature-optimization",level:3},{value:"Optimized Code",id:"optimized-code",level:3},{value:"Mistake 3: Neglecting Type Annotations",id:"mistake-3-neglecting-type-annotations",level:2},{value:"Example without Type Annotations",id:"example-without-type-annotations",level:3},{value:"Code with Type Annotations",id:"code-with-type-annotations",level:3},{value:"Mistake 4: Improper Module Execution",id:"mistake-4-improper-module-execution",level:2},{value:"Common Mistake",id:"common-mistake",level:3},{value:"Proper Module Execution",id:"proper-module-execution",level:3},{value:"Mistake 5: Lack of Project Planning",id:"mistake-5-lack-of-project-planning",level:2},{value:"Example of Poor Planning",id:"example-of-poor-planning",level:3},{value:"Example of Proper Planning",id:"example-of-proper-planning",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"5-critical-python-mistakes-to-avoid",children:"5 Critical Python Mistakes to Avoid"})}),"\n",(0,o.jsx)(n.p,{children:"In this tutorial, we will delve into five common mistakes that many Python developers make, especially when starting out. Avoiding these mistakes will help you write more efficient, readable, and reliable code."}),"\n",(0,o.jsx)(n.h2,{id:"mistake-1-performing-unreliable-benchmarks",children:"Mistake 1: Performing Unreliable Benchmarks"}),"\n",(0,o.jsx)(n.p,{children:"Benchmarking is crucial for understanding the performance of different pieces of code. However, many developers make the mistake of performing unreliable benchmarks. Let's explore this with an example."}),"\n",(0,o.jsx)(n.h3,{id:"incorrect-benchmarking-example",children:"Incorrect Benchmarking Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import time\n\ndef get_time(func):\n    start_time = time.perf_counter()\n    func()\n    end_time = time.perf_counter()\n    print(f"{func.__name__} took {end_time - start_time:.6f} seconds")\n\ndef test_pass():\n    pass\n\ndef test_ellipsis():\n    ...\n\nif __name__ == "__main__":\n    get_time(test_pass)\n    get_time(test_ellipsis)\n'})}),"\n",(0,o.jsx)(n.p,{children:"Running this code might lead to inconsistent results. Various factors like background processes can affect the timing. Additionally, changing the order of the functions can also change the results."}),"\n",(0,o.jsx)(n.h3,{id:"improved-benchmarking-approach",children:"Improved Benchmarking Approach"}),"\n",(0,o.jsxs)(n.p,{children:["Using more sophisticated tools like ",(0,o.jsx)(n.code,{children:"timeit"})," can provide more reliable results. Adding warm-up runs can also stabilize the results."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import timeit\n\ndef test_pass():\n    pass\n\ndef test_ellipsis():\n    ...\n\nif __name__ == "__main__":\n    print(timeit.timeit(test_pass, number=1000000))\n    print(timeit.timeit(test_ellipsis, number=1000000))\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This approach is more robust because ",(0,o.jsx)(n.code,{children:"timeit"})," runs the functions multiple times and provides a more accurate measure of performance."]}),"\n",(0,o.jsx)(n.h2,{id:"mistake-2-premature-optimization",children:"Mistake 2: Premature Optimization"}),"\n",(0,o.jsx)(n.p,{children:"Premature optimization involves focusing on performance improvements too early in the development process. It is often better to write clear and correct code first and then optimize it if necessary."}),"\n",(0,o.jsx)(n.h3,{id:"example-of-premature-optimization",children:"Example of Premature Optimization"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def is_adult(age):\n    if age >= 21:\n        return True\n    else:\n        return False\n"})}),"\n",(0,o.jsx)(n.p,{children:"While this code works, it can be simplified for readability."}),"\n",(0,o.jsx)(n.h3,{id:"optimized-code",children:"Optimized Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def is_adult(age):\n    return age >= 21\n"})}),"\n",(0,o.jsx)(n.p,{children:"Optimizations should be driven by actual performance needs rather than assumptions. Profiling tools can help identify real bottlenecks in your code."}),"\n",(0,o.jsx)(n.h2,{id:"mistake-3-neglecting-type-annotations",children:"Mistake 3: Neglecting Type Annotations"}),"\n",(0,o.jsx)(n.p,{children:"Type annotations improve code readability and help catch errors early by making the expected data types explicit. They are especially useful in large codebases and collaborative projects."}),"\n",(0,o.jsx)(n.h3,{id:"example-without-type-annotations",children:"Example without Type Annotations"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def add(a, b):\n    return a + b\n\nx = add("100", 100)  # This will raise a TypeError at runtime\n'})}),"\n",(0,o.jsx)(n.h3,{id:"code-with-type-annotations",children:"Code with Type Annotations"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def add(a: int, b: int) -> int:\n    return a + b\n\nx: int = add(100, 100)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Using type annotations and tools like ",(0,o.jsx)(n.code,{children:"mypy"})," can help catch type-related errors before runtime, making your code more robust."]}),"\n",(0,o.jsx)(n.h2,{id:"mistake-4-improper-module-execution",children:"Mistake 4: Improper Module Execution"}),"\n",(0,o.jsx)(n.p,{children:"When writing scripts and modules, it's important to ensure that the code runs as expected, whether it is executed directly or imported as a module."}),"\n",(0,o.jsx)(n.h3,{id:"common-mistake",children:"Common Mistake"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# bob_module.py\ndef get_name():\n    return "Bob"\n\nprint(get_name())\n\n# main.py\nimport bob_module\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Executing ",(0,o.jsx)(n.code,{children:"main.py"})," will run the code in ",(0,o.jsx)(n.code,{children:"bob_module.py"}),", which is often unintended."]}),"\n",(0,o.jsx)(n.h3,{id:"proper-module-execution",children:"Proper Module Execution"}),"\n",(0,o.jsxs)(n.p,{children:["Using the ",(0,o.jsx)(n.code,{children:'if __name__ == "__main__":'})," construct can help control the execution flow."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# bob_module.py\ndef get_name():\n    return "Bob"\n\nif __name__ == "__main__":\n    print(get_name())\n\n# main.py\nimport bob_module\nprint(bob_module.get_name())\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This ensures that the code in ",(0,o.jsx)(n.code,{children:"bob_module.py"})," only runs when the module is executed directly, not when it is imported."]}),"\n",(0,o.jsx)(n.h2,{id:"mistake-5-lack-of-project-planning",children:"Mistake 5: Lack of Project Planning"}),"\n",(0,o.jsx)(n.p,{children:"Not planning a project before starting to code can lead to confusion and inefficiency. Proper planning involves outlining the structure and functionality of your code before diving into implementation."}),"\n",(0,o.jsx)(n.h3,{id:"example-of-poor-planning",children:"Example of Poor Planning"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class SmartLamp:\n    def __init__(self, name, version):\n        self.name = name\n        self.version = version\n\n    def turn_on(self):\n        pass\n\n    def turn_off(self):\n        pass\n\n    def check_for_updates(self):\n        pass\n"})}),"\n",(0,o.jsx)(n.h3,{id:"example-of-proper-planning",children:"Example of Proper Planning"}),"\n",(0,o.jsx)(n.p,{children:"Outline the structure and methods you need before implementing them."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'class SmartLamp:\n    def __init__(self, name: str, version: str):\n        self.name = name\n        self.version = version\n\n    def turn_on(self) -> None:\n        print(f"{self.name} is now ON")\n\n    def turn_off(self) -> None:\n        print(f"{self.name} is now OFF")\n\n    def check_for_updates(self) -> str:\n        return "No updates available"\n'})}),"\n",(0,o.jsx)(n.p,{children:"Creating a blueprint of your project helps ensure you don't miss important functionalities and can make the development process smoother."}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"Avoiding these common Python mistakes can greatly improve the quality of your code. By focusing on reliable benchmarking, avoiding premature optimization, using type annotations, ensuring proper module execution, and planning your projects, you can develop more efficient, readable, and maintainable code."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>s});var t=i(6540);const o={},a=t.createContext(o);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);