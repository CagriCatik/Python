"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[2369],{178:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"tips-and-tricks/yield","title":"yield from","description":"In Python, yield from is a sophisticated feature introduced in PEP 380 (Python Enhancement Proposal) that simplifies the delegation of part of a generator\'s operations to another generator. Understanding how yield from works can be a significant advantage for Python developers, particularly when working with generators and coroutines. This tutorial will provide a thorough explanation of yield from, breaking down its syntax, usage, and the scenarios where it becomes essential.","source":"@site/docs/tips-and-tricks/yield.md","sourceDirName":"tips-and-tricks","slug":"/tips-and-tricks/yield","permalink":"/Python/docs/tips-and-tricks/yield","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tips-and-tricks/yield.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tipsAndTricksSidebar","previous":{"title":"self","permalink":"/Python/docs/tips-and-tricks/wtf-is-self"}}');var r=t(4848),o=t(8453);const a={},s="yield from",l={},d=[{value:"1. Introduction to Generators in Python",id:"1-introduction-to-generators-in-python",level:2},{value:"2. Basic Use Case of <code>yield</code>",id:"2-basic-use-case-of-yield",level:2},{value:"3. The Motivation Behind <code>yield from</code>",id:"3-the-motivation-behind-yield-from",level:2},{value:"4. Using <code>yield from</code>: A Deep Dive",id:"4-using-yield-from-a-deep-dive",level:2},{value:"A. Delegating to a Subgenerator",id:"a-delegating-to-a-subgenerator",level:3},{value:"B. Two-Way Communication with Subgenerators",id:"b-two-way-communication-with-subgenerators",level:3},{value:"C. Handling <code>StopIteration</code>",id:"c-handling-stopiteration",level:3},{value:"5. <code>yield from</code> with Iterators",id:"5-yield-from-with-iterators",level:2},{value:"6. Practical Examples and Real-World Applications",id:"6-practical-examples-and-real-world-applications",level:2},{value:"Example: Flattening a Nested Iterable",id:"example-flattening-a-nested-iterable",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"yield-from",children:(0,r.jsx)(n.code,{children:"yield from"})})}),"\n",(0,r.jsxs)(n.p,{children:["In Python, ",(0,r.jsx)(n.code,{children:"yield from"})," is a sophisticated feature introduced in PEP 380 (Python Enhancement Proposal) that simplifies the delegation of part of a generator's operations to another generator. Understanding how ",(0,r.jsx)(n.code,{children:"yield from"})," works can be a significant advantage for Python developers, particularly when working with generators and coroutines. This tutorial will provide a thorough explanation of ",(0,r.jsx)(n.code,{children:"yield from"}),", breaking down its syntax, usage, and the scenarios where it becomes essential."]}),"\n",(0,r.jsx)(n.h2,{id:"1-introduction-to-generators-in-python",children:"1. Introduction to Generators in Python"}),"\n",(0,r.jsx)(n.p,{children:"In Python, a generator is a function that returns an iterator. It allows you to iterate over a set of values lazily, meaning the values are generated only when needed. This behavior is useful for dealing with large datasets or streams of data, as it minimizes memory usage."}),"\n",(0,r.jsx)(n.p,{children:"A simple generator might look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def simple_generator(n):\n    for i in range(n):\n        yield i\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here, ",(0,r.jsx)(n.code,{children:"yield"})," is a keyword that allows the function to return a value and later resume from where it left off. When you call ",(0,r.jsx)(n.code,{children:"next()"})," on a generator, it executes the function until it hits the next ",(0,r.jsx)(n.code,{children:"yield"})," statement."]}),"\n",(0,r.jsxs)(n.h2,{id:"2-basic-use-case-of-yield",children:["2. Basic Use Case of ",(0,r.jsx)(n.code,{children:"yield"})]}),"\n",(0,r.jsxs)(n.p,{children:["To understand ",(0,r.jsx)(n.code,{children:"yield from"}),", we first need to grasp how ",(0,r.jsx)(n.code,{children:"yield"})," works in isolation. Consider the following generator:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def numbers(n):\n    for i in range(n):\n        yield str(i)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This generator function yields string representations of numbers from ",(0,r.jsx)(n.code,{children:"0"})," to ",(0,r.jsx)(n.code,{children:"n-1"}),". If you instantiate this generator and call ",(0,r.jsx)(n.code,{children:"next()"}),", you retrieve each string in sequence until you exhaust the generator."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"number_gen = numbers(3)\nprint(next(number_gen))  # Outputs: '0'\nprint(next(number_gen))  # Outputs: '1'\nprint(next(number_gen))  # Outputs: '2'\nprint(next(number_gen))  # Raises StopIteration\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"3-the-motivation-behind-yield-from",children:["3. The Motivation Behind ",(0,r.jsx)(n.code,{children:"yield from"})]}),"\n",(0,r.jsxs)(n.p,{children:["While ",(0,r.jsx)(n.code,{children:"yield"})," allows us to produce values lazily, there are scenarios where you might want to delegate part of your generator's job to another generator. This is where ",(0,r.jsx)(n.code,{children:"yield from"})," comes into play. It simplifies code that would otherwise require a loop to yield values from a subgenerator."]}),"\n",(0,r.jsx)(n.p,{children:"Consider a situation where you want to create a generator that yields values from another generator and adds a couple of extra values at the beginning and end:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def wrapper(generator):\n    yield "first value"\n    for value in generator:\n        yield value\n    yield "last value"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Using ",(0,r.jsx)(n.code,{children:"yield from"}),", the same function can be written more succinctly:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def wrapper(generator):\n    yield "first value"\n    yield from generator\n    yield "last value"\n'})}),"\n",(0,r.jsx)(n.p,{children:"This not only reduces boilerplate code but also clearly indicates that the generator is delegating part of its operation to another generator."}),"\n",(0,r.jsxs)(n.h2,{id:"4-using-yield-from-a-deep-dive",children:["4. Using ",(0,r.jsx)(n.code,{children:"yield from"}),": A Deep Dive"]}),"\n",(0,r.jsx)(n.h3,{id:"a-delegating-to-a-subgenerator",children:"A. Delegating to a Subgenerator"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"yield from"})," expression is used to delegate part of a generator's operations to another generator. This is particularly useful when you have a generator that needs to yield all values from another generator or iterable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def wrapper(generator):\n    yield "first value"\n    yield from generator\n    yield "last value"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In the above example, the ",(0,r.jsx)(n.code,{children:"yield from generator"})," line replaces the need for an explicit loop to yield each item from the subgenerator."]}),"\n",(0,r.jsx)(n.h3,{id:"b-two-way-communication-with-subgenerators",children:"B. Two-Way Communication with Subgenerators"}),"\n",(0,r.jsxs)(n.p,{children:["A key advantage of ",(0,r.jsx)(n.code,{children:"yield from"})," is that it sets up a bidirectional communication channel between the caller and the subgenerator. This allows values to be sent to the subgenerator using the ",(0,r.jsx)(n.code,{children:"send()"})," method and exceptions to be propagated."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def subgen():\n    x = yield\n    yield x\n\ndef main_gen():\n    yield from subgen()\n\ng = main_gen()\nnext(g)         # Prime the generator\nprint(g.send(42))  # Outputs: 42\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, the value ",(0,r.jsx)(n.code,{children:"42"})," is sent directly to the ",(0,r.jsx)(n.code,{children:"subgen()"})," generator, thanks to ",(0,r.jsx)(n.code,{children:"yield from"}),". Without ",(0,r.jsx)(n.code,{children:"yield from"}),", you would need additional code to handle sending and receiving values between generators."]}),"\n",(0,r.jsxs)(n.h3,{id:"c-handling-stopiteration",children:["C. Handling ",(0,r.jsx)(n.code,{children:"StopIteration"})]}),"\n",(0,r.jsxs)(n.p,{children:["When using ",(0,r.jsx)(n.code,{children:"yield from"}),", the subgenerator runs to completion, and the value returned by the subgenerator's ",(0,r.jsx)(n.code,{children:"return"})," statement (or implicitly by raising ",(0,r.jsx)(n.code,{children:"StopIteration"}),") is passed back as the value of the ",(0,r.jsx)(n.code,{children:"yield from"})," expression."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def subgen():\n    yield 1\n    return 42\n\ndef main_gen():\n    result = yield from subgen()\n    print(f"Subgenerator returned: {result}")\n\ng = main_gen()\nprint(next(g))  # Outputs: 1\nnext(g)         # Outputs: Subgenerator returned: 42\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Here, ",(0,r.jsx)(n.code,{children:"yield from"})," captures the ",(0,r.jsx)(n.code,{children:"42"})," returned by the subgenerator and allows the main generator to use it."]}),"\n",(0,r.jsxs)(n.h2,{id:"5-yield-from-with-iterators",children:["5. ",(0,r.jsx)(n.code,{children:"yield from"})," with Iterators"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"yield from"})," syntax also works seamlessly with any iterable, not just generators. This makes it highly versatile:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def enumerations(iterable):\n    yield from enumerate(iterable, start=1)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The function ",(0,r.jsx)(n.code,{children:"enumerations"})," yields enumerated pairs from an iterable, starting at 1, leveraging ",(0,r.jsx)(n.code,{children:"yield from"})," to simplify the implementation."]}),"\n",(0,r.jsx)(n.h2,{id:"6-practical-examples-and-real-world-applications",children:"6. Practical Examples and Real-World Applications"}),"\n",(0,r.jsxs)(n.p,{children:["One common use case for ",(0,r.jsx)(n.code,{children:"yield from"})," is in the implementation of coroutines. By delegating part of a coroutine's work to another coroutine, you can modularize complex workflows."]}),"\n",(0,r.jsx)(n.p,{children:"Another application is in the creation of recursive generators, where a generator may need to yield values from itself or other generators in a tree-like structure."}),"\n",(0,r.jsx)(n.h3,{id:"example-flattening-a-nested-iterable",children:"Example: Flattening a Nested Iterable"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def flatten(nested):\n    for item in nested:\n        if isinstance(item, (list, tuple)):\n            yield from flatten(item)\n        else:\n            yield item\n\nnested_list = [1, [2, [3, 4], 5], 6]\nprint(list(flatten(nested_list)))  # Outputs: [1, 2, 3, 4, 5, 6]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, ",(0,r.jsx)(n.code,{children:"yield from"})," is used to flatten a nested list, delegating the flattening of sublists to the same function recursively."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);