"use strict";(self.webpackChunkpython=self.webpackChunkpython||[]).push([[5513],{1507:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rest-api/Building-REST-API/django_rest","title":"Getting to Know Django Rest Framework (DRF)","description":"In this tutorial, we will dive into Django Rest Framework (DRF), a powerful toolkit for building Web APIs in Django. DRF simplifies the process of creating RESTful APIs and provides features like serialization, authentication, and viewsets.","source":"@site/docs/rest-api/Building-REST-API/03_django_rest.md","sourceDirName":"rest-api/Building-REST-API","slug":"/rest-api/Building-REST-API/django_rest","permalink":"/Python/docs/rest-api/Building-REST-API/django_rest","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rest-api/Building-REST-API/03_django_rest.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"restAPISidebar","previous":{"title":"Expanding and Using Flask App","permalink":"/Python/docs/rest-api/Building-REST-API/expanding_using_flask"},"next":{"title":"Loading and Serializing Data With DRF","permalink":"/Python/docs/rest-api/Building-REST-API/loading_serializing_drf"}}');var r=s(4848),a=s(8453);const t={},l="Getting to Know Django Rest Framework (DRF)",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Step 1: Setting Up DRF",id:"step-1-setting-up-drf",level:2},{value:"Install Django and DRF",id:"install-django-and-drf",level:3},{value:"Create a Django Project",id:"create-a-django-project",level:3},{value:"Create a Django App",id:"create-a-django-app",level:3},{value:"Configure DRF in Django",id:"configure-drf-in-django",level:3},{value:"Step 2: Creating a Basic DRF Project",id:"step-2-creating-a-basic-drf-project",level:2},{value:"Define a Model",id:"define-a-model",level:3},{value:"Create and Apply Migrations",id:"create-and-apply-migrations",level:3},{value:"Create a Serializer",id:"create-a-serializer",level:3},{value:"Create Views",id:"create-views",level:3},{value:"Define URL Routing",id:"define-url-routing",level:3},{value:"Step 3: Understanding Serializers",id:"step-3-understanding-serializers",level:2},{value:"Serializers",id:"serializers",level:3},{value:"Step 4: Using ViewSets and Routers",id:"step-4-using-viewsets-and-routers",level:2},{value:"ViewSets",id:"viewsets",level:3},{value:"Routers",id:"routers",level:3},{value:"Step 5: Implementing Basic Authentication",id:"step-5-implementing-basic-authentication",level:2},{value:"Add Authentication",id:"add-authentication",level:3},{value:"Create a User and Test Authentication",id:"create-a-user-and-test-authentication",level:3},{value:"Step 6: Testing DRF APIs",id:"step-6-testing-drf-apis",level:2},{value:"Write Tests",id:"write-tests",level:3},{value:"Run Tests",id:"run-tests",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"getting-to-know-django-rest-framework-drf",children:"Getting to Know Django Rest Framework (DRF)"})}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, we will dive into Django Rest Framework (DRF), a powerful toolkit for building Web APIs in Django. DRF simplifies the process of creating RESTful APIs and provides features like serialization, authentication, and viewsets."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"We will cover:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Setting up DRF"}),"\n",(0,r.jsx)(n.li,{children:"Creating a basic DRF project"}),"\n",(0,r.jsx)(n.li,{children:"Understanding serializers"}),"\n",(0,r.jsx)(n.li,{children:"Using viewsets and routers"}),"\n",(0,r.jsx)(n.li,{children:"Implementing basic authentication"}),"\n",(0,r.jsx)(n.li,{children:"Testing DRF APIs"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-1-setting-up-drf",children:"Step 1: Setting Up DRF"}),"\n",(0,r.jsx)(n.h3,{id:"install-django-and-drf",children:"Install Django and DRF"}),"\n",(0,r.jsx)(n.p,{children:"First, you need to have Django and DRF installed. If you haven\u2019t installed them yet, you can do so with pip:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install django djangorestframework\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-a-django-project",children:"Create a Django Project"}),"\n",(0,r.jsx)(n.p,{children:"Start by creating a new Django project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"django-admin startproject myproject\n"})}),"\n",(0,r.jsx)(n.p,{children:"Navigate to your project directory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd myproject\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-a-django-app",children:"Create a Django App"}),"\n",(0,r.jsx)(n.p,{children:"Create a new app where we will build our API:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python manage.py startapp myapp\n"})}),"\n",(0,r.jsx)(n.h3,{id:"configure-drf-in-django",children:"Configure DRF in Django"}),"\n",(0,r.jsxs)(n.p,{children:["Add ",(0,r.jsx)(n.code,{children:"rest_framework"})," and your app (",(0,r.jsx)(n.code,{children:"myapp"}),") to the ",(0,r.jsx)(n.code,{children:"INSTALLED_APPS"})," in ",(0,r.jsx)(n.code,{children:"myproject/settings.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"INSTALLED_APPS = [\n    ...\n    'rest_framework',\n    'myapp',\n]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-2-creating-a-basic-drf-project",children:"Step 2: Creating a Basic DRF Project"}),"\n",(0,r.jsx)(n.h3,{id:"define-a-model",children:"Define a Model"}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"myapp/models.py"}),", define a model for your API. For example, let\u2019s create a ",(0,r.jsx)(n.code,{children:"User"})," model:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from django.db import models\n\nclass User(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField(unique=True)\n    \n    def __str__(self):\n        return self.name\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-and-apply-migrations",children:"Create and Apply Migrations"}),"\n",(0,r.jsx)(n.p,{children:"Generate and apply migrations to create the database schema:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python manage.py makemigrations\npython manage.py migrate\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-a-serializer",children:"Create a Serializer"}),"\n",(0,r.jsx)(n.p,{children:"Serializers in DRF are used to convert complex data types, such as Django models, into native Python data types that can then be rendered into JSON."}),"\n",(0,r.jsxs)(n.p,{children:["Create a file named ",(0,r.jsx)(n.code,{children:"serializers.py"})," in ",(0,r.jsx)(n.code,{children:"myapp"})," and define a serializer for the ",(0,r.jsx)(n.code,{children:"User"})," model:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from rest_framework import serializers\nfrom .models import User\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = '__all__'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-views",children:"Create Views"}),"\n",(0,r.jsxs)(n.p,{children:["Views handle the logic of your API. You can use DRF\u2019s ",(0,r.jsx)(n.code,{children:"APIView"})," or ",(0,r.jsx)(n.code,{children:"viewsets"})," to create views."]}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"myapp/views.py"}),", define a view using DRF\u2019s ",(0,r.jsx)(n.code,{children:"APIView"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from rest_framework import status\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom .models import User\nfrom .serializers import UserSerializer\n\nclass UserList(APIView):\n    def get(self, request):\n        users = User.objects.all()\n        serializer = UserSerializer(users, many=True)\n        return Response(serializer.data)\n\n    def post(self, request):\n        serializer = UserSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"define-url-routing",children:"Define URL Routing"}),"\n",(0,r.jsxs)(n.p,{children:["Create a file named ",(0,r.jsx)(n.code,{children:"urls.py"})," in ",(0,r.jsx)(n.code,{children:"myapp"})," and configure URL routing for your API:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from django.urls import path\nfrom .views import UserList\n\nurlpatterns = [\n    path('users/', UserList.as_view(), name='user-list'),\n]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Include the ",(0,r.jsx)(n.code,{children:"myapp"})," URLs in the main project\u2019s ",(0,r.jsx)(n.code,{children:"urls.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('myapp.urls')),\n]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-3-understanding-serializers",children:"Step 3: Understanding Serializers"}),"\n",(0,r.jsx)(n.h3,{id:"serializers",children:"Serializers"}),"\n",(0,r.jsx)(n.p,{children:"Serializers in DRF handle the conversion between complex data types and native Python data types. Here\u2019s a breakdown:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ModelSerializer"}),": A shortcut for creating serializers that deal with Django models. It automatically generates fields based on the model."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = '__all__'\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Serializer"}),": Provides more control over serialization but requires manual field definition."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class UserSerializer(serializers.Serializer):\n    id = serializers.IntegerField(read_only=True)\n    name = serializers.CharField(max_length=100)\n    email = serializers.EmailField()\n\n    def create(self, validated_data):\n        return User.objects.create(**validated_data)\n\n    def update(self, instance, validated_data):\n        instance.name = validated_data.get('name', instance.name)\n        instance.email = validated_data.get('email', instance.email)\n        instance.save()\n        return instance\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-4-using-viewsets-and-routers",children:"Step 4: Using ViewSets and Routers"}),"\n",(0,r.jsx)(n.h3,{id:"viewsets",children:"ViewSets"}),"\n",(0,r.jsx)(n.p,{children:"ViewSets provide a high-level abstraction for working with DRF. They combine CRUD operations into a single class."}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"myapp/views.py"}),", define a viewset:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from rest_framework import viewsets\nfrom .models import User\nfrom .serializers import UserSerializer\n\nclass UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n"})}),"\n",(0,r.jsx)(n.h3,{id:"routers",children:"Routers"}),"\n",(0,r.jsx)(n.p,{children:"Routers automatically generate URL conf for your viewsets."}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"myapp/urls.py"}),", use a router to register your viewsets:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from rest_framework.routers import DefaultRouter\nfrom .views import UserViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'users', UserViewSet)\n\nurlpatterns = router.urls\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-5-implementing-basic-authentication",children:"Step 5: Implementing Basic Authentication"}),"\n",(0,r.jsx)(n.h3,{id:"add-authentication",children:"Add Authentication"}),"\n",(0,r.jsx)(n.p,{children:"DRF supports several authentication methods. We will use basic authentication for simplicity."}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"myproject/settings.py"}),", add the authentication classes:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.BasicAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-a-user-and-test-authentication",children:"Create a User and Test Authentication"}),"\n",(0,r.jsx)(n.p,{children:"Create a superuser to test authentication:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python manage.py createsuperuser\n"})}),"\n",(0,r.jsx)(n.p,{children:"Use the Django admin to view and manage users, or use an API client like Postman to test authentication."}),"\n",(0,r.jsx)(n.h2,{id:"step-6-testing-drf-apis",children:"Step 6: Testing DRF APIs"}),"\n",(0,r.jsx)(n.h3,{id:"write-tests",children:"Write Tests"}),"\n",(0,r.jsxs)(n.p,{children:["You can use Django\u2019s test framework to test your DRF APIs. Create a ",(0,r.jsx)(n.code,{children:"tests.py"})," file in ",(0,r.jsx)(n.code,{children:"myapp"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from rest_framework.test import APITestCase\nfrom rest_framework import status\nfrom .models import User\n\nclass UserTests(APITestCase):\n    def setUp(self):\n        self.user = User.objects.create(name='John Doe', email='john@example.com')\n    \n    def test_get_users(self):\n        response = self.client.get('/api/users/')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n\n    def test_post_user(self):\n        data = {'name': 'Jane Doe', 'email': 'jane@example.com'}\n        response = self.client.post('/api/users/', data, format='json')\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertEqual(User.objects.count(), 2)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"run-tests",children:"Run Tests"}),"\n",(0,r.jsx)(n.p,{children:"Run your tests with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python manage.py test\n"})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, we explored Django Rest Framework (DRF), covering its setup, basic usage, and key features such as serializers, viewsets, routers, and authentication. DRF provides powerful tools to quickly build and manage APIs within Django, making it a robust choice for API development."}),"\n",(0,r.jsx)(n.p,{children:"In the next chapter, we will delve into loading and serializing data with DRF to further enhance your API capabilities. Stay tuned!"})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var i=s(6540);const r={},a=i.createContext(r);function t(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);