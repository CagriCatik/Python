"use strict";(self.webpackChunkpython=self.webpackChunkpython||[]).push([[644],{6951:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"python-guide/OOP/Name_Mangling","title":"Name Mangling","description":"Name mangling is a mechanism in Python to ensure that the names of class attributes are unique and not easily accessible outside their defining class. This feature is particularly useful for encapsulating data and preventing name clashes in inheritance hierarchies.","source":"@site/docs/python-guide/07_OOP/16_Name_Mangling.md","sourceDirName":"python-guide/07_OOP","slug":"/python-guide/OOP/Name_Mangling","permalink":"/Python/docs/python-guide/OOP/Name_Mangling","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-guide/07_OOP/16_Name_Mangling.md","tags":[],"version":"current","sidebarPosition":16,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Abstract Methods and Classes","permalink":"/Python/docs/python-guide/OOP/@abstractmethod"},"next":{"title":"Built in Functions","permalink":"/Python/docs/category/built-in-functions"}}');var t=a(4848),i=a(8453);const r={},l="Name Mangling",c={},o=[{value:"Reasons for Name Mangling",id:"reasons-for-name-mangling",level:2},{value:"Creating a Class with Name Mangling",id:"creating-a-class-with-name-mangling",level:2},{value:"Step-by-Step Example",id:"step-by-step-example",level:2},{value:"Inheritance and Name Clashes",id:"inheritance-and-name-clashes",level:2},{value:"Handling Mangled Names in Subclasses",id:"handling-mangled-names-in-subclasses",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Code Summary",id:"code-summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"name-mangling",children:"Name Mangling"})}),"\n",(0,t.jsx)(n.p,{children:"Name mangling is a mechanism in Python to ensure that the names of class attributes are unique and not easily accessible outside their defining class. This feature is particularly useful for encapsulating data and preventing name clashes in inheritance hierarchies."}),"\n",(0,t.jsx)(n.h2,{id:"reasons-for-name-mangling",children:"Reasons for Name Mangling"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Encapsulation"}),": Name mangling makes it harder to access objects that should not be accessed outside of the class, enhancing data encapsulation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Preventing Name Clashes"}),": Inheritance can lead to name clashes. Name mangling prevents such conflicts by altering the attribute names in a unique way."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-class-with-name-mangling",children:"Creating a Class with Name Mangling"}),"\n",(0,t.jsx)(n.p,{children:"Consider the following example to illustrate name mangling in a class."}),"\n",(0,t.jsx)(n.h2,{id:"step-by-step-example",children:"Step-by-Step Example"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Define the Class and Attributes"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Car:\n    __year = 2000  # Class-level attribute with name mangling\n\n    def __init__(self, brand: str, fuel_type: str) -> None:\n        self.__brand = brand  # Instance attribute with name mangling\n        self.__fuel_type = fuel_type  # Instance attribute with name mangling\n        self.var = "red"  # Regular instance attribute\n\n    def drive(self) -> None:\n        print(f"Driving {self.__brand}")\n\n    def __get_description(self) -> None:  # Method with name mangling\n        print(f"{self.__brand} has {self.__fuel_type}")\n\n    def display_color(self) -> None:\n        print(f"{self.__brand} is {self.var.capitalize()}")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"Car"})," class:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"__year"}),", ",(0,t.jsx)(n.code,{children:"__brand"}),", and ",(0,t.jsx)(n.code,{children:"__fuel_type"})," are defined with double leading underscores."]}),"\n",(0,t.jsx)(n.li,{children:"These attributes will undergo name mangling."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Creating an Instance and Accessing Mangled Attributes"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'if __name__ == "__main__":\n    car = Car("Toyota", "Electric")\n    car.drive()  # This works fine\n    # Accessing the mangled attributes directly is not straightforward\n    # print(car.__brand)  # This will raise an AttributeError\n\n    # Accessing mangled names using their mangled forms\n    print(car._Car__brand)  # This works\n    car._Car__get_description()  # This works\n'})}),"\n",(0,t.jsx)(n.h2,{id:"inheritance-and-name-clashes",children:"Inheritance and Name Clashes"}),"\n",(0,t.jsx)(n.p,{children:"Name mangling can prevent name clashes in inheritance scenarios."}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Inheritance with Name Mangling"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Toyota(Car):\n    def __init__(self, fuel_type: str) -> None:\n        super().__init__("Toyota", fuel_type)\n        self.var = 100  # This can cause a name clash\n\n    def get_year(self) -> int:\n        return self._Car__year  # Accessing mangled class attribute\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Creating an instance of the ",(0,t.jsx)(n.code,{children:"Toyota"})," class and demonstrating the name clash resolution:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'if __name__ == "__main__":\n    toyota = Toyota("Electric")\n    toyota.display_color()  # This will now refer to the correct \'var\' attribute\n    print(toyota.get_year())  # Accessing the mangled class attribute\n'})}),"\n",(0,t.jsx)(n.h2,{id:"handling-mangled-names-in-subclasses",children:"Handling Mangled Names in Subclasses"}),"\n",(0,t.jsx)(n.p,{children:"When dealing with subclasses, name mangling requires careful handling to avoid attribute errors."}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Handling Mangled Names in Subclasses"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Honda(Car):\n    def get_year(self) -> int:\n        # Trying to access a mangled class attribute from the parent class\n        try:\n            return self.__year  # This will raise an AttributeError\n        except AttributeError:\n            return self._Car__year  # Correct way to access the mangled attribute\n\nif __name__ == "__main__":\n    honda = Honda("Petrol")\n    print(honda.get_year())  # Correctly accessing the mangled attribute\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"Name mangling is a useful feature in Python for ensuring data encapsulation and preventing name clashes. By altering the names of class attributes and methods in a unique way, it makes them harder to access from outside the class, while still being accessible within the class using their mangled names."}),"\n",(0,t.jsx)(n.h2,{id:"code-summary",children:"Code Summary"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Car:\n    __year = 2000\n\n    def __init__(self, brand: str, fuel_type: str) -> None:\n        self.__brand = brand\n        self.__fuel_type = fuel_type\n        self.var = "red"\n\n    def drive(self) -> None:\n        print(f"Driving {self.__brand}")\n\n    def __get_description(self) -> None:\n        print(f"{self.__brand} has {self.__fuel_type}")\n\n    def display_color(self) -> None:\n        print(f"{self.__brand} is {self.var.capitalize()}")\n\nclass Toyota(Car):\n    def __init__(self, fuel_type: str) -> None:\n        super().__init__("Toyota", fuel_type)\n        self.var = 100\n\n    def get_year(self) -> int:\n        return self._Car__year\n\nclass Honda(Car):\n    def get_year(self) -> int:\n        try:\n            return self.__year\n        except AttributeError:\n            return self._Car__year\n\nif __name__ == "__main__":\n    car = Car("Toyota", "Electric")\n    car.drive()\n    print(car._Car__brand)\n    car._Car__get_description()\n\n    toyota = Toyota("Electric")\n    toyota.display_color()\n    print(toyota.get_year())\n\n    honda = Honda("Petrol")\n    print(honda.get_year())\n'})}),"\n",(0,t.jsx)(n.p,{children:"This tutorial highlights the importance of name mangling in Python and provides practical examples of its application and benefits."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>l});var s=a(6540);const t={},i=s.createContext(t);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);