"use strict";(self.webpackChunkpython=self.webpackChunkpython||[]).push([[8496],{4335:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"gui-development/pyside/beginner/widgets-interactions","title":"Basic Widgets and Interaction","description":"In this part, you\'ll learn how to use some of the core widgets in PySide6\u2014namely, QLabel, QPushButton, and QLineEdit\u2014and how to connect signals (like a button click) to slots (functions) to respond to user actions.","source":"@site/docs/gui-development/04_pyside/01_beginner/03_widgets-interactions.md","sourceDirName":"gui-development/04_pyside/01_beginner","slug":"/gui-development/pyside/beginner/widgets-interactions","permalink":"/Python/docs/gui-development/pyside/beginner/widgets-interactions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gui-development/04_pyside/01_beginner/03_widgets-interactions.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"guiSidebar","previous":{"title":"Creating Your First Application","permalink":"/Python/docs/gui-development/pyside/beginner/first-app"},"next":{"title":"Working with Layouts","permalink":"/Python/docs/gui-development/pyside/beginner/layouts"}}');var s=t(4848),o=t(8453);const l={},r="Basic Widgets and Interaction",a={},d=[{value:"Step 1: Introduction to the Widgets",id:"step-1-introduction-to-the-widgets",level:2},{value:"Step 2: Connecting Signals to Slots",id:"step-2-connecting-signals-to-slots",level:2},{value:"Step 3: Example Code",id:"step-3-example-code",level:2},{value:"How It Works",id:"how-it-works",level:2}];function c(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"basic-widgets-and-interaction",children:"Basic Widgets and Interaction"})}),"\n",(0,s.jsx)(n.p,{children:"In this part, you'll learn how to use some of the core widgets in PySide6\u2014namely, QLabel, QPushButton, and QLineEdit\u2014and how to connect signals (like a button click) to slots (functions) to respond to user actions."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-1-introduction-to-the-widgets",children:"Step 1: Introduction to the Widgets"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"QLabel:"}),(0,s.jsx)(n.br,{}),"\n","Displays text or images. In our example, it will show a message to the user."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"QLineEdit:"}),(0,s.jsx)(n.br,{}),"\n","Provides a single-line text input where users can type information. We\u2019ll use this to allow the user to enter their name."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"QPushButton:"}),(0,s.jsx)(n.br,{}),"\n","A clickable button that triggers actions. We'll connect its click event to a function that reads the input from QLineEdit and updates the QLabel."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-2-connecting-signals-to-slots",children:"Step 2: Connecting Signals to Slots"}),"\n",(0,s.jsx)(n.p,{children:"In PySide6, widgets emit signals when specific events occur (e.g., when a button is clicked). Slots are functions that are called in response to these signals. In our example, clicking the button will trigger a slot function that updates the label with the text entered in the line edit."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-3-example-code",children:"Step 3: Example Code"}),"\n",(0,s.jsxs)(n.p,{children:["Create a Python file (e.g., ",(0,s.jsx)(n.code,{children:"basic_widgets.py"}),") and add the following code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import sys\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QWidget, QLabel, QPushButton, QLineEdit, QVBoxLayout\nfrom PySide6.QtCore import Qt\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle("Basic Widgets and Interaction")\n\n        # Create a QLabel to display messages\n        self.label = QLabel("Enter your name and press the button")\n        self.label.setAlignment(Qt.AlignCenter)\n\n        # Create a QLineEdit for text input\n        self.line_edit = QLineEdit()\n        self.line_edit.setPlaceholderText("Enter your name")\n\n        # Create a QPushButton that the user will click\n        self.button = QPushButton("Submit")\n        # Connect the button\'s clicked signal to a custom slot function\n        self.button.clicked.connect(self.on_button_clicked)\n\n        # Set up a vertical layout and add the widgets\n        layout = QVBoxLayout()\n        layout.addWidget(self.label)\n        layout.addWidget(self.line_edit)\n        layout.addWidget(self.button)\n\n        # Create a container widget, set the layout, and assign it as the central widget\n        container = QWidget()\n        container.setLayout(layout)\n        self.setCentralWidget(container)\n\n    def on_button_clicked(self):\n        # Retrieve text from the line edit\n        name = self.line_edit.text()\n        if name:\n            # Update the label with a greeting message\n            self.label.setText(f"Hello, {name}!")\n        else:\n            # Prompt the user to enter their name if the field is empty\n            self.label.setText("Please enter your name.")\n\n# Create the application instance and run the event loop\napp = QApplication(sys.argv)\nwindow = MainWindow()\nwindow.show()\nsys.exit(app.exec())\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Creating the Widgets:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.strong,{children:"QLabel"})," displays the initial message."]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.strong,{children:"QLineEdit"})," allows the user to input their name."]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.strong,{children:"QPushButton"})," is used to submit the input."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Layout Management:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.strong,{children:"QVBoxLayout"})," organizes the widgets vertically."]}),"\n",(0,s.jsx)(n.li,{children:"The layout is set on a container QWidget, which becomes the central widget of the main window."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Signals and Slots:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The button\u2019s ",(0,s.jsx)(n.code,{children:"clicked"})," signal is connected to the ",(0,s.jsx)(n.code,{children:"on_button_clicked"})," method."]}),"\n",(0,s.jsxs)(n.li,{children:["When the button is clicked, ",(0,s.jsx)(n.code,{children:"on_button_clicked"})," retrieves the text from the QLineEdit and updates the QLabel accordingly."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Event Loop:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The application starts its event loop with ",(0,s.jsx)(n.code,{children:"app.exec()"}),", waiting for user interactions."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var i=t(6540);const s={},o=i.createContext(s);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);