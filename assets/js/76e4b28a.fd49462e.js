"use strict";(self.webpackChunkpython=self.webpackChunkpython||[]).push([[2570],{5779:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"python-guide/Dataclasses/post_init","title":"Post Initializers","description":"We\'ll create a simple example of a Fruit class with attributes such as name, grams, price per kilo, and total price. The post initializer will be used to calculate the total price based on the grams and price per kilo after the original initializer is called.","source":"@site/docs/python-guide/09_Dataclasses/03_post_init.md","sourceDirName":"python-guide/09_Dataclasses","slug":"/python-guide/Dataclasses/post_init","permalink":"/Python/docs/python-guide/Dataclasses/post_init","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-guide/09_Dataclasses/03_post_init.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Data Class with Mutable Defaults","permalink":"/Python/docs/python-guide/Dataclasses/Fields"},"next":{"title":"Post Initializer with Init Var","permalink":"/Python/docs/python-guide/Dataclasses/InitVar"}}');var a=i(4848),n=i(8453);const r={},l="Post Initializers",o={},c=[{value:"Step 1: Import Data Classes",id:"step-1-import-data-classes",level:2},{value:"Step 2: Create the Fruit Data Class",id:"step-2-create-the-fruit-data-class",level:2},{value:"Step 3: Test the Post Initializer",id:"step-3-test-the-post-initializer",level:2},{value:"Step 4: Run the Code",id:"step-4-run-the-code",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"post-initializers",children:"Post Initializers"})}),"\n",(0,a.jsxs)(t.p,{children:["We'll create a simple example of a ",(0,a.jsx)(t.code,{children:"Fruit"})," class with attributes such as name, grams, price per kilo, and total price. The post initializer will be used to calculate the total price based on the grams and price per kilo after the original initializer is called."]}),"\n",(0,a.jsx)(t.h2,{id:"step-1-import-data-classes",children:"Step 1: Import Data Classes"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"from dataclasses import dataclass, field, post_init\n"})}),"\n",(0,a.jsx)(t.p,{children:"Import the necessary modules for data classes, fields, and post initialization."}),"\n",(0,a.jsx)(t.h2,{id:"step-2-create-the-fruit-data-class",children:"Step 2: Create the Fruit Data Class"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'@dataclass\nclass Fruit:\n    name: str\n    grams: float\n    price_per_kilo: float\n    total_price: float = field(init=False)\n\n    @post_init\n    def calculate_total_price(self) -> None:\n        self.total_price = self.grams / 1000 * self.price_per_kilo\n\n    def describe(self) -> None:\n        print(f"{self.grams}g of {self.name} costs ${self.total_price:.2f}")\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Define the ",(0,a.jsx)(t.code,{children:"Fruit"})," class with attributes and the post initializer to calculate the total price. Also, include a ",(0,a.jsx)(t.code,{children:"describe"})," method to print a quick description of the fruit."]}),"\n",(0,a.jsx)(t.h2,{id:"step-3-test-the-post-initializer",children:"Step 3: Test the Post Initializer"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'if __name__ == "__main__":\n    apple = Fruit(name="Apple", grams=1500, price_per_kilo=5)\n    orange = Fruit(name="Orange", grams=2500, price_per_kilo=7)\n\n    print("Fruit Objects:")\n    print(apple)\n    print(orange)\n\n    print("\\nFruit Descriptions:")\n    apple.describe()\n    orange.describe()\n'})}),"\n",(0,a.jsxs)(t.p,{children:["In the main block, create instances of ",(0,a.jsx)(t.code,{children:"Fruit"})," (apple and orange) and print both the objects and their descriptions using the ",(0,a.jsx)(t.code,{children:"describe"})," method."]}),"\n",(0,a.jsx)(t.h2,{id:"step-4-run-the-code",children:"Step 4: Run the Code"}),"\n",(0,a.jsx)(t.p,{children:"Execute the script to observe the output, which should include the fruit objects and their respective descriptions with the total price calculated using the post initializer."}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Note:"})," The tutorial also mentions a limitation of using post initializers for the total price and suggests an alternative approach using computed properties, which will be covered in a future lecture."]})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>l});var s=i(6540);const a={},n=s.createContext(a);function r(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);