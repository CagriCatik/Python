"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[9369],{3246:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"data-analysis/Combining_Datasets/merge()","title":"merge()","description":"The merge() function in Pandas provides powerful capabilities for combining datasets using database-style join methods. This function is ideal when working with relational data, allowing you to specify how datasets should align based on key columns or indices.","source":"@site/docs/data-analysis/05_Combining_Datasets/03_merge().md","sourceDirName":"data-analysis/05_Combining_Datasets","slug":"/data-analysis/Combining_Datasets/merge()","permalink":"/Python/docs/data-analysis/Combining_Datasets/merge()","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-analysis/05_Combining_Datasets/03_merge().md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"dataAnalysisSidebar","previous":{"title":"concat()","permalink":"/Python/docs/data-analysis/Combining_Datasets/concat()"},"next":{"title":"Outer Join","permalink":"/Python/docs/data-analysis/Combining_Datasets/outer_join"}}');var r=s(4848),l=s(8453);const a={},d="merge()",t={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters:",id:"parameters",level:3},{value:"Examples",id:"examples",level:2},{value:"1. Dataset Overview",id:"1-dataset-overview",level:3},{value:"employees_2021.csv",id:"employees_2021csv",level:4},{value:"employees_2022.csv",id:"employees_2022csv",level:4},{value:"2. Inner Join",id:"2-inner-join",level:3},{value:"3. Left Join",id:"3-left-join",level:3},{value:"4. Right Join",id:"4-right-join",level:3},{value:"5. Outer Join",id:"5-outer-join",level:3},{value:"Join Scenarios",id:"join-scenarios",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"merge",children:(0,r.jsx)(n.code,{children:"merge()"})})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"merge()"})," function in Pandas provides powerful capabilities for combining datasets using database-style join methods. This function is ideal when working with relational data, allowing you to specify how datasets should align based on key columns or indices."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"merge()"})," function enables advanced dataset combinations, particularly useful for aligning datasets based on specific keys. Similar to SQL joins, ",(0,r.jsx)(n.code,{children:"merge()"})," supports various join types, including:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Inner Join"}),"\n",(0,r.jsx)(n.li,{children:"Left Join"}),"\n",(0,r.jsx)(n.li,{children:"Right Join"}),"\n",(0,r.jsx)(n.li,{children:"Outer Join"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This chapter will explore these methods using practical examples."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"pandas.merge(left, right, how='inner', on=None, left_on=None, right_on=None, ...)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"left"})}),": DataFrame to merge."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"right"})}),": DataFrame to merge with."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"how"})}),": Type of join:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"inner"'})," (default): Intersection of keys."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"outer"'}),": Union of keys."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"left"'}),": Keys from ",(0,r.jsx)(n.code,{children:"left"})," DataFrame."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"right"'}),": Keys from ",(0,r.jsx)(n.code,{children:"right"})," DataFrame."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"on"})}),": Column or index level names to join on."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"left_on"})})," / ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"right_on"})}),": Separate join keys for ",(0,r.jsx)(n.code,{children:"left"})," and ",(0,r.jsx)(n.code,{children:"right"})," DataFrames."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"1-dataset-overview",children:"1. Dataset Overview"}),"\n",(0,r.jsx)(n.p,{children:"Suppose we have two CSV files:"}),"\n",(0,r.jsx)(n.h4,{id:"employees_2021csv",children:"employees_2021.csv"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Employee_ID"}),(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Age"}),(0,r.jsx)(n.th,{children:"Job"}),(0,r.jsx)(n.th,{children:"Gender"}),(0,r.jsx)(n.th,{children:"Salary"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"John"}),(0,r.jsx)(n.td,{children:"30"}),(0,r.jsx)(n.td,{children:"Engineer"}),(0,r.jsx)(n.td,{children:"Male"}),(0,r.jsx)(n.td,{children:"70000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"2"}),(0,r.jsx)(n.td,{children:"Ava"}),(0,r.jsx)(n.td,{children:"28"}),(0,r.jsx)(n.td,{children:"Designer"}),(0,r.jsx)(n.td,{children:"Female"}),(0,r.jsx)(n.td,{children:"65000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"Liam"}),(0,r.jsx)(n.td,{children:"35"}),(0,r.jsx)(n.td,{children:"Manager"}),(0,r.jsx)(n.td,{children:"Male"}),(0,r.jsx)(n.td,{children:"80000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"..."}),(0,r.jsx)(n.td,{children:"..."}),(0,r.jsx)(n.td,{children:"..."}),(0,r.jsx)(n.td,{children:"..."}),(0,r.jsx)(n.td,{children:"..."}),(0,r.jsx)(n.td,{children:"..."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"employees_2022csv",children:"employees_2022.csv"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Employee_ID"}),(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Age"}),(0,r.jsx)(n.th,{children:"Job"}),(0,r.jsx)(n.th,{children:"Gender"}),(0,r.jsx)(n.th,{children:"Salary"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"John"}),(0,r.jsx)(n.td,{children:"31"}),(0,r.jsx)(n.td,{children:"Engineer"}),(0,r.jsx)(n.td,{children:"Male"}),(0,r.jsx)(n.td,{children:"75000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"4"}),(0,r.jsx)(n.td,{children:"Maria"}),(0,r.jsx)(n.td,{children:"27"}),(0,r.jsx)(n.td,{children:"Designer"}),(0,r.jsx)(n.td,{children:"Female"}),(0,r.jsx)(n.td,{children:"67000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"11"}),(0,r.jsx)(n.td,{children:"Philip"}),(0,r.jsx)(n.td,{children:"40"}),(0,r.jsx)(n.td,{children:"Consultant"}),(0,r.jsx)(n.td,{children:"Male"}),(0,r.jsx)(n.td,{children:"90000"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"2-inner-join",children:"2. Inner Join"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"inner"})," join selects rows where keys match in both DataFrames."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pandas as pd\n\n# Load datasets\ndf1 = pd.read_csv("employees_2021.csv")\ndf2 = pd.read_csv("employees_2022.csv")\n\n# Perform inner join\nresult = pd.merge(df1, df2, how="inner", on="Employee_ID")\nprint(result)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"   Employee_ID   Name_x  Age_x         Job_x Gender_x  Salary_x  Name_y  Age_y         Job_y Gender_y  Salary_y\n0            1     John     30      Engineer     Male     70000     John     31      Engineer     Male     75000\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"3-left-join",children:"3. Left Join"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"left"})," join keeps all rows from the left DataFrame, adding matching rows from the right."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = pd.merge(df1, df2, how="left", on="Employee_ID")\nprint(result)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"   Employee_ID   Name_x  Age_x         Job_x Gender_x  Salary_x   Name_y  Age_y         Job_y Gender_y  Salary_y\n0            1     John     30      Engineer     Male     70000     John   31.0      Engineer     Male   75000.0\n1            2      Ava     28      Designer   Female     65000      NaN    NaN           NaN      NaN       NaN\n2            3     Liam     35       Manager     Male     80000      NaN    NaN           NaN      NaN       NaN\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"4-right-join",children:"4. Right Join"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"right"})," join keeps all rows from the right DataFrame, adding matching rows from the left."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = pd.merge(df1, df2, how="right", on="Employee_ID")\nprint(result)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"   Employee_ID   Name_x  Age_x         Job_x Gender_x  Salary_x   Name_y  Age_y         Job_y Gender_y  Salary_y\n0            1     John   30.0      Engineer     Male   70000.0     John     31      Engineer     Male     75000\n1            4      NaN    NaN           NaN      NaN       NaN    Maria     27      Designer   Female     67000\n2           11      NaN    NaN           NaN      NaN       NaN   Philip     40    Consultant     Male     90000\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"5-outer-join",children:"5. Outer Join"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"outer"})," join includes all rows from both DataFrames, filling missing values with NaN where necessary."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = pd.merge(df1, df2, how="outer", on="Employee_ID")\nprint(result)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"   Employee_ID   Name_x  Age_x         Job_x Gender_x  Salary_x   Name_y  Age_y         Job_y Gender_y  Salary_y\n0            1     John   30.0      Engineer     Male   70000.0     John   31.0      Engineer     Male   75000.0\n1            2      Ava   28.0      Designer   Female   65000.0      NaN    NaN           NaN      NaN       NaN\n2            3     Liam   35.0       Manager     Male   80000.0      NaN    NaN           NaN      NaN       NaN\n3            4      NaN    NaN           NaN      NaN       NaN    Maria   27.0      Designer   Female   67000.0\n4           11      NaN    NaN           NaN      NaN       NaN   Philip   40.0    Consultant     Male   90000.0\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"join-scenarios",children:"Join Scenarios"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Matching keys in both DataFrames:"})," Use ",(0,r.jsx)(n.code,{children:"inner"})," join for strict alignment."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Keys in left but not right:"})," Use ",(0,r.jsx)(n.code,{children:"left"})," join."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Keys in right but not left:"})," Use ",(0,r.jsx)(n.code,{children:"right"})," join."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"All keys in both DataFrames:"})," Use ",(0,r.jsx)(n.code,{children:"outer"})," join for comprehensive results."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"merge()"})," function in Pandas is a robust solution for combining datasets based on database-style joins. By understanding the nuances of each join type, you can handle relational data effectively in your data analysis tasks."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var i=s(6540);const r={},l=i.createContext(r);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);