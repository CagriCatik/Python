"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[6578],{7996:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"guideSidebar":[{"type":"link","label":"Getting Started","href":"/Python/docs/guide/getting-started","docId":"guide/getting-started","unlisted":false},{"type":"category","label":"Python Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Syntax","href":"/Python/docs/guide/Python_Basics/Syntax","docId":"guide/Python_Basics/Syntax","unlisted":false},{"type":"link","label":"Clean Code and Commenting Practices","href":"/Python/docs/guide/Python_Basics/Comments","docId":"guide/Python_Basics/Comments","unlisted":false},{"type":"link","label":"Variables","href":"/Python/docs/guide/Python_Basics/Variables","docId":"guide/Python_Basics/Variables","unlisted":false},{"type":"link","label":"Constants","href":"/Python/docs/guide/Python_Basics/Constants","docId":"guide/Python_Basics/Constants","unlisted":false},{"type":"link","label":"Data Types","href":"/Python/docs/guide/Python_Basics/Data_Types","docId":"guide/Python_Basics/Data_Types","unlisted":false},{"type":"link","label":"Dynamic Typing and Type Hints","href":"/Python/docs/guide/Python_Basics/Type_Hints","docId":"guide/Python_Basics/Type_Hints","unlisted":false},{"type":"link","label":"Shortcut","href":"/Python/docs/guide/Python_Basics/Shortcut_Format","docId":"guide/Python_Basics/Shortcut_Format","unlisted":false},{"type":"link","label":"Integer Data Type","href":"/Python/docs/guide/Python_Basics/Integers","docId":"guide/Python_Basics/Integers","unlisted":false},{"type":"link","label":"Floats","href":"/Python/docs/guide/Python_Basics/Floats","docId":"guide/Python_Basics/Floats","unlisted":false},{"type":"link","label":"Numeric Operations","href":"/Python/docs/guide/Python_Basics/Operators","docId":"guide/Python_Basics/Operators","unlisted":false},{"type":"link","label":"Strings","href":"/Python/docs/guide/Python_Basics/Strings","docId":"guide/Python_Basics/Strings","unlisted":false},{"type":"link","label":"Type Conversion","href":"/Python/docs/guide/Python_Basics/Type_Conversion","docId":"guide/Python_Basics/Type_Conversion","unlisted":false},{"type":"link","label":"Simple Adder Program","href":"/Python/docs/guide/Python_Basics/Simple_Adder_Project","docId":"guide/Python_Basics/Simple_Adder_Project","unlisted":false},{"type":"link","label":"Boolean Data Type","href":"/Python/docs/guide/Python_Basics/Booleans","docId":"guide/Python_Basics/Booleans","unlisted":false},{"type":"link","label":"Lists","href":"/Python/docs/guide/Python_Basics/Lists","docId":"guide/Python_Basics/Lists","unlisted":false},{"type":"link","label":"Tuple","href":"/Python/docs/guide/Python_Basics/Tuples","docId":"guide/Python_Basics/Tuples","unlisted":false},{"type":"link","label":"Sets","href":"/Python/docs/guide/Python_Basics/Sets","docId":"guide/Python_Basics/Sets","unlisted":false},{"type":"link","label":"Frozen Sets","href":"/Python/docs/guide/Python_Basics/Frozensets","docId":"guide/Python_Basics/Frozensets","unlisted":false},{"type":"link","label":"Dictionary","href":"/Python/docs/guide/Python_Basics/Dictionaries","docId":"guide/Python_Basics/Dictionaries","unlisted":false},{"type":"link","label":"None Type in Python","href":"/Python/docs/guide/Python_Basics/None","docId":"guide/Python_Basics/None","unlisted":false},{"type":"link","label":"Mad Libs Game","href":"/Python/docs/guide/Python_Basics/Mad_Libs_Project","docId":"guide/Python_Basics/Mad_Libs_Project","unlisted":false},{"type":"link","label":"Truthy and Falsy Values in Python","href":"/Python/docs/guide/Python_Basics/Truthy_and_Falsy","docId":"guide/Python_Basics/Truthy_and_Falsy","unlisted":false},{"type":"link","label":"Floating Point Precision in Python","href":"/Python/docs/guide/Python_Basics/Comparing_Floats","docId":"guide/Python_Basics/Comparing_Floats","unlisted":false},{"type":"link","label":"Understanding Python Scopes","href":"/Python/docs/guide/Python_Basics/Scopes","docId":"guide/Python_Basics/Scopes","unlisted":false},{"type":"link","label":"Global","href":"/Python/docs/guide/Python_Basics/Global","docId":"guide/Python_Basics/Global","unlisted":false},{"type":"link","label":"Nonlocal","href":"/Python/docs/guide/Python_Basics/Nonlocal","docId":"guide/Python_Basics/Nonlocal","unlisted":false},{"type":"link","label":"Doc Strings","href":"/Python/docs/guide/Python_Basics/Doc_Strings","docId":"guide/Python_Basics/Doc_Strings","unlisted":false},{"type":"link","label":"F-Strings","href":"/Python/docs/guide/Python_Basics/F-Strings","docId":"guide/Python_Basics/F-Strings","unlisted":false},{"type":"link","label":"Assertions","href":"/Python/docs/guide/Python_Basics/Assertions","docId":"guide/Python_Basics/Assertions","unlisted":false},{"type":"link","label":"Unpacking in Python","href":"/Python/docs/guide/Python_Basics/Unpacking","docId":"guide/Python_Basics/Unpacking","unlisted":false},{"type":"link","label":"Understanding Equality vs. Identity in Python","href":"/Python/docs/guide/Python_Basics/VS_Is","docId":"guide/Python_Basics/VS_Is","unlisted":false}],"href":"/Python/docs/category/python-basics"},{"type":"category","label":"Control Flow","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Control Flow and Conditional Statements in Python","href":"/Python/docs/guide/Control_Flow/If_Elif_Else","docId":"guide/Control_Flow/If_Elif_Else","unlisted":false},{"type":"link","label":"Shorthand If-Else Statements","href":"/Python/docs/guide/Control_Flow/If_Else_Shorthand","docId":"guide/Control_Flow/If_Else_Shorthand","unlisted":false},{"type":"link","label":"Looping","href":"/Python/docs/guide/Control_Flow/For_Loop","docId":"guide/Control_Flow/For_Loop","unlisted":false},{"type":"link","label":"Understanding Looping Constructs in Python","href":"/Python/docs/guide/Control_Flow/While_Loop","docId":"guide/Control_Flow/While_Loop","unlisted":false},{"type":"link","label":"break and continue","href":"/Python/docs/guide/Control_Flow/Break_and_Continue","docId":"guide/Control_Flow/Break_and_Continue","unlisted":false},{"type":"link","label":"else Block in for and while Loops","href":"/Python/docs/guide/Control_Flow/Loop-Else","docId":"guide/Control_Flow/Loop-Else","unlisted":false},{"type":"link","label":"Building a Rock, Paper, Scissors Game in Python","href":"/Python/docs/guide/Control_Flow/Rock_Paper_Scissors","docId":"guide/Control_Flow/Rock_Paper_Scissors","unlisted":false}],"href":"/Python/docs/category/control-flow"},{"type":"category","label":"Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Python Functions Tutorial","href":"/Python/docs/guide/Functions/Creating_a_Function/","docId":"guide/Functions/Creating_a_Function/README","unlisted":false},{"type":"link","label":"Pass","href":"/Python/docs/guide/Functions/Pass/","docId":"guide/Functions/Pass/README","unlisted":false},{"type":"link","label":"Python Function Parameters and Defaults Tutorial","href":"/Python/docs/guide/Functions/Parameters_and_Arguments/","docId":"guide/Functions/Parameters_and_Arguments/README","unlisted":false},{"type":"link","label":"Python Functions and Return Values Tutorial","href":"/Python/docs/guide/Functions/Return_Functions/","docId":"guide/Functions/Return_Functions/README","unlisted":false},{"type":"link","label":"Recursion","href":"/Python/docs/guide/Functions/Recursion/","docId":"guide/Functions/Recursion/README","unlisted":false},{"type":"link","label":"Args_and_Kwargs","href":"/Python/docs/guide/Functions/Args_and_Kwargs/","docId":"guide/Functions/Args_and_Kwargs/README","unlisted":false},{"type":"link","label":"Star_and_Slash","href":"/Python/docs/guide/Functions/Star_and_Slash/","docId":"guide/Functions/Star_and_Slash/README","unlisted":false},{"type":"link","label":"Chat_Bot","href":"/Python/docs/guide/Functions/Chat_Bot/","docId":"guide/Functions/Chat_Bot/README","unlisted":false}],"href":"/Python/docs/category/functions"},{"type":"category","label":"Errors","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"User Input","href":"/Python/docs/guide/Errors/User_Input/","docId":"guide/Errors/User_Input/README","unlisted":false},{"type":"link","label":"Handling Exceptions","href":"/Python/docs/guide/Errors/Try_Except/","docId":"guide/Errors/Try_Except/README","unlisted":false},{"type":"link","label":"Exception Handling in Python: Using else and finally Blocks","href":"/Python/docs/guide/Errors/Else_Finally/","docId":"guide/Errors/Else_Finally/README","unlisted":false},{"type":"link","label":"Manually Raising Exceptions in Python","href":"/Python/docs/guide/Errors/Raise/","docId":"guide/Errors/Raise/README","unlisted":false},{"type":"link","label":"Unknown_Errors","href":"/Python/docs/guide/Errors/Unknown_Errors/","docId":"guide/Errors/Unknown_Errors/README","unlisted":false},{"type":"link","label":"Letters_Only","href":"/Python/docs/guide/Errors/Letters_Only/","docId":"guide/Errors/Letters_Only/README","unlisted":false}],"href":"/Python/docs/category/errors"},{"type":"category","label":"Modules","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Python Modules","href":"/Python/docs/guide/Modules/Modules/","docId":"guide/Modules/Modules/README","unlisted":false},{"type":"link","label":"Avoiding Star Imports in Python","href":"/Python/docs/guide/Modules/Importing/","docId":"guide/Modules/Importing/README","unlisted":false},{"type":"link","label":"README","href":"/Python/docs/guide/Modules/if_name_main/","docId":"guide/Modules/if_name_main/README","unlisted":false},{"type":"category","label":"Packages","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Creating and Using Python Packages","href":"/Python/docs/guide/Modules/Packages/code/","docId":"guide/Modules/Packages/code/README","unlisted":false}]},{"type":"link","label":"Python Library vs Package","href":"/Python/docs/guide/Modules/Libraries/","docId":"guide/Modules/Libraries/README","unlisted":false},{"type":"link","label":"Website Status Project","href":"/Python/docs/guide/Modules/Website_Status/","docId":"guide/Modules/Website_Status/README","unlisted":false}],"href":"/Python/docs/category/modules"},{"type":"category","label":"Lists","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"getting-started","href":"/Python/docs/guide/Lists/getting-started","docId":"guide/Lists/getting-started","unlisted":false},{"type":"link","label":"List Comprehensions Explained","href":"/Python/docs/guide/Lists/List_Comprehensions","docId":"guide/Lists/List_Comprehensions","unlisted":false},{"type":"link","label":"Slicing in Python","href":"/Python/docs/guide/Lists/Slicing","docId":"guide/Lists/Slicing","unlisted":false},{"type":"link","label":"Looping and Modifying Lists: A Cautionary Tale","href":"/Python/docs/guide/Lists/Dont_Loop_Modify","docId":"guide/Lists/Dont_Loop_Modify","unlisted":false},{"type":"link","label":"Grocery List App","href":"/Python/docs/guide/Lists/Grocery_List","docId":"guide/Lists/Grocery_List","unlisted":false}],"href":"/Python/docs/category/lists"},{"type":"category","label":"OOP","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Object Oriented Programming","href":"/Python/docs/guide/OOP/OOP","docId":"guide/OOP/OOP","unlisted":false},{"type":"link","label":"Classes and Objects","href":"/Python/docs/guide/OOP/Classes_and_Objects","docId":"guide/OOP/Classes_and_Objects","unlisted":false},{"type":"link","label":"__init__ Method","href":"/Python/docs/guide/OOP/init","docId":"guide/OOP/init","unlisted":false},{"type":"link","label":"self Parameter","href":"/Python/docs/guide/OOP/self","docId":"guide/OOP/self","unlisted":false},{"type":"link","label":"Class and Instance Attributes","href":"/Python/docs/guide/OOP/Attributes_Class_and_Instance","docId":"guide/OOP/Attributes_Class_and_Instance","unlisted":false},{"type":"link","label":"Dunder Methods","href":"/Python/docs/guide/OOP/Dunder_Methods","docId":"guide/OOP/Dunder_Methods","unlisted":false},{"type":"link","label":"str() and repr()","href":"/Python/docs/guide/OOP/str()_repr()","docId":"guide/OOP/str()_repr()","unlisted":false},{"type":"link","label":"__eq__ Method","href":"/Python/docs/guide/OOP/eq__()","docId":"guide/OOP/eq__()","unlisted":false},{"type":"link","label":"Functions and Methods","href":"/Python/docs/guide/OOP/Methods_Functions","docId":"guide/OOP/Methods_Functions","unlisted":false},{"type":"link","label":"Inheritance","href":"/Python/docs/guide/OOP/Inheritance","docId":"guide/OOP/Inheritance","unlisted":false},{"type":"link","label":"super()","href":"/Python/docs/guide/OOP/super()","docId":"guide/OOP/super()","unlisted":false},{"type":"link","label":"@staticmethod","href":"/Python/docs/guide/OOP/@staticmethod","docId":"guide/OOP/@staticmethod","unlisted":false},{"type":"link","label":"Classes and Instances","href":"/Python/docs/guide/OOP/@classmethod","docId":"guide/OOP/@classmethod","unlisted":false},{"type":"link","label":"Abstract Methods and Classes","href":"/Python/docs/guide/OOP/@abstractmethod","docId":"guide/OOP/@abstractmethod","unlisted":false},{"type":"link","label":"Name Mangling","href":"/Python/docs/guide/OOP/Name_Mangling","docId":"guide/OOP/Name_Mangling","unlisted":false}],"href":"/Python/docs/category/oop"},{"type":"category","label":"Built in Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Python Print Statement","href":"/Python/docs/guide/Built_in_Functions/print()/","docId":"guide/Built_in_Functions/print()/README","unlisted":false},{"type":"link","label":"Enumerate Function in Python","href":"/Python/docs/guide/Built_in_Functions/enumerate()/","docId":"guide/Built_in_Functions/enumerate()/README","unlisted":false},{"type":"link","label":"Python Float Rounding Tutorial","href":"/Python/docs/guide/Built_in_Functions/round()/","docId":"guide/Built_in_Functions/round()/README","unlisted":false},{"type":"link","label":"Python Ranges Tutorial","href":"/Python/docs/guide/Built_in_Functions/range()/","docId":"guide/Built_in_Functions/range()/README","unlisted":false},{"type":"link","label":"Reusable Slice Objects Tutorial","href":"/Python/docs/guide/Built_in_Functions/slice()/","docId":"guide/Built_in_Functions/slice()/README","unlisted":false},{"type":"link","label":"globals()","href":"/Python/docs/guide/Built_in_Functions/globals()/","docId":"guide/Built_in_Functions/globals()/README","unlisted":false},{"type":"link","label":"locals()","href":"/Python/docs/guide/Built_in_Functions/locals()/","docId":"guide/Built_in_Functions/locals()/README","unlisted":false},{"type":"link","label":"all()","href":"/Python/docs/guide/Built_in_Functions/all()/","docId":"guide/Built_in_Functions/all()/README","unlisted":false},{"type":"link","label":"any()","href":"/Python/docs/guide/Built_in_Functions/any()/","docId":"guide/Built_in_Functions/any()/README","unlisted":false},{"type":"link","label":"isinstance()","href":"/Python/docs/guide/Built_in_Functions/isinstance()/","docId":"guide/Built_in_Functions/isinstance()/README","unlisted":false},{"type":"link","label":"Improved_Chat_Bot","href":"/Python/docs/guide/Built_in_Functions/Improved_Chat_Bot/","docId":"guide/Built_in_Functions/Improved_Chat_Bot/README","unlisted":false},{"type":"link","label":"callable()","href":"/Python/docs/guide/Built_in_Functions/callable()/","docId":"guide/Built_in_Functions/callable()/README","unlisted":false},{"type":"link","label":"filter()","href":"/Python/docs/guide/Built_in_Functions/filter()/","docId":"guide/Built_in_Functions/filter()/README","unlisted":false},{"type":"link","label":"map()","href":"/Python/docs/guide/Built_in_Functions/map()/","docId":"guide/Built_in_Functions/map()/README","unlisted":false},{"type":"link","label":"sorted()","href":"/Python/docs/guide/Built_in_Functions/sorted()/","docId":"guide/Built_in_Functions/sorted()/README","unlisted":false},{"type":"link","label":"eval()","href":"/Python/docs/guide/Built_in_Functions/eval()/","docId":"guide/Built_in_Functions/eval()/README","unlisted":false},{"type":"link","label":"exec()","href":"/Python/docs/guide/Built_in_Functions/exec()/","docId":"guide/Built_in_Functions/exec()/README","unlisted":false},{"type":"link","label":"zip()","href":"/Python/docs/guide/Built_in_Functions/zip()/","docId":"guide/Built_in_Functions/zip()/README","unlisted":false},{"type":"link","label":"5 Useful Dunder Methods In Python","href":"/Python/docs/guide/Built_in_Functions/dunder_methods/","docId":"guide/Built_in_Functions/dunder_methods/README","unlisted":false}],"href":"/Python/docs/category/built-in-functions"},{"type":"category","label":"Dataclasses","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Python Data Classes Tutorial","href":"/Python/docs/guide/Dataclasses/@dataclass/","docId":"guide/Dataclasses/@dataclass/README","unlisted":false},{"type":"link","label":"Data Class with Mutable Defaults Tutorial","href":"/Python/docs/guide/Dataclasses/Fields/","docId":"guide/Dataclasses/Fields/README","unlisted":false},{"type":"link","label":"Python Post Initializers Tutorial","href":"/Python/docs/guide/Dataclasses/post_init/","docId":"guide/Dataclasses/post_init/README","unlisted":false},{"type":"link","label":"Tutorial: Using Post Initializer with Init Var in Data Classes","href":"/Python/docs/guide/Dataclasses/InitVar/","docId":"guide/Dataclasses/InitVar/README","unlisted":false},{"type":"link","label":"Using @property in Python","href":"/Python/docs/guide/Dataclasses/@property/","docId":"guide/Dataclasses/@property/README","unlisted":false},{"type":"link","label":"Python Note Taking App","href":"/Python/docs/guide/Dataclasses/Notes_App/","docId":"guide/Dataclasses/Notes_App/README","unlisted":false}],"href":"/Python/docs/category/dataclasses"},{"type":"category","label":"Advanced","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Mypy Static Type Checker Tutorial","href":"/Python/docs/guide/Advanced/Mypy/","docId":"guide/Advanced/Mypy/README","unlisted":false},{"type":"link","label":"Python Walrus Operator Examples","href":"/Python/docs/guide/Advanced/Walrus_Operator/","docId":"guide/Advanced/Walrus_Operator/README","unlisted":false},{"type":"link","label":"Lambda Functions in Python","href":"/Python/docs/guide/Advanced/Lambda_Functions/","docId":"guide/Advanced/Lambda_Functions/README","unlisted":false},{"type":"link","label":"Generators in Python","href":"/Python/docs/guide/Advanced/Generators/","docId":"guide/Advanced/Generators/README","unlisted":false}],"href":"/Python/docs/category/advanced"},{"type":"category","label":"AsyncIO","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/Python/docs/guide/AsyncIO/Intro","docId":"guide/AsyncIO/Intro","unlisted":false},{"type":"link","label":"Asynchronous Programming with Asyncio in Python","href":"/Python/docs/guide/AsyncIO/Getting_Started","docId":"guide/AsyncIO/Getting_Started","unlisted":false},{"type":"link","label":"Tasks","href":"/Python/docs/guide/AsyncIO/Tasks","docId":"guide/AsyncIO/Tasks","unlisted":false},{"type":"link","label":"Asynchronous Operations with Futures in Python","href":"/Python/docs/guide/AsyncIO/Gather","docId":"guide/AsyncIO/Gather","unlisted":false},{"type":"link","label":"Asynchronous Website Status Checker","href":"/Python/docs/guide/AsyncIO/Website_Status","docId":"guide/AsyncIO/Website_Status","unlisted":false}],"href":"/Python/docs/category/asyncio"},{"type":"category","label":"Multiprocessing","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/Python/docs/guide/Multiprocessing/Intro","docId":"guide/Multiprocessing/Intro","unlisted":false},{"type":"link","label":"Multiprocessing","href":"/Python/docs/guide/Multiprocessing/Processes","docId":"guide/Multiprocessing/Processes","unlisted":false},{"type":"link","label":"Process Pools","href":"/Python/docs/guide/Multiprocessing/Pools-Map","docId":"guide/Multiprocessing/Pools-Map","unlisted":false},{"type":"link","label":"Pools-Starmap","href":"/Python/docs/guide/Multiprocessing/Pools-Starmap","docId":"guide/Multiprocessing/Pools-Starmap","unlisted":false},{"type":"link","label":"Pools-Multiple-Functions","href":"/Python/docs/guide/Multiprocessing/Pools-Multiple-Functions","docId":"guide/Multiprocessing/Pools-Multiple-Functions","unlisted":false},{"type":"link","label":"Data-Sharing-Issue","href":"/Python/docs/guide/Multiprocessing/Data-Sharing-Issue","docId":"guide/Multiprocessing/Data-Sharing-Issue","unlisted":false},{"type":"link","label":"Pipes","href":"/Python/docs/guide/Multiprocessing/Pipes","docId":"guide/Multiprocessing/Pipes","unlisted":false},{"type":"link","label":"Queues","href":"/Python/docs/guide/Multiprocessing/Queues","docId":"guide/Multiprocessing/Queues","unlisted":false},{"type":"link","label":"Lock-Semaphores","href":"/Python/docs/guide/Multiprocessing/Lock-Semaphores","docId":"guide/Multiprocessing/Lock-Semaphores","unlisted":false}],"href":"/Python/docs/category/multiprocessing"},{"type":"category","label":"Multi Threading","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Threads","href":"/Python/docs/guide/Multithreading/Threads","docId":"guide/Multithreading/Threads","unlisted":false},{"type":"link","label":"Locks","href":"/Python/docs/guide/Multithreading/Locks","docId":"guide/Multithreading/Locks","unlisted":false},{"type":"link","label":"Daemon-Threads","href":"/Python/docs/guide/Multithreading/Daemon-Threads","docId":"guide/Multithreading/Daemon-Threads","unlisted":false},{"type":"link","label":"Semaphores","href":"/Python/docs/guide/Multithreading/Semaphores","docId":"guide/Multithreading/Semaphores","unlisted":false},{"type":"link","label":"With-Lock-Semaphore","href":"/Python/docs/guide/Multithreading/With-Lock-Semaphore","docId":"guide/Multithreading/With-Lock-Semaphore","unlisted":false},{"type":"link","label":"Race-Conditions","href":"/Python/docs/guide/Multithreading/Race-Conditions","docId":"guide/Multithreading/Race-Conditions","unlisted":false}],"href":"/Python/docs/category/multi-threading"},{"type":"category","label":"Unit-Testing","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Unit Testing","href":"/Python/docs/guide/Unit-Testing/Intro","docId":"guide/Unit-Testing/Intro","unlisted":false},{"type":"link","label":"Using Fixtures in Pytest","href":"/Python/docs/guide/Unit-Testing/Fixtures","docId":"guide/Unit-Testing/Fixtures","unlisted":false},{"type":"link","label":"Using conftest.py in Pytest","href":"/Python/docs/guide/Unit-Testing/Conftest","docId":"guide/Unit-Testing/Conftest","unlisted":false},{"type":"link","label":"Marks","href":"/Python/docs/guide/Unit-Testing/Marks","docId":"guide/Unit-Testing/Marks","unlisted":false},{"type":"link","label":"Parametrize","href":"/Python/docs/guide/Unit-Testing/Parametrize","docId":"guide/Unit-Testing/Parametrize","unlisted":false},{"type":"link","label":"Testing Errors","href":"/Python/docs/guide/Unit-Testing/TestingErrors","docId":"guide/Unit-Testing/TestingErrors","unlisted":false}],"href":"/Python/docs/category/unit-testing"},{"type":"category","label":"File-Management","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"File Handling in Python","href":"/Python/docs/guide/File-Management/File-Handling","docId":"guide/File-Management/File-Handling","unlisted":false},{"type":"link","label":"File Handling with the with Statement in Python","href":"/Python/docs/guide/File-Management/Reading-Files","docId":"guide/File-Management/Reading-Files","unlisted":false},{"type":"link","label":"File Manipulation Tutorial","href":"/Python/docs/guide/File-Management/Writing-Creating-Files","docId":"guide/File-Management/Writing-Creating-Files","unlisted":false},{"type":"link","label":"Deleting_Files","href":"/Python/docs/guide/File-Management/Deleting_Files","docId":"guide/File-Management/Deleting_Files","unlisted":false},{"type":"link","label":"JSON","href":"/Python/docs/guide/File-Management/JSON","docId":"guide/File-Management/JSON","unlisted":false},{"type":"link","label":"Handling-JSON","href":"/Python/docs/guide/File-Management/Handling-JSON","docId":"guide/File-Management/Handling-JSON","unlisted":false},{"type":"link","label":"Creating a JSON Cache for API Data in Python","href":"/Python/docs/guide/File-Management/Caching-JSON","docId":"guide/File-Management/Caching-JSON","unlisted":false},{"type":"link","label":"Glob","href":"/Python/docs/guide/File-Management/Glob","docId":"guide/File-Management/Glob","unlisted":false},{"type":"link","label":"Pickling","href":"/Python/docs/guide/File-Management/Pickling","docId":"guide/File-Management/Pickling","unlisted":false},{"type":"link","label":"yaml","href":"/Python/docs/guide/File-Management/yaml","docId":"guide/File-Management/yaml","unlisted":false},{"type":"link","label":"toml","href":"/Python/docs/guide/File-Management/toml","docId":"guide/File-Management/toml","unlisted":false}],"href":"/Python/docs/category/file-management"}],"dataAnalysisSidebar":[{"type":"link","label":"Getting Started","href":"/Python/docs/data-analysis/getting-started","docId":"data-analysis/getting-started","unlisted":false},{"type":"category","label":"Series","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Series in Pandas","href":"/Python/docs/data-analysis/Series/intro","docId":"data-analysis/Series/intro","unlisted":false},{"type":"link","label":"Attributes","href":"/Python/docs/data-analysis/Series/attributes","docId":"data-analysis/Series/attributes","unlisted":false},{"type":"link","label":"Methods","href":"/Python/docs/data-analysis/Series/methods","docId":"data-analysis/Series/methods","unlisted":false},{"type":"link","label":"Reading and Exporting CSV Files Using Pandas","href":"/Python/docs/data-analysis/Series/handling_csv_files","docId":"data-analysis/Series/handling_csv_files","unlisted":false},{"type":"link","label":"Reading and Previewing CSV Files with Pandas","href":"/Python/docs/data-analysis/Series/head-and-tail","docId":"data-analysis/Series/head-and-tail","unlisted":false},{"type":"link","label":"Sorting Pandas Series and DataFrames","href":"/Python/docs/data-analysis/Series/sorting_values","docId":"data-analysis/Series/sorting_values","unlisted":false},{"type":"link","label":"Using the value_counts() Method in Pandas","href":"/Python/docs/data-analysis/Series/counting_values","docId":"data-analysis/Series/counting_values","unlisted":false},{"type":"link","label":"Accessing Elements by Position in Pandas","href":"/Python/docs/data-analysis/Series/accessing_elements_position","docId":"data-analysis/Series/accessing_elements_position","unlisted":false},{"type":"link","label":"Accessing Series Elements by Index in Pandas","href":"/Python/docs/data-analysis/Series/accessing_elements_index","docId":"data-analysis/Series/accessing_elements_index","unlisted":false}],"href":"/Python/docs/category/series"},{"type":"category","label":"Data Frames","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"DataFrames in Pandas","href":"/Python/docs/data-analysis/Data_Frames/intro","docId":"data-analysis/Data_Frames/intro","unlisted":false},{"type":"link","label":"Series and DataFrames","href":"/Python/docs/data-analysis/Data_Frames/methods","docId":"data-analysis/Data_Frames/methods","unlisted":false},{"type":"link","label":"Retrieving Useful Information from Data Frames","href":"/Python/docs/data-analysis/Data_Frames/descripe-info","docId":"data-analysis/Data_Frames/descripe-info","unlisted":false},{"type":"link","label":"Sorting Data","href":"/Python/docs/data-analysis/Data_Frames/nlargest-nsmallest","docId":"data-analysis/Data_Frames/nlargest-nsmallest","unlisted":false},{"type":"link","label":"Modifying DataFrame Index","href":"/Python/docs/data-analysis/Data_Frames/set_index-reset_index","docId":"data-analysis/Data_Frames/set_index-reset_index","unlisted":false},{"type":"link","label":"Removing Columns and Rows","href":"/Python/docs/data-analysis/Data_Frames/removing-columns-rows","docId":"data-analysis/Data_Frames/removing-columns-rows","unlisted":false},{"type":"link","label":"adding-columns","href":"/Python/docs/data-analysis/Data_Frames/adding-columns","docId":"data-analysis/Data_Frames/adding-columns","unlisted":false},{"type":"link","label":"dropna","href":"/Python/docs/data-analysis/Data_Frames/dropna","docId":"data-analysis/Data_Frames/dropna","unlisted":false},{"type":"link","label":"fillna","href":"/Python/docs/data-analysis/Data_Frames/fillna","docId":"data-analysis/Data_Frames/fillna","unlisted":false}],"href":"/Python/docs/category/data-frames"},{"type":"category","label":"String Operators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"str","href":"/Python/docs/data-analysis/String_Operators/str","docId":"data-analysis/String_Operators/str","unlisted":false},{"type":"link","label":"startswith-endswith","href":"/Python/docs/data-analysis/String_Operators/startswith-endswith","docId":"data-analysis/String_Operators/startswith-endswith","unlisted":false},{"type":"link","label":"index-columns","href":"/Python/docs/data-analysis/String_Operators/index-columns","docId":"data-analysis/String_Operators/index-columns","unlisted":false}],"href":"/Python/docs/category/string-operators"},{"type":"category","label":"Reshaping Datasets","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"introduction","href":"/Python/docs/data-analysis/Reshaping_Datasets/introduction","docId":"data-analysis/Reshaping_Datasets/introduction","unlisted":false},{"type":"link","label":"transpose","href":"/Python/docs/data-analysis/Reshaping_Datasets/transpose","docId":"data-analysis/Reshaping_Datasets/transpose","unlisted":false},{"type":"link","label":"stack-unstack","href":"/Python/docs/data-analysis/Reshaping_Datasets/stack-unstack","docId":"data-analysis/Reshaping_Datasets/stack-unstack","unlisted":false},{"type":"link","label":"melt","href":"/Python/docs/data-analysis/Reshaping_Datasets/melt","docId":"data-analysis/Reshaping_Datasets/melt","unlisted":false},{"type":"link","label":"pivot","href":"/Python/docs/data-analysis/Reshaping_Datasets/pivot","docId":"data-analysis/Reshaping_Datasets/pivot","unlisted":false},{"type":"link","label":"pivot-table","href":"/Python/docs/data-analysis/Reshaping_Datasets/pivot-table","docId":"data-analysis/Reshaping_Datasets/pivot-table","unlisted":false},{"type":"link","label":"groupby","href":"/Python/docs/data-analysis/Reshaping_Datasets/groupby","docId":"data-analysis/Reshaping_Datasets/groupby","unlisted":false}],"href":"/Python/docs/category/reshaping-datasets"},{"type":"category","label":"Combining Datasets","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Combining Datasets","href":"/Python/docs/data-analysis/Combining_Datasets/Intro","docId":"data-analysis/Combining_Datasets/Intro","unlisted":false},{"type":"link","label":"concat()","href":"/Python/docs/data-analysis/Combining_Datasets/concat()","docId":"data-analysis/Combining_Datasets/concat()","unlisted":false},{"type":"link","label":"merge()","href":"/Python/docs/data-analysis/Combining_Datasets/merge()","docId":"data-analysis/Combining_Datasets/merge()","unlisted":false},{"type":"link","label":"Outer Join","href":"/Python/docs/data-analysis/Combining_Datasets/outer_join","docId":"data-analysis/Combining_Datasets/outer_join","unlisted":false},{"type":"link","label":"Inner Join","href":"/Python/docs/data-analysis/Combining_Datasets/inner_join","docId":"data-analysis/Combining_Datasets/inner_join","unlisted":false},{"type":"link","label":"left_right_join","href":"/Python/docs/data-analysis/Combining_Datasets/left_right_join","docId":"data-analysis/Combining_Datasets/left_right_join","unlisted":false},{"type":"link","label":"left_right_minus","href":"/Python/docs/data-analysis/Combining_Datasets/left_right_minus","docId":"data-analysis/Combining_Datasets/left_right_minus","unlisted":false},{"type":"link","label":"outer_join_minus","href":"/Python/docs/data-analysis/Combining_Datasets/outer_join_minus","docId":"data-analysis/Combining_Datasets/outer_join_minus","unlisted":false},{"type":"link","label":"Merging_Different_Column","href":"/Python/docs/data-analysis/Combining_Datasets/Merging_Different_Column","docId":"data-analysis/Combining_Datasets/Merging_Different_Column","unlisted":false}],"href":"/Python/docs/category/combining-datasets"},{"type":"category","label":"Time Series","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Pandas Timestamp and DateTime Conversion","href":"/Python/docs/data-analysis/Time_Series/Timestamp_DatetimeIndex","docId":"data-analysis/Time_Series/Timestamp_DatetimeIndex","unlisted":false},{"type":"link","label":"date_range()","href":"/Python/docs/data-analysis/Time_Series/date_range()","docId":"data-analysis/Time_Series/date_range()","unlisted":false},{"type":"link","label":"Period_PeriodIndex","href":"/Python/docs/data-analysis/Time_Series/Period_PeriodIndex","docId":"data-analysis/Time_Series/Period_PeriodIndex","unlisted":false},{"type":"link","label":"Timedelta_TimedeltaIndex","href":"/Python/docs/data-analysis/Time_Series/Timedelta_TimedeltaIndex","docId":"data-analysis/Time_Series/Timedelta_TimedeltaIndex","unlisted":false},{"type":"link","label":"Accessing_Time_Attributes","href":"/Python/docs/data-analysis/Time_Series/Accessing_Time_Attributes","docId":"data-analysis/Time_Series/Accessing_Time_Attributes","unlisted":false},{"type":"link","label":"Timestap_Methods_Attributes","href":"/Python/docs/data-analysis/Time_Series/Timestap_Methods_Attributes","docId":"data-analysis/Time_Series/Timestap_Methods_Attributes","unlisted":false},{"type":"link","label":"Time_Series","href":"/Python/docs/data-analysis/Time_Series/Time_Series","docId":"data-analysis/Time_Series/Time_Series","unlisted":false},{"type":"link","label":"loc_iloc_DatetimeIndex","href":"/Python/docs/data-analysis/Time_Series/loc_iloc_DatetimeIndex","docId":"data-analysis/Time_Series/loc_iloc_DatetimeIndex","unlisted":false},{"type":"link","label":"reindex","href":"/Python/docs/data-analysis/Time_Series/reindex","docId":"data-analysis/Time_Series/reindex","unlisted":false},{"type":"link","label":"resample","href":"/Python/docs/data-analysis/Time_Series/resample","docId":"data-analysis/Time_Series/resample","unlisted":false},{"type":"link","label":"Project","href":"/Python/docs/data-analysis/Time_Series/Project","docId":"data-analysis/Time_Series/Project","unlisted":false}],"href":"/Python/docs/category/time-series"},{"type":"category","label":"Data Visualization","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Line_Plots","href":"/Python/docs/data-analysis/Data-Visualization/Line_Plots","docId":"data-analysis/Data-Visualization/Line_Plots","unlisted":false},{"type":"link","label":"Bar_Plots","href":"/Python/docs/data-analysis/Data-Visualization/Bar_Plots","docId":"data-analysis/Data-Visualization/Bar_Plots","unlisted":false},{"type":"link","label":"Histograms","href":"/Python/docs/data-analysis/Data-Visualization/Histograms","docId":"data-analysis/Data-Visualization/Histograms","unlisted":false},{"type":"link","label":"Pie_Charts","href":"/Python/docs/data-analysis/Data-Visualization/Pie_Charts","docId":"data-analysis/Data-Visualization/Pie_Charts","unlisted":false},{"type":"link","label":"Styles","href":"/Python/docs/data-analysis/Data-Visualization/Styles","docId":"data-analysis/Data-Visualization/Styles","unlisted":false},{"type":"link","label":"Interactive_Plots","href":"/Python/docs/data-analysis/Data-Visualization/Interactive_Plots","docId":"data-analysis/Data-Visualization/Interactive_Plots","unlisted":false},{"type":"link","label":"Scatter","href":"/Python/docs/data-analysis/Data-Visualization/Scatter","docId":"data-analysis/Data-Visualization/Scatter","unlisted":false},{"type":"link","label":"Candlestick_Charts","href":"/Python/docs/data-analysis/Data-Visualization/Candlestick_Charts","docId":"data-analysis/Data-Visualization/Candlestick_Charts","unlisted":false},{"type":"link","label":"Color_by_Value","href":"/Python/docs/data-analysis/Data-Visualization/Color_by_Value","docId":"data-analysis/Data-Visualization/Color_by_Value","unlisted":false},{"type":"link","label":"Bar Chart Race with Python","href":"/Python/docs/data-analysis/Data-Visualization/Bar_Chart_Race","docId":"data-analysis/Data-Visualization/Bar_Chart_Race","unlisted":false}],"href":"/Python/docs/category/data-visualization"},{"type":"category","label":"NumPy","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Numpy Arrays vs. Python Lists: Understanding the Difference","href":"/Python/docs/data-analysis/NumPy/Lists_vs_NumPy","docId":"data-analysis/NumPy/Lists_vs_NumPy","unlisted":false},{"type":"link","label":"Introduction to NumPy Arrays","href":"/Python/docs/data-analysis/NumPy/Arrays","docId":"data-analysis/NumPy/Arrays","unlisted":false},{"type":"link","label":"Sorting and Concatenating Arrays","href":"/Python/docs/data-analysis/NumPy/Sorting_Concatenating","docId":"data-analysis/NumPy/Sorting_Concatenating","unlisted":false},{"type":"link","label":"Shape_and_Size","href":"/Python/docs/data-analysis/NumPy/Shape_and_Size","docId":"data-analysis/NumPy/Shape_and_Size","unlisted":false},{"type":"link","label":"Reshaping","href":"/Python/docs/data-analysis/NumPy/Reshaping","docId":"data-analysis/NumPy/Reshaping","unlisted":false},{"type":"link","label":"Add_New_Axis","href":"/Python/docs/data-analysis/NumPy/Add_New_Axis","docId":"data-analysis/NumPy/Add_New_Axis","unlisted":false},{"type":"link","label":"Indexing_Slicing","href":"/Python/docs/data-analysis/NumPy/Indexing_Slicing","docId":"data-analysis/NumPy/Indexing_Slicing","unlisted":false},{"type":"link","label":"Creating_Arrays","href":"/Python/docs/data-analysis/NumPy/Creating_Arrays","docId":"data-analysis/NumPy/Creating_Arrays","unlisted":false},{"type":"link","label":"Basic_Operations","href":"/Python/docs/data-analysis/NumPy/Basic_Operations","docId":"data-analysis/NumPy/Basic_Operations","unlisted":false},{"type":"link","label":"Broadcasting","href":"/Python/docs/data-analysis/NumPy/Broadcasting","docId":"data-analysis/NumPy/Broadcasting","unlisted":false},{"type":"link","label":"Matrices","href":"/Python/docs/data-analysis/NumPy/Matrices","docId":"data-analysis/NumPy/Matrices","unlisted":false},{"type":"link","label":"Generating_Random_Numbers","href":"/Python/docs/data-analysis/NumPy/Generating_Random_Numbers","docId":"data-analysis/NumPy/Generating_Random_Numbers","unlisted":false},{"type":"link","label":"Finding_Unique_Elements","href":"/Python/docs/data-analysis/NumPy/Finding_Unique_Elements","docId":"data-analysis/NumPy/Finding_Unique_Elements","unlisted":false},{"type":"link","label":"Reversing_Arrays","href":"/Python/docs/data-analysis/NumPy/Reversing_Arrays","docId":"data-analysis/NumPy/Reversing_Arrays","unlisted":false},{"type":"link","label":"Reshaping_Flattening","href":"/Python/docs/data-analysis/NumPy/Reshaping_Flattening","docId":"data-analysis/NumPy/Reshaping_Flattening","unlisted":false},{"type":"link","label":"Saving_Loading_Arrays","href":"/Python/docs/data-analysis/NumPy/Saving_Loading_Arrays","docId":"data-analysis/NumPy/Saving_Loading_Arrays","unlisted":false}],"href":"/Python/docs/category/numpy"}],"designPatternsSidebar":[{"type":"link","label":"Getting Started","href":"/Python/docs/design-patterns/getting-started","docId":"design-patterns/getting-started","unlisted":false},{"type":"category","label":"Creational Design Patterns","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/Python/docs/design-patterns/creational/","docId":"design-patterns/creational/creational","unlisted":false},{"type":"link","label":"singleton","href":"/Python/docs/design-patterns/creational/singleton","docId":"design-patterns/creational/singleton","unlisted":false},{"type":"link","label":"factory_method","href":"/Python/docs/design-patterns/creational/factory_method","docId":"design-patterns/creational/factory_method","unlisted":false},{"type":"link","label":"abstract_factory","href":"/Python/docs/design-patterns/creational/abstract_factory","docId":"design-patterns/creational/abstract_factory","unlisted":false},{"type":"link","label":"builder","href":"/Python/docs/design-patterns/creational/builder","docId":"design-patterns/creational/builder","unlisted":false},{"type":"link","label":"prototype","href":"/Python/docs/design-patterns/creational/prototype","docId":"design-patterns/creational/prototype","unlisted":false}],"href":"/Python/docs/category/creational-design-patterns"},{"type":"category","label":"Structural Design Patterns","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/Python/docs/design-patterns/structural/structural","docId":"design-patterns/structural/structural","unlisted":false}],"href":"/Python/docs/category/structural-design-patterns"},{"type":"category","label":"Behavioral Design Patterns","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/Python/docs/design-patterns/behavioral/behavioral","docId":"design-patterns/behavioral/behavioral","unlisted":false}],"href":"/Python/docs/category/behavioral-design-patterns"}],"guiSidebar":[{"type":"link","label":"Getting Started","href":"/Python/docs/gui/getting-started","docId":"gui/getting-started","unlisted":false}],"restAPISidebar":[{"type":"link","label":"Getting Started","href":"/Python/docs/rest-api/getting-started","docId":"rest-api/getting-started","unlisted":false},{"type":"category","label":"Designing REST APIs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Interacting With REST APIs and Python","href":"/Python/docs/rest-api/Designing-REST-API/interacting_with_rest","docId":"rest-api/Designing-REST-API/interacting_with_rest","unlisted":false},{"type":"link","label":"Understanding REST APIs","href":"/Python/docs/rest-api/Designing-REST-API/understanding_rest_api","docId":"rest-api/Designing-REST-API/understanding_rest_api","unlisted":false},{"type":"link","label":"Consuming APIs - GET and POST","href":"/Python/docs/rest-api/Designing-REST-API/get_post","docId":"rest-api/Designing-REST-API/get_post","unlisted":false},{"type":"link","label":"Consuming APIs - PUT, PATCH, and DELETE","href":"/Python/docs/rest-api/Designing-REST-API/put_patch_delete","docId":"rest-api/Designing-REST-API/put_patch_delete","unlisted":false},{"type":"link","label":"Designing REST APIs","href":"/Python/docs/rest-api/Designing-REST-API/designing_rest_api","docId":"rest-api/Designing-REST-API/designing_rest_api","unlisted":false},{"type":"link","label":"Designing Data Exchange and Responses","href":"/Python/docs/rest-api/Designing-REST-API/designing_data_exchange","docId":"rest-api/Designing-REST-API/designing_data_exchange","unlisted":false},{"type":"link","label":"Designing Error Responses","href":"/Python/docs/rest-api/Designing-REST-API/designing_error_responses","docId":"rest-api/Designing-REST-API/designing_error_responses","unlisted":false}],"href":"/Python/docs/category/designing-rest-apis"},{"type":"category","label":"Building REST APIs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Building REST APIs with Flask","href":"/Python/docs/rest-api/Building-REST-API/building_rest_api","docId":"rest-api/Building-REST-API/building_rest_api","unlisted":false},{"type":"link","label":"Expanding and Using Flask App","href":"/Python/docs/rest-api/Building-REST-API/expanding_using_flask","docId":"rest-api/Building-REST-API/expanding_using_flask","unlisted":false},{"type":"link","label":"Getting to Know Django Rest Framework (DRF)","href":"/Python/docs/rest-api/Building-REST-API/django_rest","docId":"rest-api/Building-REST-API/django_rest","unlisted":false},{"type":"link","label":"Loading and Serializing Data With DRF","href":"/Python/docs/rest-api/Building-REST-API/loading_serializing_drf","docId":"rest-api/Building-REST-API/loading_serializing_drf","unlisted":false},{"type":"link","label":"Adding URLs and Using the DRF API","href":"/Python/docs/rest-api/Building-REST-API/adding_urls","docId":"rest-api/Building-REST-API/adding_urls","unlisted":false},{"type":"link","label":"Using FastAPI","href":"/Python/docs/rest-api/Building-REST-API/using_fastapi","docId":"rest-api/Building-REST-API/using_fastapi","unlisted":false},{"type":"link","label":"Using the FastAPI API","href":"/Python/docs/rest-api/Building-REST-API/fastapi","docId":"rest-api/Building-REST-API/fastapi","unlisted":false},{"type":"link","label":"Interacting with REST APIs and Python","href":"/Python/docs/rest-api/Building-REST-API/08","docId":"rest-api/Building-REST-API/08","unlisted":false}],"href":"/Python/docs/category/building-rest-apis"},{"type":"link","label":"CRUD","href":"/Python/docs/rest-api/CRUD","docId":"rest-api/CRUD","unlisted":false}],"tipsAndTricksSidebar":[{"type":"link","label":"Tips & Tricks","href":"/Python/docs/tips-and-tricks/getting-started","docId":"tips-and-tricks/getting-started","unlisted":false},{"type":"link","label":"5 Useful F-String Tricks in Python","href":"/Python/docs/tips-and-tricks/F-String-Tricks","docId":"tips-and-tricks/F-String-Tricks","unlisted":false},{"type":"link","label":"5 Critical Python Mistakes to Avoid","href":"/Python/docs/tips-and-tricks/critical-mistakes-to-avoid","docId":"tips-and-tricks/critical-mistakes-to-avoid","unlisted":false},{"type":"link","label":"Understanding and Addressing Python\'s 5 Worst Features","href":"/Python/docs/tips-and-tricks/worst-Features","docId":"tips-and-tricks/worst-Features","unlisted":false},{"type":"link","label":"10 Common Python Errors","href":"/Python/docs/tips-and-tricks/common-errors","docId":"tips-and-tricks/common-errors","unlisted":false},{"type":"link","label":"20 Essential Tips & Tricks in Python","href":"/Python/docs/tips-and-tricks/tips-and-tricks","docId":"tips-and-tricks/tips-and-tricks","unlisted":false},{"type":"link","label":"39 Keywords","href":"/Python/docs/tips-and-tricks/Keywords","docId":"tips-and-tricks/Keywords","unlisted":false},{"type":"link","label":"50 Linux Terminal Commands","href":"/Python/docs/tips-and-tricks/linux-commands","docId":"tips-and-tricks/linux-commands","unlisted":false},{"type":"link","label":"5 Useful Python Decorators","href":"/Python/docs/tips-and-tricks/decorators","docId":"tips-and-tricks/decorators","unlisted":false},{"type":"link","label":"Be CAREFUL With Removing Code Duplication","href":"/Python/docs/tips-and-tricks/dont-dry","docId":"tips-and-tricks/dont-dry","unlisted":false},{"type":"link","label":"5 Useful Dunder Methods in Python","href":"/Python/docs/tips-and-tricks/dunder-methods","docId":"tips-and-tricks/dunder-methods","unlisted":false},{"type":"link","label":"5 Fun Python Easter Eggs","href":"/Python/docs/tips-and-tricks/easter-eggs","docId":"tips-and-tricks/easter-eggs","unlisted":false},{"type":"link","label":"Granularity and Cohesion in Programming","href":"/Python/docs/tips-and-tricks/granularity-cohesion","docId":"tips-and-tricks/granularity-cohesion","unlisted":false},{"type":"link","label":"\\"itemgetter\\"","href":"/Python/docs/tips-and-tricks/itemgetter","docId":"tips-and-tricks/itemgetter","unlisted":false},{"type":"link","label":"Iterable vs Iterator in Python","href":"/Python/docs/tips-and-tricks/iterable-iterator","docId":"tips-and-tricks/iterable-iterator","unlisted":false},{"type":"link","label":"match-case Statement","href":"/Python/docs/tips-and-tricks/match-case","docId":"tips-and-tricks/match-case","unlisted":false},{"type":"link","label":"Leveraging Python\'s \\"methodcaller\\" for Efficient Data Manipulation","href":"/Python/docs/tips-and-tricks/methodcaller","docId":"tips-and-tricks/methodcaller","unlisted":false},{"type":"link","label":"Comprehensive Python List Methods Tutorial","href":"/Python/docs/tips-and-tricks/methods","docId":"tips-and-tricks/methods","unlisted":false},{"type":"link","label":"Python not found, WTF","href":"/Python/docs/tips-and-tricks/python-is-python3","docId":"tips-and-tricks/python-is-python3","unlisted":false},{"type":"link","label":"Python not found, WTF!","href":"/Python/docs/tips-and-tricks/python-python3","docId":"tips-and-tricks/python-python3","unlisted":false},{"type":"link","label":"R.I.P GIL in Python 3.13: Will Python Become Faster?","href":"/Python/docs/tips-and-tricks/rip-gil","docId":"tips-and-tricks/rip-gil","unlisted":false},{"type":"link","label":"7 Coding Habits of Top 1% Programmers","href":"/Python/docs/tips-and-tricks/seven-code-habbits","docId":"tips-and-tricks/seven-code-habbits","unlisted":false},{"type":"link","label":"Understanding the self Parameter in Python","href":"/Python/docs/tips-and-tricks/wtf-is-self","docId":"tips-and-tricks/wtf-is-self","unlisted":false},{"type":"link","label":"What Exactly is yield from in Python?","href":"/Python/docs/tips-and-tricks/yield","docId":"tips-and-tricks/yield","unlisted":false}]},"docs":{"ci-cd/getting-started":{"id":"ci-cd/getting-started","title":"Getting Started","description":""},"data-analysis/Combining_Datasets/concat()":{"id":"data-analysis/Combining_Datasets/concat()","title":"concat()","description":"The concat() function in Pandas is a powerful tool for combining data from multiple DataFrames. It offers flexible options for handling datasets of different sizes, columns, or indices. This documentation will walk you through its functionality, use cases, and practical examples.","sidebar":"dataAnalysisSidebar"},"data-analysis/Combining_Datasets/inner_join":{"id":"data-analysis/Combining_Datasets/inner_join","title":"Inner Join","description":"The inner join method in Pandas is a highly focused way to merge two datasets, keeping only the rows with matching values in the specified column(s) in both DataFrames. It excludes rows that do not intersect, making it a precise tool for aligning related data.","sidebar":"dataAnalysisSidebar"},"data-analysis/Combining_Datasets/Intro":{"id":"data-analysis/Combining_Datasets/Intro","title":"Combining Datasets","description":"Combining datasets is a critical skill in data analysis, as it allows you to work with data from multiple sources in a cohesive and analyzable format. pandas, a powerful Python library, offers various methods to efficiently combine datasets, making it an essential tool for analysts and data scientists.","sidebar":"dataAnalysisSidebar"},"data-analysis/Combining_Datasets/left_right_join":{"id":"data-analysis/Combining_Datasets/left_right_join","title":"left_right_join","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Combining_Datasets/left_right_minus":{"id":"data-analysis/Combining_Datasets/left_right_minus","title":"left_right_minus","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Combining_Datasets/merge()":{"id":"data-analysis/Combining_Datasets/merge()","title":"merge()","description":"The merge() function in Pandas provides powerful capabilities for combining datasets using database-style join methods. This function is ideal when working with relational data, allowing you to specify how datasets should align based on key columns or indices.","sidebar":"dataAnalysisSidebar"},"data-analysis/Combining_Datasets/Merging_Different_Column":{"id":"data-analysis/Combining_Datasets/Merging_Different_Column","title":"Merging_Different_Column","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Combining_Datasets/outer_join":{"id":"data-analysis/Combining_Datasets/outer_join","title":"Outer Join","description":"The outer join is a method used in Pandas to combine datasets in a way that retains all rows from both DataFrames, filling in missing values (NaN) for non-matching entries. This comprehensive approach ensures no data is left out, making it especially useful for merging datasets with overlapping and distinct entries.","sidebar":"dataAnalysisSidebar"},"data-analysis/Combining_Datasets/outer_join_minus":{"id":"data-analysis/Combining_Datasets/outer_join_minus","title":"outer_join_minus","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Data_Frames/adding-columns":{"id":"data-analysis/Data_Frames/adding-columns","title":"adding-columns","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Data_Frames/descripe-info":{"id":"data-analysis/Data_Frames/descripe-info","title":"Retrieving Useful Information from Data Frames","description":"In this tutorial, we will explore how to retrieve valuable information from data frames using the Pandas library in Python. We will use a dataset containing information about the top 1000 movies and TV shows. This dataset includes missing values and requires some data cleaning. Let\'s dive in step by step.","sidebar":"dataAnalysisSidebar"},"data-analysis/Data_Frames/dropna":{"id":"data-analysis/Data_Frames/dropna","title":"dropna","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Data_Frames/fillna":{"id":"data-analysis/Data_Frames/fillna","title":"fillna","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Data_Frames/intro":{"id":"data-analysis/Data_Frames/intro","title":"DataFrames in Pandas","description":"In this tutorial, we\'ll delve into DataFrames in Pandas, a powerful two-dimensional labeled data structure widely used for data manipulation and analysis. We\'ll cover the fundamentals of DataFrames, how to create them, access their attributes, and perform basic operations.","sidebar":"dataAnalysisSidebar"},"data-analysis/Data_Frames/methods":{"id":"data-analysis/Data_Frames/methods","title":"Series and DataFrames","description":"In this tutorial, we\'ll explore common operations on Pandas Series and DataFrames, highlighting their similarities and differences. We\'ll cover creating Series and DataFrames, performing basic operations like summation, and understanding the concept of axes.","sidebar":"dataAnalysisSidebar"},"data-analysis/Data_Frames/nlargest-nsmallest":{"id":"data-analysis/Data_Frames/nlargest-nsmallest","title":"Sorting Data","description":"In this tutorial, we\'ll explore how to efficiently sort data in a Pandas DataFrame using the nlargest and nsmallest functions. These functions are particularly useful when you need to identify the largest or smallest values in a DataFrame based on one or multiple columns.","sidebar":"dataAnalysisSidebar"},"data-analysis/Data_Frames/removing-columns-rows":{"id":"data-analysis/Data_Frames/removing-columns-rows","title":"Removing Columns and Rows","description":"In this tutorial, we\'ll explore how to efficiently remove both columns and rows from Pandas DataFrames using the drop method. This method provides a convenient way to manipulate the structure of your DataFrame by eliminating unwanted columns or rows. We\'ll cover various scenarios, including removing columns by name, removing rows by index, and specifying the axis explicitly.","sidebar":"dataAnalysisSidebar"},"data-analysis/Data_Frames/set_index-reset_index":{"id":"data-analysis/Data_Frames/set_index-reset_index","title":"Modifying DataFrame Index","description":"In this tutorial, we will explore how to modify the index of a DataFrame using various methods provided by the Pandas library in Python. We will cover the setindex() and resetindex() methods along with their parameters, such as drop and inplace, to understand how they affect the DataFrame\'s structure.","sidebar":"dataAnalysisSidebar"},"data-analysis/Data-Visualization/Bar_Chart_Race":{"id":"data-analysis/Data-Visualization/Bar_Chart_Race","title":"Bar Chart Race with Python","description":"This README.md provides detailed instructions on how to create a bar chart race using Python, specifically focusing on customizing the visualization and rendering it as a video. The bar chart race visualizes the popularity of programming languages over time using data from a CSV file.","sidebar":"dataAnalysisSidebar"},"data-analysis/Data-Visualization/Bar_Plots":{"id":"data-analysis/Data-Visualization/Bar_Plots","title":"Bar_Plots","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Data-Visualization/Candlestick_Charts":{"id":"data-analysis/Data-Visualization/Candlestick_Charts","title":"Candlestick_Charts","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Data-Visualization/Color_by_Value":{"id":"data-analysis/Data-Visualization/Color_by_Value","title":"Color_by_Value","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Data-Visualization/Histograms":{"id":"data-analysis/Data-Visualization/Histograms","title":"Histograms","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Data-Visualization/Interactive_Plots":{"id":"data-analysis/Data-Visualization/Interactive_Plots","title":"Interactive_Plots","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Data-Visualization/Line_Plots":{"id":"data-analysis/Data-Visualization/Line_Plots","title":"Line_Plots","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Data-Visualization/Pie_Charts":{"id":"data-analysis/Data-Visualization/Pie_Charts","title":"Pie_Charts","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Data-Visualization/Scatter":{"id":"data-analysis/Data-Visualization/Scatter","title":"Scatter","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Data-Visualization/Styles":{"id":"data-analysis/Data-Visualization/Styles","title":"Styles","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/getting-started":{"id":"data-analysis/getting-started","title":"Getting Started","description":"1. Series","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Add_New_Axis":{"id":"data-analysis/NumPy/Add_New_Axis","title":"Add_New_Axis","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Arrays":{"id":"data-analysis/NumPy/Arrays","title":"Introduction to NumPy Arrays","description":"In this tutorial, we\'ll delve into the fundamental concepts of arrays in NumPy, a powerful library for numerical computing in Python. Arrays are the central data structure in NumPy, providing a versatile and efficient way to work with large datasets.","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Basic_Operations":{"id":"data-analysis/NumPy/Basic_Operations","title":"Basic_Operations","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Broadcasting":{"id":"data-analysis/NumPy/Broadcasting","title":"Broadcasting","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Creating_Arrays":{"id":"data-analysis/NumPy/Creating_Arrays","title":"Creating_Arrays","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Finding_Unique_Elements":{"id":"data-analysis/NumPy/Finding_Unique_Elements","title":"Finding_Unique_Elements","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Generating_Random_Numbers":{"id":"data-analysis/NumPy/Generating_Random_Numbers","title":"Generating_Random_Numbers","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Indexing_Slicing":{"id":"data-analysis/NumPy/Indexing_Slicing","title":"Indexing_Slicing","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Lists_vs_NumPy":{"id":"data-analysis/NumPy/Lists_vs_NumPy","title":"Numpy Arrays vs. Python Lists: Understanding the Difference","description":"In this tutorial, we\'ll delve into the reasons why we prefer using Numpy arrays over Python lists for numerical computing tasks. We\'ll explore the key differences between the two data structures and demonstrate the efficiency of Numpy arrays through examples.","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Matrices":{"id":"data-analysis/NumPy/Matrices","title":"Matrices","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Reshaping":{"id":"data-analysis/NumPy/Reshaping","title":"Reshaping","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Reshaping_Flattening":{"id":"data-analysis/NumPy/Reshaping_Flattening","title":"Reshaping_Flattening","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Reversing_Arrays":{"id":"data-analysis/NumPy/Reversing_Arrays","title":"Reversing_Arrays","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Saving_Loading_Arrays":{"id":"data-analysis/NumPy/Saving_Loading_Arrays","title":"Saving_Loading_Arrays","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Shape_and_Size":{"id":"data-analysis/NumPy/Shape_and_Size","title":"Shape_and_Size","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/NumPy/Sorting_Concatenating":{"id":"data-analysis/NumPy/Sorting_Concatenating","title":"Sorting and Concatenating Arrays","description":"In this tutorial, we\'ll explore how to sort and concatenate arrays using NumPy, a powerful library for numerical computing in Python.","sidebar":"dataAnalysisSidebar"},"data-analysis/Reshaping_Datasets/groupby":{"id":"data-analysis/Reshaping_Datasets/groupby","title":"groupby","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Reshaping_Datasets/introduction":{"id":"data-analysis/Reshaping_Datasets/introduction","title":"introduction","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Reshaping_Datasets/melt":{"id":"data-analysis/Reshaping_Datasets/melt","title":"melt","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Reshaping_Datasets/pivot":{"id":"data-analysis/Reshaping_Datasets/pivot","title":"pivot","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Reshaping_Datasets/pivot-table":{"id":"data-analysis/Reshaping_Datasets/pivot-table","title":"pivot-table","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Reshaping_Datasets/stack-unstack":{"id":"data-analysis/Reshaping_Datasets/stack-unstack","title":"stack-unstack","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Reshaping_Datasets/transpose":{"id":"data-analysis/Reshaping_Datasets/transpose","title":"transpose","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Series/accessing_elements_index":{"id":"data-analysis/Series/accessing_elements_index","title":"Accessing Series Elements by Index in Pandas","description":"In this tutorial, we\'ll delve into accessing elements in a Pandas Series by their index. We\'ll use a practical example involving net worth data of individuals and access them using their names as indices.","sidebar":"dataAnalysisSidebar"},"data-analysis/Series/accessing_elements_position":{"id":"data-analysis/Series/accessing_elements_position","title":"Accessing Elements by Position in Pandas","description":"In this tutorial, we will explore various methods to access elements by their position in a pandas Series. We\'ll cover basic element access, accessing multiple elements, slicing, and accessing the last element of a Series. We\'ll use a sample dataset representing the richest individuals to demonstrate these concepts.","sidebar":"dataAnalysisSidebar"},"data-analysis/Series/attributes":{"id":"data-analysis/Series/attributes","title":"Attributes","description":"Pandas is a powerful library for data manipulation and analysis in Python. One of its core data structures is the Series, which is essentially a one-dimensional labeled array capable of holding any data type. Understanding the attributes associated with Series objects is crucial for effectively working with data in Pandas. In this tutorial, we\'ll delve into the most common attributes of Pandas Series, exploring their functionalities and how to utilize them in your data analysis workflows.","sidebar":"dataAnalysisSidebar"},"data-analysis/Series/counting_values":{"id":"data-analysis/Series/counting_values","title":"Using the value_counts() Method in Pandas","description":"In this tutorial, we\'ll explore the value_counts() method in Pandas, a powerful tool for counting the occurrences of values within a Series in a DataFrame. We\'ll cover its basic usage, as well as various arguments you can use to customize its behavior.","sidebar":"dataAnalysisSidebar"},"data-analysis/Series/handling_csv_files":{"id":"data-analysis/Series/handling_csv_files","title":"Reading and Exporting CSV Files Using Pandas","description":"In this tutorial, we will learn how to read and export CSV files using the Pandas library in Python. CSV (Comma Separated Values) files are a common way of storing tabular data, and Pandas provides powerful tools for handling such data efficiently.","sidebar":"dataAnalysisSidebar"},"data-analysis/Series/head-and-tail":{"id":"data-analysis/Series/head-and-tail","title":"Reading and Previewing CSV Files with Pandas","description":"In this tutorial, we\'ll explore how to efficiently read CSV files using the Pandas library in Python and how to preview the data using the head() and tail() methods.","sidebar":"dataAnalysisSidebar"},"data-analysis/Series/intro":{"id":"data-analysis/Series/intro","title":"Series in Pandas","description":"Series are one-dimensional labeled arrays capable of holding various data types, such as integers, strings, floating-point numbers, or Python objects. They serve as the building blocks for more complex data structures like DataFrames.Let\'s break down the key concepts and demonstrate how to create, manipulate, and utilize Series effectively in Python.","sidebar":"dataAnalysisSidebar"},"data-analysis/Series/methods":{"id":"data-analysis/Series/methods","title":"Methods","description":"In the world of data manipulation and analysis in Python, Pandas is a powerhouse library. It offers a plethora of functionalities for handling structured data. One of the fundamental data structures in Pandas is the Series, which represents a one-dimensional labeled array. In this tutorial, we will delve into various methods available for manipulating and analyzing Series data.","sidebar":"dataAnalysisSidebar"},"data-analysis/Series/sorting_values":{"id":"data-analysis/Series/sorting_values","title":"Sorting Pandas Series and DataFrames","description":"In this tutorial, we will explore how to sort values in Pandas Series and DataFrames using the sortvalues() method. We will cover various arguments of this method and understand their functionalities with code examples. Additionally, we will learn about sorting by index using the sortindex() method.","sidebar":"dataAnalysisSidebar"},"data-analysis/String_Operators/index-columns":{"id":"data-analysis/String_Operators/index-columns","title":"index-columns","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/String_Operators/startswith-endswith":{"id":"data-analysis/String_Operators/startswith-endswith","title":"startswith-endswith","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/String_Operators/str":{"id":"data-analysis/String_Operators/str","title":"str","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Time_Series/Accessing_Time_Attributes":{"id":"data-analysis/Time_Series/Accessing_Time_Attributes","title":"Accessing_Time_Attributes","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Time_Series/date_range()":{"id":"data-analysis/Time_Series/date_range()","title":"date_range()","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Time_Series/loc_iloc_DatetimeIndex":{"id":"data-analysis/Time_Series/loc_iloc_DatetimeIndex","title":"loc_iloc_DatetimeIndex","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Time_Series/Period_PeriodIndex":{"id":"data-analysis/Time_Series/Period_PeriodIndex","title":"Period_PeriodIndex","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Time_Series/Project":{"id":"data-analysis/Time_Series/Project","title":"Project","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Time_Series/reindex":{"id":"data-analysis/Time_Series/reindex","title":"reindex","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Time_Series/resample":{"id":"data-analysis/Time_Series/resample","title":"resample","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Time_Series/Time_Series":{"id":"data-analysis/Time_Series/Time_Series","title":"Time_Series","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Time_Series/Timedelta_TimedeltaIndex":{"id":"data-analysis/Time_Series/Timedelta_TimedeltaIndex","title":"Timedelta_TimedeltaIndex","description":"","sidebar":"dataAnalysisSidebar"},"data-analysis/Time_Series/Timestamp_DatetimeIndex":{"id":"data-analysis/Time_Series/Timestamp_DatetimeIndex","title":"Pandas Timestamp and DateTime Conversion","description":"This repository provides a comprehensive guide on working with timestamps and datetime objects in Pandas. Timestamps play a crucial role in time series data analysis, allowing users to represent single instances in time accurately. This guide covers various methods to create, manipulate, and convert timestamps using Pandas.","sidebar":"dataAnalysisSidebar"},"data-analysis/Time_Series/Timestap_Methods_Attributes":{"id":"data-analysis/Time_Series/Timestap_Methods_Attributes","title":"Timestap_Methods_Attributes","description":"","sidebar":"dataAnalysisSidebar"},"design-patterns/behavioral/behavioral":{"id":"design-patterns/behavioral/behavioral","title":"Introduction","description":"Behavioral design patterns focus on object collaboration and responsibilities, describing how objects interact and communicate with each other to fulfill certain tasks. They promote loose coupling and flexibility in the system\'s design. In this tutorial, we will explore three fundamental behavioral design patterns: Observer, Strategy, and Command.","sidebar":"designPatternsSidebar"},"design-patterns/creational/abstract_factory":{"id":"design-patterns/creational/abstract_factory","title":"abstract_factory","description":"","sidebar":"designPatternsSidebar"},"design-patterns/creational/builder":{"id":"design-patterns/creational/builder","title":"builder","description":"","sidebar":"designPatternsSidebar"},"design-patterns/creational/creational":{"id":"design-patterns/creational/creational","title":"Introduction","description":"Creational design patterns deal with object creation mechanisms, aiming to create objects in a manner suitable to the situation. They ensure that the system is decoupled from the specifics of the object creation process.","sidebar":"designPatternsSidebar"},"design-patterns/creational/factory_method":{"id":"design-patterns/creational/factory_method","title":"factory_method","description":"","sidebar":"designPatternsSidebar"},"design-patterns/creational/prototype":{"id":"design-patterns/creational/prototype","title":"prototype","description":"","sidebar":"designPatternsSidebar"},"design-patterns/creational/singleton":{"id":"design-patterns/creational/singleton","title":"singleton","description":"","sidebar":"designPatternsSidebar"},"design-patterns/getting-started":{"id":"design-patterns/getting-started","title":"Getting Started","description":"","sidebar":"designPatternsSidebar"},"design-patterns/structural/structural":{"id":"design-patterns/structural/structural","title":"Introduction","description":"Structural design patterns deal with object composition, ensuring that if one part of a system changes, the entire structure does not need to change. They focus on the relationship between entities to make the structure more flexible and efficient.","sidebar":"designPatternsSidebar"},"getting-started":{"id":"getting-started","title":"Getting Started","description":""},"gui/getting-started":{"id":"gui/getting-started","title":"Getting Started","description":"","sidebar":"guiSidebar"},"guide/Advanced/Generators/README":{"id":"guide/Advanced/Generators/README","title":"Generators in Python","description":"Welcome to this tutorial on generators in Python! Generators are a powerful concept that offers memory efficiency and lazy evaluation. Let\'s dive into the basics and explore some examples.","sidebar":"guideSidebar"},"guide/Advanced/Lambda_Functions/README":{"id":"guide/Advanced/Lambda_Functions/README","title":"Lambda Functions in Python","description":"Welcome to this tutorial on using lambda functions in Python! In this lesson, we\'ll explore the basics of lambda functions, how to create them, and how to use them effectively.","sidebar":"guideSidebar"},"guide/Advanced/Mypy/README":{"id":"guide/Advanced/Mypy/README","title":"Mypy Static Type Checker Tutorial","description":"In this tutorial, we\'ll explore the benefits of using Mypy, a powerful static type checker for Python. While code editors can catch some mistakes when annotating object types, Mypy ensures a more comprehensive check of types, especially in complex scenarios.","sidebar":"guideSidebar"},"guide/Advanced/Walrus_Operator/README":{"id":"guide/Advanced/Walrus_Operator/README","title":"Python Walrus Operator Examples","description":"In recent years, Python introduced a new operator known as the walrus operator (:=). This operator allows for the creation of a variable and the evaluation of an expression simultaneously, reducing the need for additional lines of code. However, it\'s crucial to note that the walrus operator was introduced in Python 3.8, so using it in earlier versions will result in errors.","sidebar":"guideSidebar"},"guide/AsyncIO/Gather":{"id":"guide/AsyncIO/Gather","title":"Asynchronous Operations with Futures in Python","description":"In this tutorial, we will explore the concept of futures in Python to efficiently handle multiple asynchronous tasks. Instead of creating individual tasks and awaiting each one separately, we will use futures to initiate multiple tasks simultaneously.","sidebar":"guideSidebar"},"guide/AsyncIO/Getting_Started":{"id":"guide/AsyncIO/Getting_Started","title":"Asynchronous Programming with Asyncio in Python","description":"This tutorial will guide you through the basics of using Asyncio in Python for asynchronous programming. Asyncio is a built-in module that allows you to write asynchronous code, enabling more efficient handling of tasks that involve waiting, such as network requests or I/O operations.","sidebar":"guideSidebar"},"guide/AsyncIO/Intro":{"id":"guide/AsyncIO/Intro","title":"Introduction","description":"In this tutorial, we\'ll explore the concept of async IO, understand its purpose, and see how it can be beneficial in handling IO-bound tasks.","sidebar":"guideSidebar"},"guide/AsyncIO/Tasks":{"id":"guide/AsyncIO/Tasks","title":"Tasks","description":"Tasks are scheduled and independently managed coroutines, providing flexibility in handling asynchronous operations.","sidebar":"guideSidebar"},"guide/AsyncIO/Website_Status":{"id":"guide/AsyncIO/Website_Status","title":"Asynchronous Website Status Checker","description":"In this Python project, we will create an asynchronous website status checker using the power of asynchronous tasks. This program efficiently fetches the status of multiple websites and provides detailed information about each request.","sidebar":"guideSidebar"},"guide/Built_in_Functions/all()/README":{"id":"guide/Built_in_Functions/all()/README","title":"all()","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Built_in_Functions/any()/README":{"id":"guide/Built_in_Functions/any()/README","title":"any()","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Built_in_Functions/callable()/README":{"id":"guide/Built_in_Functions/callable()/README","title":"callable()","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Built_in_Functions/dunder_methods/README":{"id":"guide/Built_in_Functions/dunder_methods/README","title":"5 Useful Dunder Methods In Python","description":"In this guide, we\'ll explore five of the most useful Dunder (double underscore) methods in Python. These methods provide powerful functionality for customizing the behavior of classes in Python.","sidebar":"guideSidebar"},"guide/Built_in_Functions/enumerate()/README":{"id":"guide/Built_in_Functions/enumerate()/README","title":"Enumerate Function in Python","description":"Introduction","sidebar":"guideSidebar"},"guide/Built_in_Functions/eval()/README":{"id":"guide/Built_in_Functions/eval()/README","title":"eval()","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Built_in_Functions/exec()/README":{"id":"guide/Built_in_Functions/exec()/README","title":"exec()","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Built_in_Functions/filter()/README":{"id":"guide/Built_in_Functions/filter()/README","title":"filter()","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Built_in_Functions/globals()/README":{"id":"guide/Built_in_Functions/globals()/README","title":"globals()","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Built_in_Functions/Improved_Chat_Bot/README":{"id":"guide/Built_in_Functions/Improved_Chat_Bot/README","title":"Improved_Chat_Bot","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Built_in_Functions/isinstance()/README":{"id":"guide/Built_in_Functions/isinstance()/README","title":"isinstance()","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Built_in_Functions/locals()/README":{"id":"guide/Built_in_Functions/locals()/README","title":"locals()","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Built_in_Functions/map()/README":{"id":"guide/Built_in_Functions/map()/README","title":"map()","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Built_in_Functions/print()/README":{"id":"guide/Built_in_Functions/print()/README","title":"Python Print Statement","description":"Welcome to the Python Print Statement tutorial! In this tutorial, we will explore the various features and functionalities of the print statement in Python. The print statement is a fundamental tool in Python for displaying information in the console.","sidebar":"guideSidebar"},"guide/Built_in_Functions/range()/README":{"id":"guide/Built_in_Functions/range()/README","title":"Python Ranges Tutorial","description":"In this tutorial, we\'ll explore the use of ranges in Python and how the range function can be utilized to create sequences of numbers efficiently.","sidebar":"guideSidebar"},"guide/Built_in_Functions/round()/README":{"id":"guide/Built_in_Functions/round()/README","title":"Python Float Rounding Tutorial","description":"This tutorial will guide you through the process of rounding floating-point numbers in Python using the built-in round function. Rounding numbers is useful to improve readability and precision in your output.","sidebar":"guideSidebar"},"guide/Built_in_Functions/slice()/README":{"id":"guide/Built_in_Functions/slice()/README","title":"Reusable Slice Objects Tutorial","description":"In this tutorial, we\'ll learn how to create reusable slice objects in Python. Slicing allows us to extract specific portions of iterables, such as lists or strings. By creating slice objects, we can make our code more modular and easily reuse the same slicing logic in different parts of our program.","sidebar":"guideSidebar"},"guide/Built_in_Functions/sorted()/README":{"id":"guide/Built_in_Functions/sorted()/README","title":"sorted()","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Built_in_Functions/zip()/README":{"id":"guide/Built_in_Functions/zip()/README","title":"zip()","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Control_Flow/Break_and_Continue":{"id":"guide/Control_Flow/Break_and_Continue","title":"break and continue","description":"In Python, loops are a fundamental part of controlling the flow of a program. They allow for repeated execution of a block of code. Two important control keywords that can be used within loops are break and continue. These keywords provide additional control by allowing us to prematurely exit a loop or skip specific iterations. This tutorial provides a detailed examination of these keywords and their use cases.","sidebar":"guideSidebar"},"guide/Control_Flow/For_Loop":{"id":"guide/Control_Flow/For_Loop","title":"Looping","description":"Introduction to For Loops in Python","sidebar":"guideSidebar"},"guide/Control_Flow/If_Elif_Else":{"id":"guide/Control_Flow/If_Elif_Else","title":"Control Flow and Conditional Statements in Python","description":"Understanding control flow and conditional statements is a fundamental aspect of programming in Python. This tutorial will guide you through the basics of using if, elif, and else statements to create logical decision-making processes in your code.","sidebar":"guideSidebar"},"guide/Control_Flow/If_Else_Shorthand":{"id":"guide/Control_Flow/If_Else_Shorthand","title":"Shorthand If-Else Statements","description":"In Python, there are several ways to write code that can optimize both its length and readability. One such technique is using shorthand if-else statements, which can help simplify simple boolean expressions into more concise one-liners. However, it is crucial to prioritize readability above all else. Shortened code may appear efficient at first glance but can lead to confusion and wasted time during later code reviews or debugging sessions. In this tutorial, we will explore the shorthand if-else statement in Python, understand its syntax, and discuss when to use it appropriately.","sidebar":"guideSidebar"},"guide/Control_Flow/Loop-Else":{"id":"guide/Control_Flow/Loop-Else","title":"else Block in for and while Loops","description":"Introduction","sidebar":"guideSidebar"},"guide/Control_Flow/Rock_Paper_Scissors":{"id":"guide/Control_Flow/Rock_Paper_Scissors","title":"Building a Rock, Paper, Scissors Game in Python","description":"In this tutorial, we will create a classic game of Rock, Paper, Scissors in Python. This project will incorporate basic artificial intelligence to simulate an opponent. The steps outlined will guide you through setting up the game, handling user input, implementing game logic, and displaying the results. Additionally, we will suggest a bonus assignment to further enhance your Python skills.","sidebar":"guideSidebar"},"guide/Control_Flow/While_Loop":{"id":"guide/Control_Flow/While_Loop","title":"Understanding Looping Constructs in Python","description":"Python provides powerful looping constructs that allow developers to iterate over sequences and execute code repeatedly. This tutorial will delve into the intricacies of the for loop and the while loop, highlighting their usage, advantages, and potential pitfalls. We will also examine scenarios where each type of loop is appropriate.","sidebar":"guideSidebar"},"guide/Dataclasses/@dataclass/README":{"id":"guide/Dataclasses/@dataclass/README","title":"Python Data Classes Tutorial","description":"Data classes in Python offer a convenient way to create classes whose main purpose is to hold and represent data. While you can achieve similar functionality using regular classes, data classes provide enhanced readability, comparability, and reduce boilerplate code. To begin, let\'s import the dataclass decorator from the dataclasses module. We will use this decorator to create our data class.","sidebar":"guideSidebar"},"guide/Dataclasses/@property/README":{"id":"guide/Dataclasses/@property/README","title":"Using @property in Python","description":"In Python, the @property decorator is a powerful tool for creating class properties, allowing you to define methods that can be accessed like attributes. This tutorial will walk you through a scenario where the use of @property is beneficial, using a class representing fruit pricing as an example.","sidebar":"guideSidebar"},"guide/Dataclasses/Fields/README":{"id":"guide/Dataclasses/Fields/README","title":"Data Class with Mutable Defaults Tutorial","description":"Step 1: Importing Dependencies","sidebar":"guideSidebar"},"guide/Dataclasses/InitVar/README":{"id":"guide/Dataclasses/InitVar/README","title":"Tutorial: Using Post Initializer with Init Var in Data Classes","description":"Step 1: Import the init file","sidebar":"guideSidebar"},"guide/Dataclasses/Notes_App/README":{"id":"guide/Dataclasses/Notes_App/README","title":"Python Note Taking App","description":"This tutorial will guide you through creating a simple note-taking app in Python using data classes and regular classes. The app will allow you to add, edit, and delete notes. We will also use the Uuid library to generate unique identifiers for each note.","sidebar":"guideSidebar"},"guide/Dataclasses/post_init/README":{"id":"guide/Dataclasses/post_init/README","title":"Python Post Initializers Tutorial","description":"We\'ll create a simple example of a Fruit class with attributes such as name, grams, price per kilo, and total price. The post initializer will be used to calculate the total price based on the grams and price per kilo after the original initializer is called.","sidebar":"guideSidebar"},"guide/Errors/Else_Finally/README":{"id":"guide/Errors/Else_Finally/README","title":"Exception Handling in Python: Using else and finally Blocks","description":"In the previous lesson, we delved into the basics of exception handling in Python, primarily utilizing the try and except blocks. However, Python provides additional constructs to enhance error handling capabilities: else and finally blocks. In this tutorial, we\'ll explore these blocks in detail with practical examples.","sidebar":"guideSidebar"},"guide/Errors/Letters_Only/README":{"id":"guide/Errors/Letters_Only/README","title":"Letters_Only","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Errors/Raise/README":{"id":"guide/Errors/Raise/README","title":"Manually Raising Exceptions in Python","description":"Errors are inevitable in programming, but understanding them is crucial for improving your skills. Python provides a mechanism to manually raise exceptions when needed, allowing you to handle unforeseen scenarios effectively. In this tutorial, we\'ll delve into the concept of raising exceptions manually with detailed explanations and code snippets.","sidebar":"guideSidebar"},"guide/Errors/Try_Except/README":{"id":"guide/Errors/Try_Except/README","title":"Handling Exceptions","description":"In this tutorial, we will explore how to handle exceptions in Python using the try and except blocks. We\'ll start by understanding the basic syntax and then delve into practical examples to demonstrate their usage.","sidebar":"guideSidebar"},"guide/Errors/Unknown_Errors/README":{"id":"guide/Errors/Unknown_Errors/README","title":"Unknown_Errors","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Errors/User_Input/README":{"id":"guide/Errors/User_Input/README","title":"User Input","description":"Handling user input in Python is essential, but it can also be a source of potential errors if not handled properly. In this tutorial, we\'ll cover how to take user input safely and handle various scenarios using exception handling. We\'ll illustrate this with a simple calculator program.","sidebar":"guideSidebar"},"guide/File-Management/Caching-JSON":{"id":"guide/File-Management/Caching-JSON","title":"Creating a JSON Cache for API Data in Python","description":"In this tutorial, we\'ll learn how to create a JSON cache for API data in Python. This will help us avoid making repetitive requests to the API by storing the fetched data locally. We\'ll be using the requests library for making HTTP requests and the json module for handling JSON data.","sidebar":"guideSidebar"},"guide/File-Management/Deleting_Files":{"id":"guide/File-Management/Deleting_Files","title":"Deleting_Files","description":"","sidebar":"guideSidebar"},"guide/File-Management/File-Handling":{"id":"guide/File-Management/File-Handling","title":"File Handling in Python","description":"In this tutorial, we\'ll delve into the fundamentals of file handling in Python. Whether you\'re dealing with text files, JSON files, or images, understanding how to interact with files programmatically is essential. We\'ll cover basic file operations such as creating, reading, writing, and appending to files.","sidebar":"guideSidebar"},"guide/File-Management/Glob":{"id":"guide/File-Management/Glob","title":"Glob","description":"Exploring Files with the Globe Module in Python","sidebar":"guideSidebar"},"guide/File-Management/Handling-JSON":{"id":"guide/File-Management/Handling-JSON","title":"Handling-JSON","description":"","sidebar":"guideSidebar"},"guide/File-Management/JSON":{"id":"guide/File-Management/JSON","title":"JSON","description":"","sidebar":"guideSidebar"},"guide/File-Management/Pickling":{"id":"guide/File-Management/Pickling","title":"Pickling","description":"Pickling in Python - Serialization and Deserialization","sidebar":"guideSidebar"},"guide/File-Management/Reading-Files":{"id":"guide/File-Management/Reading-Files","title":"File Handling with the with Statement in Python","description":"In this tutorial, we\'ll explore how to handle files in Python using the with statement along with the open() function. This approach ensures clean opening and closing of files, eliminating the need to manually call the close() method. We\'ll cover reading text from files, reading lines, creating a list from lines, and the benefits of using the with statement for file handling.","sidebar":"guideSidebar"},"guide/File-Management/toml":{"id":"guide/File-Management/toml","title":"toml","description":"Using YAML with Python","sidebar":"guideSidebar"},"guide/File-Management/Writing-Creating-Files":{"id":"guide/File-Management/Writing-Creating-Files","title":"File Manipulation Tutorial","description":"In this tutorial, we will learn how to manipulate text files in Python, including reading, writing, and appending text. We will cover different modes of file operations and how to handle them effectively.","sidebar":"guideSidebar"},"guide/File-Management/yaml":{"id":"guide/File-Management/yaml","title":"yaml","description":"Using YAML with Python","sidebar":"guideSidebar"},"guide/Functions/Args_and_Kwargs/README":{"id":"guide/Functions/Args_and_Kwargs/README","title":"Args_and_Kwargs","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Functions/Chat_Bot/README":{"id":"guide/Functions/Chat_Bot/README","title":"Chat_Bot","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Functions/Creating_a_Function/README":{"id":"guide/Functions/Creating_a_Function/README","title":"Python Functions Tutorial","description":"In this tutorial, we\'ll explore the basics of creating and using functions in Python. Functions play a crucial role in enhancing the readability, reusability, and maintainability of your code.","sidebar":"guideSidebar"},"guide/Functions/Parameters_and_Arguments/README":{"id":"guide/Functions/Parameters_and_Arguments/README","title":"Python Function Parameters and Defaults Tutorial","description":"In this tutorial, we\'ll explore how to use parameters and default values in Python functions to make them more flexible and customizable.","sidebar":"guideSidebar"},"guide/Functions/Pass/README":{"id":"guide/Functions/Pass/README","title":"Pass","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Functions/Recursion/README":{"id":"guide/Functions/Recursion/README","title":"Recursion","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Functions/Return_Functions/README":{"id":"guide/Functions/Return_Functions/README","title":"Python Functions and Return Values Tutorial","description":"In this tutorial, we will explore the concept of return values in Python functions. Return values allow us to obtain results from a function and use them elsewhere in our program.","sidebar":"guideSidebar"},"guide/Functions/Star_and_Slash/README":{"id":"guide/Functions/Star_and_Slash/README","title":"Star_and_Slash","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/getting-started":{"id":"guide/getting-started","title":"Getting Started","description":"1. Python Basics \ud83d\udcda","sidebar":"guideSidebar"},"guide/Lists/Dont_Loop_Modify":{"id":"guide/Lists/Dont_Loop_Modify","title":"Looping and Modifying Lists: A Cautionary Tale","description":"When working with lists in Python, it\'s crucial to be mindful of how you manipulate them, especially when looping through them. This README serves as a cautionary tale and provides guidance on best practices to avoid unexpected behavior when modifying lists during iteration.","sidebar":"guideSidebar"},"guide/Lists/getting-started":{"id":"guide/Lists/getting-started","title":"getting-started","description":"","sidebar":"guideSidebar"},"guide/Lists/Grocery_List":{"id":"guide/Lists/Grocery_List","title":"Grocery List App","description":"This Python project implements a simple grocery list application where users can add, remove, list, and exit items from their grocery list.","sidebar":"guideSidebar"},"guide/Lists/List_Comprehensions":{"id":"guide/Lists/List_Comprehensions","title":"List Comprehensions Explained","description":"List comprehensions might seem daunting at first, but once you grasp their power, you\'ll find them indispensable in your Python programming toolkit. They allow for concise and efficient creation of lists, reducing the amount of code needed for simple list operations.","sidebar":"guideSidebar"},"guide/Lists/Slicing":{"id":"guide/Lists/Slicing","title":"Slicing in Python","description":"Slicing in Python is a powerful technique used to extract specific sections of data from sequences such as lists, tuples, and strings. This guide aims to illustrate various slicing techniques and syntax to manipulate data effectively.","sidebar":"guideSidebar"},"guide/Modules/if_name_main/README":{"id":"guide/Modules/if_name_main/README","title":"README","description":"if name == \\"main\\"","sidebar":"guideSidebar"},"guide/Modules/Importing/README":{"id":"guide/Modules/Importing/README","title":"Avoiding Star Imports in Python","description":"Star imports in Python, such as from module import *, can be convenient but are often discouraged due to their potential to cause conflicts and obscure the origin of imported names. While they might seem harmless in small projects or simple scripts, they can lead to unexpected behavior as projects grow in complexity. This README outlines the risks associated with star imports and provides guidance on how to avoid them.","sidebar":"guideSidebar"},"guide/Modules/Libraries/README":{"id":"guide/Modules/Libraries/README","title":"Python Library vs Package","description":"This repository serves as an explanatory guide on the distinctions between Python libraries and packages, often used interchangeably but carrying specific meanings within the Python ecosystem.","sidebar":"guideSidebar"},"guide/Modules/Modules/README":{"id":"guide/Modules/Modules/README","title":"Python Modules","description":"This document provides an overview of Python modules, including what they are, how to create them, and various methods of importing and using them in your Python scripts.","sidebar":"guideSidebar"},"guide/Modules/Packages/code/README":{"id":"guide/Modules/Packages/code/README","title":"Creating and Using Python Packages","description":"Welcome to this guide on creating and using Python packages! In this tutorial, we\'ll walk through the process of creating your own Python package, which is essentially a collection of modules organized within a directory. Packages are a fundamental concept in Python development, allowing you to organize and distribute your code more efficiently.","sidebar":"guideSidebar"},"guide/Modules/Website_Status/README":{"id":"guide/Modules/Website_Status/README","title":"Website Status Project","description":"This project aims to create a simple website status checker in Python. The program allows users to input a URL and provides information about the status of the website, including its online status, response code, presence of links, encoding, and whether it\'s a redirect or a permanent redirect.","sidebar":"guideSidebar"},"guide/Multiprocessing/Data-Sharing-Issue":{"id":"guide/Multiprocessing/Data-Sharing-Issue","title":"Data-Sharing-Issue","description":"","sidebar":"guideSidebar"},"guide/Multiprocessing/Intro":{"id":"guide/Multiprocessing/Intro","title":"Introduction","description":"In this tutorial, we will explore the concepts of asynchronous programming, multithreading, and multiprocessing in Python. This foundational knowledge is essential for efficient and effective utilization of Python\u2019s concurrency capabilities. The following sections provide an in-depth comparison of these paradigms, followed by practical code examples to illustrate their usage.","sidebar":"guideSidebar"},"guide/Multiprocessing/Lock-Semaphores":{"id":"guide/Multiprocessing/Lock-Semaphores","title":"Lock-Semaphores","description":"","sidebar":"guideSidebar"},"guide/Multiprocessing/Pipes":{"id":"guide/Multiprocessing/Pipes","title":"Pipes","description":"","sidebar":"guideSidebar"},"guide/Multiprocessing/Pools-Map":{"id":"guide/Multiprocessing/Pools-Map","title":"Process Pools","description":"In this tutorial, we will explore the use of process pools in Python to efficiently distribute computational tasks across multiple CPU cores. By utilizing the multiprocessing module, we can run multiple computations in parallel, significantly reducing the execution time for CPU-bound tasks. This guide will walk through creating a process pool, mapping tasks to it, and understanding the impact of core availability on task execution.","sidebar":"guideSidebar"},"guide/Multiprocessing/Pools-Multiple-Functions":{"id":"guide/Multiprocessing/Pools-Multiple-Functions","title":"Pools-Multiple-Functions","description":"","sidebar":"guideSidebar"},"guide/Multiprocessing/Pools-Starmap":{"id":"guide/Multiprocessing/Pools-Starmap","title":"Pools-Starmap","description":"","sidebar":"guideSidebar"},"guide/Multiprocessing/Processes":{"id":"guide/Multiprocessing/Processes","title":"Multiprocessing","description":"This tutorial addresses the implementation of multiprocessing in Python to enhance program performance. It will also compare multiprocessing with threading to highlight the differences and appropriate use cases. The tutorial includes creating helper scripts for timing functions, generating timestamps, and simulating time-consuming operations. These scripts will be integrated into a main program utilizing Python\'s multiprocessing module.","sidebar":"guideSidebar"},"guide/Multiprocessing/Queues":{"id":"guide/Multiprocessing/Queues","title":"Queues","description":"","sidebar":"guideSidebar"},"guide/Multithreading/Daemon-Threads":{"id":"guide/Multithreading/Daemon-Threads","title":"Daemon-Threads","description":"","sidebar":"guideSidebar"},"guide/Multithreading/Locks":{"id":"guide/Multithreading/Locks","title":"Locks","description":"","sidebar":"guideSidebar"},"guide/Multithreading/Race-Conditions":{"id":"guide/Multithreading/Race-Conditions","title":"Race-Conditions","description":"","sidebar":"guideSidebar"},"guide/Multithreading/Semaphores":{"id":"guide/Multithreading/Semaphores","title":"Semaphores","description":"","sidebar":"guideSidebar"},"guide/Multithreading/Threads":{"id":"guide/Multithreading/Threads","title":"Threads","description":"In this tutorial, we will delve into the concepts of multithreading in Python. Before we proceed, it\'s recommended to have a basic understanding of asynchronous programming, as we will be drawing comparisons between the two concepts.","sidebar":"guideSidebar"},"guide/Multithreading/With-Lock-Semaphore":{"id":"guide/Multithreading/With-Lock-Semaphore","title":"With-Lock-Semaphore","description":"","sidebar":"guideSidebar"},"guide/OOP/@abstractmethod":{"id":"guide/OOP/@abstractmethod","title":"Abstract Methods and Classes","description":"This tutorial provides an in-depth exploration of abstract methods and abstract classes in Python. These concepts are essential for creating structured and reusable code in object-oriented programming. Abstract classes allow developers to define blueprints for other classes, enforcing a consistent interface without implementing the functionality themselves. This ensures that derived classes adhere to a specific structure, which can be critical in larger and more complex software systems.","sidebar":"guideSidebar"},"guide/OOP/@classmethod":{"id":"guide/OOP/@classmethod","title":"Classes and Instances","description":"A class in Python serves as a blueprint for creating objects (instances). Each object is an instance of a class and can have attributes (data) and methods (functions) that define its behavior.","sidebar":"guideSidebar"},"guide/OOP/@staticmethod":{"id":"guide/OOP/@staticmethod","title":"@staticmethod","description":"In Python, methods within a class can be defined in various ways depending on their intended use. Among these, the @staticmethod decorator is used to define methods that do not operate on an instance of the class or the class itself. This tutorial will cover the functionality, use cases, and implementation of @staticmethod, along with a critical examination of its benefits and limitations.","sidebar":"guideSidebar"},"guide/OOP/Attributes_Class_and_Instance":{"id":"guide/OOP/Attributes_Class_and_Instance","title":"Class and Instance Attributes","description":"In object-oriented programming, classes and instances play a pivotal role. Python, being an object-oriented language, leverages classes to define objects and their behavior. An important aspect of this paradigm is understanding the distinction between class attributes and instance attributes. This tutorial will provide a comprehensive examination of these concepts, their differences, and how to utilize them effectively in Python.","sidebar":"guideSidebar"},"guide/OOP/Classes_and_Objects":{"id":"guide/OOP/Classes_and_Objects","title":"Classes and Objects","description":"Object-oriented programming (OOP) is a programming paradigm that uses \\"objects\\" to model real-world entities. These objects are instances of \\"classes,\\" which can be thought of as blueprints for creating specific types of objects. In this tutorial, we will explore the basics of classes and objects in Python by developing a program that models cars.","sidebar":"guideSidebar"},"guide/OOP/Dunder_Methods":{"id":"guide/OOP/Dunder_Methods","title":"Dunder Methods","description":"In this tutorial, we will explore the concept of dunder methods, also known as magic methods, and their application in Python classes. Dunder methods, short for \\"double underscore\\" methods, are special methods with double leading and trailing underscores (e.g., init). These methods are integral to defining the behavior of objects in Python. While we\'ve already encountered the init method for initializing instances, we will delve deeper into other dunder methods that enhance the functionality and interactivity of our classes.","sidebar":"guideSidebar"},"guide/OOP/eq__()":{"id":"guide/OOP/eq__()","title":"__eq__ Method","description":"Object-oriented programming (OOP) in Python offers a powerful way to structure and organize code. One essential aspect of OOP is the ability to compare objects meaningfully. By default, Python compares objects based on their memory addresses, which might not always be the desired behavior, especially when dealing with objects that encapsulate data. To customize this comparison, Python provides the eq method, also known as the equality dunder method.","sidebar":"guideSidebar"},"guide/OOP/Inheritance":{"id":"guide/OOP/Inheritance","title":"Inheritance","description":"Object-Oriented Programming is a programming paradigm that uses objects and classes to organize and structure code. It allows for modularity, reusability, and abstraction. Python, as an object-oriented language, supports OOP features, including inheritance, polymorphism, encapsulation, and abstraction. This tutorial will focus on the principles of OOP, specifically inheritance, in Python.","sidebar":"guideSidebar"},"guide/OOP/init":{"id":"guide/OOP/init","title":"__init__ Method","description":"In Python, the init method is a crucial part of object initialization within a class. Often referred to as a constructor, this special method gets called automatically when an object is created, enabling the setup of initial values and other necessary actions. This tutorial aims to provide a comprehensive understanding of the init method and its significance in Python programming.","sidebar":"guideSidebar"},"guide/OOP/Methods_Functions":{"id":"guide/OOP/Methods_Functions","title":"Functions and Methods","description":"In Python, functions and methods are fundamental constructs that enable code modularity, reusability, and organization. While they might seem similar at first glance, they have distinct characteristics and use cases. This tutorial provides a comprehensive explanation of functions and methods, highlighting their differences through examples.","sidebar":"guideSidebar"},"guide/OOP/Name_Mangling":{"id":"guide/OOP/Name_Mangling","title":"Name Mangling","description":"Name mangling is a mechanism in Python to ensure that the names of class attributes are unique and not easily accessible outside their defining class. This feature is particularly useful for encapsulating data and preventing name clashes in inheritance hierarchies.","sidebar":"guideSidebar"},"guide/OOP/OOP":{"id":"guide/OOP/OOP","title":"Object Oriented Programming","description":"OOP is a programming paradigm that changes our approach to coding by organizing data and functionality into reusable structures called classes.","sidebar":"guideSidebar"},"guide/OOP/self":{"id":"guide/OOP/self","title":"self Parameter","description":"In Python, the self parameter is an integral part of defining instance methods in a class. It allows each instance of the class to keep its own data and functionality separate from other instances. This tutorial aims to provide a comprehensive understanding of the self parameter and its importance in Python object-oriented programming.","sidebar":"guideSidebar"},"guide/OOP/str()_repr()":{"id":"guide/OOP/str()_repr()","title":"str() and repr()","description":"In Python, str() and repr() are two functions that convert an object into a string. However, they serve distinct purposes and are used in different contexts. Understanding the differences between them is crucial for writing clear and effective Python code. This tutorial provides an in-depth examination of str() and repr(), illustrating their uses and differences with code snippets and examples.","sidebar":"guideSidebar"},"guide/OOP/super()":{"id":"guide/OOP/super()","title":"super()","description":"In Python\'s Object-Oriented Programming (OOP) paradigm, the super() function is a crucial component for managing class inheritance hierarchies. This tutorial aims to provide a comprehensive and detailed explanation of super(), its use cases, and potential pitfalls.","sidebar":"guideSidebar"},"guide/Python_Basics/Assertions":{"id":"guide/Python_Basics/Assertions","title":"Assertions","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Python_Basics/Booleans":{"id":"guide/Python_Basics/Booleans","title":"Boolean Data Type","description":"In Python, a boolean is a data type used to represent true and false values. It is particularly useful for expressing conditions and making decisions in your code. Booleans are often encountered when working with comparison operators and conditional statements.","sidebar":"guideSidebar"},"guide/Python_Basics/Comments":{"id":"guide/Python_Basics/Comments","title":"Clean Code and Commenting Practices","description":"In this guide, we\'ll explore the use of comments in Python code and the importance of maintaining clean and readable code. While it\'s crucial to write code that is self-explanatory, comments can be valuable for adding context or reminders.","sidebar":"guideSidebar"},"guide/Python_Basics/Comparing_Floats":{"id":"guide/Python_Basics/Comparing_Floats","title":"Floating Point Precision in Python","description":"Floating-point arithmetic is a fundamental aspect of computational mathematics, yet it presents challenges due to the limitations of precision in representing real numbers. This tutorial critically examines these challenges within the Python programming language and provides rigorous solutions for addressing them using the isclose function from the math module.","sidebar":"guideSidebar"},"guide/Python_Basics/Constants":{"id":"guide/Python_Basics/Constants","title":"Constants","description":"In Python, constants are not explicitly defined, but we rely on a naming convention to indicate that a variable should be treated as a constant, meaning its value should not be changed throughout the program. Typically, constant variable names are written in uppercase characters.","sidebar":"guideSidebar"},"guide/Python_Basics/Data_Types":{"id":"guide/Python_Basics/Data_Types","title":"Data Types","description":"In Python, data types are crucial for defining the nature of values, allowing logical operations with compatible values. This README provides an overview of the most common data types in Python along with code snippets and examples.","sidebar":"guideSidebar"},"guide/Python_Basics/Dictionaries":{"id":"guide/Python_Basics/Dictionaries","title":"Dictionary","description":"In Python, dictionaries provide a convenient way to store data using a key-value pair structure. This part introduces you to the basics of dictionaries and includes code snippets with examples.","sidebar":"guideSidebar"},"guide/Python_Basics/Doc_Strings":{"id":"guide/Python_Basics/Doc_Strings","title":"Doc Strings","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Python_Basics/F-Strings":{"id":"guide/Python_Basics/F-Strings","title":"F-Strings","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Python_Basics/Floats":{"id":"guide/Python_Basics/Floats","title":"Floats","description":"In this lesson, we will explore the use of decimal numbers, or floats, in Python. Floats are used to represent numbers with decimal points.","sidebar":"guideSidebar"},"guide/Python_Basics/Frozensets":{"id":"guide/Python_Basics/Frozensets","title":"Frozen Sets","description":"Frozen sets are a special data type in Python that is similar to sets but comes with the added feature of immutability. Once a frozen set is created, its elements cannot be modified or changed, making it a suitable choice when you want to ensure the integrity of your data. This immutability also contributes to slightly better memory efficiency, akin to the distinction between tuples and lists.","sidebar":"guideSidebar"},"guide/Python_Basics/Global":{"id":"guide/Python_Basics/Global","title":"Global","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Python_Basics/Integers":{"id":"guide/Python_Basics/Integers","title":"Integer Data Type","description":"In this repository, we\'ll explore Python data types in more detail, focusing on the integer data type. Each data type will be explained thoroughly with code snippets and examples.","sidebar":"guideSidebar"},"guide/Python_Basics/Lists":{"id":"guide/Python_Basics/Lists","title":"Lists","description":"Lists are a versatile data type in Python that allows you to create structures to hold and manipulate elements. In Python, lists are incredibly flexible, allowing you to include elements of various data types.","sidebar":"guideSidebar"},"guide/Python_Basics/Mad_Libs_Project":{"id":"guide/Python_Basics/Mad_Libs_Project","title":"Mad Libs Game","description":"In this project, we\'ll be creating a simple Mad Libs game. Mad Libs is a story-based game where users provide various words like nouns, names, and verbs, and those words are then inserted into a pre-made story to create a humorous and often nonsensical result.","sidebar":"guideSidebar"},"guide/Python_Basics/None":{"id":"guide/Python_Basics/None","title":"None Type in Python","description":"The None type in Python is a special data type used to represent the absence of a value or the concept of nothing. It is often returned by certain functions to indicate that no meaningful value is available.","sidebar":"guideSidebar"},"guide/Python_Basics/Nonlocal":{"id":"guide/Python_Basics/Nonlocal","title":"Nonlocal","description":"Write your description or instructions here.","sidebar":"guideSidebar"},"guide/Python_Basics/Operators":{"id":"guide/Python_Basics/Operators","title":"Numeric Operations","description":"In this example, we\'ll explore the various arithmetic operators available in Python for numeric data types. We\'ll cover basic arithmetic operators, floor division, exponentiation, modulus, and introduce assignment operators for efficient coding.","sidebar":"guideSidebar"},"guide/Python_Basics/Scopes":{"id":"guide/Python_Basics/Scopes","title":"Understanding Python Scopes","description":"In Python, scopes define the accessibility and lifespan of variables within different regions of a program. Scoping rules determine how variables and names are resolved in nested contexts, affecting how values are assigned, modified, and accessed throughout the code. Understanding Python\'s scope mechanism is crucial for writing clean, maintainable, and bug-free code. This tutorial provides an in-depth explanation of Python scopes, supplemented by illustrative code snippets.","sidebar":"guideSidebar"},"guide/Python_Basics/Sets":{"id":"guide/Python_Basics/Sets","title":"Sets","description":"In Python, sets are a data type similar to lists but with distinct characteristics. Sets have no guaranteed order, and they cannot contain duplicate elements. This makes sets useful for situations where uniqueness and order are not crucial, and you need to perform operations like adding and removing elements efficiently.","sidebar":"guideSidebar"},"guide/Python_Basics/Shortcut_Format":{"id":"guide/Python_Basics/Shortcut_Format","title":"Shortcut","description":"Have you ever found yourself typing Python code in a hurry, only to realize later that it looks messy and lacks proper formatting? Well, fear not! This README introduces a handy shortcut to quickly format your code and make it more readable.","sidebar":"guideSidebar"},"guide/Python_Basics/Simple_Adder_Project":{"id":"guide/Python_Basics/Simple_Adder_Project","title":"Simple Adder Program","description":"This Python program allows you to add two numbers of your choice. Follow the instructions to input values for \'a\' and \'b\', and the program will display the result.","sidebar":"guideSidebar"},"guide/Python_Basics/Strings":{"id":"guide/Python_Basics/Strings","title":"Strings","description":"In Python, strings are used to represent textual data. A string is essentially a sequence of characters. You can create strings by enclosing text within either single quotation marks (\') or double quotation marks (\\"). The choice between single and double quotes is a matter of personal preference, as Python treats them interchangeably.","sidebar":"guideSidebar"},"guide/Python_Basics/Syntax":{"id":"guide/Python_Basics/Syntax","title":"Syntax","description":"Understanding Python Syntax","sidebar":"guideSidebar"},"guide/Python_Basics/Truthy_and_Falsy":{"id":"guide/Python_Basics/Truthy_and_Falsy","title":"Truthy and Falsy Values in Python","description":"In Python, every object can be categorized as either truthy or falsy. While the most explicit examples are the True and False booleans, it\'s important to note that these booleans are essentially constants representing 1 and 0, respectively. You can use any non-zero number as truthy and zero as falsy. For instance, using 1 instead of True and 0 instead of False is completely valid.","sidebar":"guideSidebar"},"guide/Python_Basics/Tuples":{"id":"guide/Python_Basics/Tuples","title":"Tuple","description":"In Python, tuples are similar to lists but with a key difference - they are immutable. Once a tuple is created, it cannot be modified, making them more memory-efficient. The defining factor for a tuple is the comma (,), not the parentheses. While tuples are often seen wrapped in parentheses, it\'s the comma that denotes the tuple.","sidebar":"guideSidebar"},"guide/Python_Basics/Type_Conversion":{"id":"guide/Python_Basics/Type_Conversion","title":"Type Conversion","description":"Type conversion is essential when dealing with incompatible data types that need to be used together in operations. Python provides straightforward ways to convert between different data types.","sidebar":"guideSidebar"},"guide/Python_Basics/Type_Hints":{"id":"guide/Python_Basics/Type_Hints","title":"Dynamic Typing and Type Hints","description":"Python is a dynamically typed language, allowing flexibility in changing variable types during program execution. However, it\'s good practice to use type hints or annotations to make code more explicit and catch potential errors early on.","sidebar":"guideSidebar"},"guide/Python_Basics/Unpacking":{"id":"guide/Python_Basics/Unpacking","title":"Unpacking in Python","description":"Unpacking in Python is a powerful feature that allows developers to assign values from iterables (such as lists, tuples, and strings) to multiple variables in a single statement. This tutorial provides an in-depth understanding of how unpacking works, its various applications, and the potential pitfalls to avoid. By the end of this guide, you will have a thorough understanding of how to utilize unpacking effectively in your Python programs.","sidebar":"guideSidebar"},"guide/Python_Basics/Variables":{"id":"guide/Python_Basics/Variables","title":"Variables","description":"One of the fundamental principles in programming is reusability. We strive to create code that can be easily adapted and reused across various scenarios. The use of variables is a powerful concept that significantly enhances the reusability of our code.","sidebar":"guideSidebar"},"guide/Python_Basics/VS_Is":{"id":"guide/Python_Basics/VS_Is","title":"Understanding Equality vs. Identity in Python","description":"One common mistake among beginners learning Python is the confusion between the equality operator (==) and the identity operator (is). While they serve similar purposes, their usage and behavior are distinctly different. This tutorial will elucidate these differences, illustrate their correct applications, and highlight common pitfalls.","sidebar":"guideSidebar"},"guide/Unit-Testing/Conftest":{"id":"guide/Unit-Testing/Conftest","title":"Using conftest.py in Pytest","description":"Overview","sidebar":"guideSidebar"},"guide/Unit-Testing/Fixtures":{"id":"guide/Unit-Testing/Fixtures","title":"Using Fixtures in Pytest","description":"Introduction","sidebar":"guideSidebar"},"guide/Unit-Testing/Intro":{"id":"guide/Unit-Testing/Intro","title":"Unit Testing","description":"Unit testing is a crucial aspect of software development that ensures individual units of code work as expected. This guide will provide a thorough understanding of unit testing in Python, the benefits it offers, and practical implementation using the pytest framework.","sidebar":"guideSidebar"},"guide/Unit-Testing/Marks":{"id":"guide/Unit-Testing/Marks","title":"Marks","description":"","sidebar":"guideSidebar"},"guide/Unit-Testing/Parametrize":{"id":"guide/Unit-Testing/Parametrize","title":"Parametrize","description":"","sidebar":"guideSidebar"},"guide/Unit-Testing/TestingErrors":{"id":"guide/Unit-Testing/TestingErrors","title":"Testing Errors","description":"","sidebar":"guideSidebar"},"rest-api/Building-REST-API/08":{"id":"rest-api/Building-REST-API/08","title":"Interacting with REST APIs and Python","description":"In this tutorial, we will focus on how to interact with REST APIs using Python. This involves making HTTP requests to APIs and handling the responses. We\u2019ll use the requests library, a popular Python library for making HTTP requests, to demonstrate how to interact with APIs effectively.","sidebar":"restAPISidebar"},"rest-api/Building-REST-API/adding_urls":{"id":"rest-api/Building-REST-API/adding_urls","title":"Adding URLs and Using the DRF API","description":"In this tutorial, we will learn how to configure URLs for your Django Rest Framework (DRF) API and use the API endpoints to interact with your data. We will cover:","sidebar":"restAPISidebar"},"rest-api/Building-REST-API/building_rest_api":{"id":"rest-api/Building-REST-API/building_rest_api","title":"Building REST APIs with Flask","description":"In this tutorial, we\'ll explore how to build REST APIs using Flask, a popular micro-framework for Python. Flask is lightweight and flexible, making it an excellent choice for developing simple yet powerful APIs.","sidebar":"restAPISidebar"},"rest-api/Building-REST-API/django_rest":{"id":"rest-api/Building-REST-API/django_rest","title":"Getting to Know Django Rest Framework (DRF)","description":"In this tutorial, we will dive into Django Rest Framework (DRF), a powerful toolkit for building Web APIs in Django. DRF simplifies the process of creating RESTful APIs and provides features like serialization, authentication, and viewsets.","sidebar":"restAPISidebar"},"rest-api/Building-REST-API/expanding_using_flask":{"id":"rest-api/Building-REST-API/expanding_using_flask","title":"Expanding and Using Flask App","description":"In this tutorial, we will expand on our basic Flask application by adding more features and organizing the code for better scalability and maintainability. We will cover:","sidebar":"restAPISidebar"},"rest-api/Building-REST-API/fastapi":{"id":"rest-api/Building-REST-API/fastapi","title":"Using the FastAPI API","description":"In this tutorial, we will explore how to interact with the FastAPI application you built. We\u2019ll cover how to make requests to your FastAPI API, how to use interactive documentation, and how to handle responses and errors.","sidebar":"restAPISidebar"},"rest-api/Building-REST-API/loading_serializing_drf":{"id":"rest-api/Building-REST-API/loading_serializing_drf","title":"Loading and Serializing Data With DRF","description":"In this tutorial, we will explore how to load and serialize data using Django Rest Framework (DRF). Serialization is a key feature of DRF that allows you to convert complex data types such as Django models into JSON, XML, or other content types, and vice versa.","sidebar":"restAPISidebar"},"rest-api/Building-REST-API/using_fastapi":{"id":"rest-api/Building-REST-API/using_fastapi","title":"Using FastAPI","description":"In this tutorial, we will explore FastAPI, a modern, fast (high-performance) web framework for building APIs with Python. FastAPI is known for its speed and ease of use, leveraging Python type hints for validation and serialization.","sidebar":"restAPISidebar"},"rest-api/CRUD":{"id":"rest-api/CRUD","title":"CRUD","description":"Overview","sidebar":"restAPISidebar"},"rest-api/Designing-REST-API/designing_data_exchange":{"id":"rest-api/Designing-REST-API/designing_data_exchange","title":"Designing Data Exchange and Responses","description":"In this chapter, we will focus on designing data exchange and responses for RESTful APIs. Properly structuring responses and handling data formats are crucial for ensuring that your API is efficient, user-friendly, and easily integrable.","sidebar":"restAPISidebar"},"rest-api/Designing-REST-API/designing_error_responses":{"id":"rest-api/Designing-REST-API/designing_error_responses","title":"Designing Error Responses","description":"In this tutorial, we\'ll cover best practices for designing error responses in RESTful APIs. Proper error handling is crucial for providing a good developer experience and ensuring that clients can effectively troubleshoot issues.","sidebar":"restAPISidebar"},"rest-api/Designing-REST-API/designing_rest_api":{"id":"rest-api/Designing-REST-API/designing_rest_api","title":"Designing REST APIs","description":"In this chapter, we will explore the key principles and best practices for designing RESTful APIs. A well-designed REST API is intuitive, easy to use, scalable, and maintainable. By following these guidelines, you can create APIs that meet the needs of developers and end-users alike.","sidebar":"restAPISidebar"},"rest-api/Designing-REST-API/get_post":{"id":"rest-api/Designing-REST-API/get_post","title":"Consuming APIs - GET and POST","description":"In this chapter, we will focus on how to consume REST APIs using Python, specifically using the requests library. We will cover how to perform GET and POST requests, which are fundamental for retrieving and sending data to APIs.","sidebar":"restAPISidebar"},"rest-api/Designing-REST-API/interacting_with_rest":{"id":"rest-api/Designing-REST-API/interacting_with_rest","title":"Interacting With REST APIs and Python","description":"Welcome to the tutorial on interacting with REST APIs using Python. In this guide, we\'ll explore how to work with REST APIs effectively, from making requests to handling responses. By the end of this tutorial, you\'ll have a solid foundation for integrating with REST APIs in your Python applications.","sidebar":"restAPISidebar"},"rest-api/Designing-REST-API/put_patch_delete":{"id":"rest-api/Designing-REST-API/put_patch_delete","title":"Consuming APIs - PUT, PATCH, and DELETE","description":"In this chapter, we will focus on how to consume REST APIs using Python for PUT, PATCH, and DELETE requests. These methods are used to update and delete resources, providing more control over the data in your RESTful services.","sidebar":"restAPISidebar"},"rest-api/Designing-REST-API/understanding_rest_api":{"id":"rest-api/Designing-REST-API/understanding_rest_api","title":"Understanding REST APIs","description":"This chapter explores the fundamental principles of REST APIs. Understanding these principles is key to designing, using, and integrating RESTful services effectively in your applications.","sidebar":"restAPISidebar"},"rest-api/getting-started":{"id":"rest-api/getting-started","title":"Getting Started","description":"Understanding and Designing REST APIs","sidebar":"restAPISidebar"},"tips-and-tricks/common-errors":{"id":"tips-and-tricks/common-errors","title":"10 Common Python Errors","description":"Introduction","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/critical-mistakes-to-avoid":{"id":"tips-and-tricks/critical-mistakes-to-avoid","title":"5 Critical Python Mistakes to Avoid","description":"In this tutorial, we will delve into five common mistakes that many Python developers make, especially when starting out. Avoiding these mistakes will help you write more efficient, readable, and reliable code.","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/decorators":{"id":"tips-and-tricks/decorators","title":"5 Useful Python Decorators","description":"In this tutorial, we\'ll explore various decorators, both custom-made and built-in, that can enhance the functionality and efficiency of your Python code. Each decorator serves a specific purpose, ranging from retrying failed operations to deprecating functions and handling program termination gracefully.","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/dont-dry":{"id":"tips-and-tricks/dont-dry","title":"Be CAREFUL With Removing Code Duplication","description":"Introduction","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/dunder-methods":{"id":"tips-and-tricks/dunder-methods","title":"5 Useful Dunder Methods in Python","description":"Dunder methods, short for \\"double underscore\\" methods, are special methods in Python classes that provide functionality for various operations. In this tutorial, we\'ll explore five useful Dunder methods with code snippets based on the transcript of a video tutorial.","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/easter-eggs":{"id":"tips-and-tricks/easter-eggs","title":"5 Fun Python Easter Eggs","description":"Welcome to this comprehensive tutorial on five fun and famous Python Easter eggs that every Python developer should know. Whether you\'re new to Python or have been using it for a while, these Easter eggs are sure to amuse and surprise you. Let\'s dive in!","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/F-String-Tricks":{"id":"tips-and-tricks/F-String-Tricks","title":"5 Useful F-String Tricks in Python","description":"F-strings, introduced in Python 3.6, are a significant enhancement in Python\u2019s string formatting capabilities. They allow for more readable and concise code, providing various powerful features that make string handling much more efficient. This tutorial delves into five essential F-string tricks, offering detailed examples and thorough explanations to ensure clarity and precision.","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/getting-started":{"id":"tips-and-tricks/getting-started","title":"Tips & Tricks","description":"1. 39 Keywords","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/granularity-cohesion":{"id":"tips-and-tricks/granularity-cohesion","title":"Granularity and Cohesion in Programming","description":"Granularity and cohesion are key concepts in software design that influence how you structure your code. They impact readability, maintainability, and the overall design quality of your software.","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/itemgetter":{"id":"tips-and-tricks/itemgetter","title":"\\"itemgetter\\"","description":"Python\'s itemgetter is a powerful tool that simplifies the process of extracting elements from lists, tuples, dictionaries, and other iterable objects. In this tutorial, we\'ll explore how to use itemgetter effectively with code examples.","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/iterable-iterator":{"id":"tips-and-tricks/iterable-iterator","title":"Iterable vs Iterator in Python","description":"Introduction","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/Keywords":{"id":"tips-and-tricks/Keywords","title":"39 Keywords","description":"Python is a versatile and powerful programming language known for its simplicity and readability. Understanding its keywords is essential for mastering Python. In this tutorial, we\'ll explore all 39 Python keywords, including code snippets to illustrate their usage. This comprehensive tutorial covers all 39 Python keywords, providing code snippets and explanations for each. Understanding these keywords will empower you to write efficient and effective Python code.","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/linux-commands":{"id":"tips-and-tricks/linux-commands","title":"50 Linux Terminal Commands","description":"1. whoami","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/match-case":{"id":"tips-and-tricks/match-case","title":"match-case Statement","description":"Introduction","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/methodcaller":{"id":"tips-and-tricks/methodcaller","title":"Leveraging Python\'s \\"methodcaller\\" for Efficient Data Manipulation","description":"In this tutorial, we\'ll explore the usage of Python\'s methodcaller from the operator module for efficient data manipulation tasks. methodcaller allows us to call a method on an object by name, making it particularly useful for scenarios involving repeated method calls on multiple objects.","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/methods":{"id":"tips-and-tricks/methods","title":"Comprehensive Python List Methods Tutorial","description":"Introduction","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/python-is-python3":{"id":"tips-and-tricks/python-is-python3","title":"Python not found, WTF","description":"The error message indicates that the python command is not found, which means the Python interpreter is not installed or not properly linked to the python command. Here\'s how you can resolve this issue on Ubuntu:","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/python-python3":{"id":"tips-and-tricks/python-python3","title":"Python not found, WTF!","description":"The error message indicates that the python command is not found, which means the Python interpreter is not installed or not properly linked to the python command. Here\'s how you can resolve this issue on Ubuntu:","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/rip-gil":{"id":"tips-and-tricks/rip-gil","title":"R.I.P GIL in Python 3.13: Will Python Become Faster?","description":"Introduction","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/seven-code-habbits":{"id":"tips-and-tricks/seven-code-habbits","title":"7 Coding Habits of Top 1% Programmers","description":"To become a top-tier programmer, it\'s essential to adopt specific habits rather than focusing solely on mastering multiple programming languages or knowing everything about coding. Through extensive experience in the tech industry and interactions with exceptional programmers, I have identified seven crucial habits that significantly contribute to programming success. This tutorial will guide you through these habits, providing a clear path to becoming a highly effective programmer.","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/tips-and-tricks":{"id":"tips-and-tricks/tips-and-tricks","title":"20 Essential Tips & Tricks in Python","description":"1. Swapping Variables","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/worst-Features":{"id":"tips-and-tricks/worst-Features","title":"Understanding and Addressing Python\'s 5 Worst Features","description":"Introduction:","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/wtf-is-self":{"id":"tips-and-tricks/wtf-is-self","title":"Understanding the self Parameter in Python","description":"Introduction","sidebar":"tipsAndTricksSidebar"},"tips-and-tricks/yield":{"id":"tips-and-tricks/yield","title":"What Exactly is yield from in Python?","description":"In Python, yield from is a sophisticated feature introduced in PEP 380 (Python Enhancement Proposal) that simplifies the delegation of part of a generator\'s operations to another generator. Understanding how yield from works can be a significant advantage for Python developers, particularly when working with generators and coroutines. This tutorial will provide a thorough explanation of yield from, breaking down its syntax, usage, and the scenarios where it becomes essential.","sidebar":"tipsAndTricksSidebar"}}}}')}}]);