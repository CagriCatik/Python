"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[2929],{9452:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"data-analysis/Combining_Datasets/outer_join","title":"Outer Join","description":"The outer join is a method used in Pandas to combine datasets in a way that retains all rows from both DataFrames, filling in missing values (NaN) for non-matching entries. This comprehensive approach ensures no data is left out, making it especially useful for merging datasets with overlapping and distinct entries.","source":"@site/docs/data-analysis/05_Combining_Datasets/04_outer_join.md","sourceDirName":"data-analysis/05_Combining_Datasets","slug":"/data-analysis/Combining_Datasets/outer_join","permalink":"/Python/docs/data-analysis/Combining_Datasets/outer_join","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-analysis/05_Combining_Datasets/04_outer_join.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"dataAnalysisSidebar","previous":{"title":"merge()","permalink":"/Python/docs/data-analysis/Combining_Datasets/merge()"},"next":{"title":"Inner Join","permalink":"/Python/docs/data-analysis/Combining_Datasets/inner_join"}}');var r=s(4848),a=s(8453);const t={},l="Outer Join",d={},o=[{value:"Syntax",id:"syntax",level:2},{value:"Parameters:",id:"parameters",level:3},{value:"Example: Outer Join",id:"example-outer-join",level:2},{value:"1. Data Preparation",id:"1-data-preparation",level:3},{value:"employees_2021.csv",id:"employees_2021csv",level:4},{value:"employees_2022.csv",id:"employees_2022csv",level:4},{value:"2. Basic Outer Join",id:"2-basic-outer-join",level:3},{value:"3. Adding Suffixes for Clarity",id:"3-adding-suffixes-for-clarity",level:3},{value:"4. Using the <code>indicator</code> Parameter",id:"4-using-the-indicator-parameter",level:3},{value:"5. Merging Without Specifying <code>on</code>",id:"5-merging-without-specifying-on",level:3},{value:"Key Takeaways:",id:"key-takeaways",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"outer-join",children:"Outer Join"})}),"\n",(0,r.jsx)(n.p,{children:"The outer join is a method used in Pandas to combine datasets in a way that retains all rows from both DataFrames, filling in missing values (NaN) for non-matching entries. This comprehensive approach ensures no data is left out, making it especially useful for merging datasets with overlapping and distinct entries."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"pandas.merge(left, right, how='outer', on=None, suffixes=('_x', '_y'), indicator=False, ...)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"left"})}),": DataFrame to merge."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"right"})}),": DataFrame to merge with."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"how"})}),": Join type, set to ",(0,r.jsx)(n.code,{children:'"outer"'})," for this method."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"on"})}),": Column or index level names to join on."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"suffixes"})}),": Tuple of suffixes for overlapping column names in ",(0,r.jsx)(n.code,{children:"left"})," and ",(0,r.jsx)(n.code,{children:"right"})," DataFrames."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"indicator"})}),": Adds a column that indicates the source(s) of each row (",(0,r.jsx)(n.code,{children:'"both"'}),", ",(0,r.jsx)(n.code,{children:'"left_only"'}),", or ",(0,r.jsx)(n.code,{children:'"right_only"'}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"example-outer-join",children:"Example: Outer Join"}),"\n",(0,r.jsx)(n.h3,{id:"1-data-preparation",children:"1. Data Preparation"}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s start with two datasets:"}),"\n",(0,r.jsx)(n.h4,{id:"employees_2021csv",children:"employees_2021.csv"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Salary"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"John"}),(0,r.jsx)(n.td,{children:"70000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Ava"}),(0,r.jsx)(n.td,{children:"65000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Liam"}),(0,r.jsx)(n.td,{children:"80000"})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"employees_2022csv",children:"employees_2022.csv"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Salary"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"John"}),(0,r.jsx)(n.td,{children:"75000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Maria"}),(0,r.jsx)(n.td,{children:"67000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Philip"}),(0,r.jsx)(n.td,{children:"90000"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"2-basic-outer-join",children:"2. Basic Outer Join"}),"\n",(0,r.jsx)(n.p,{children:"To retain all rows from both datasets:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pandas as pd\n\n# Load datasets\ndf1 = pd.DataFrame({"Name": ["John", "Ava", "Liam"], "Salary": [70000, 65000, 80000]})\ndf2 = pd.DataFrame({"Name": ["John", "Maria", "Philip"], "Salary": [75000, 67000, 90000]})\n\n# Perform outer join\nresult = pd.merge(df1, df2, how="outer", on="Name")\nprint(result)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"     Name  Salary_x  Salary_y\n0    John   70000.0   75000.0\n1     Ava   65000.0       NaN\n2    Liam   80000.0       NaN\n3   Maria       NaN   67000.0\n4  Philip       NaN   90000.0\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Salary_x"}),": Salary from the 2021 dataset."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Salary_y"}),": Salary from the 2022 dataset."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"3-adding-suffixes-for-clarity",children:"3. Adding Suffixes for Clarity"}),"\n",(0,r.jsx)(n.p,{children:"To make columns more descriptive:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = pd.merge(df1, df2, how="outer", on="Name", suffixes=("_2021", "_2022"))\nprint(result)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"     Name  Salary_2021  Salary_2022\n0    John      70000.0      75000.0\n1     Ava      65000.0          NaN\n2    Liam      80000.0          NaN\n3   Maria          NaN      67000.0\n4  Philip          NaN      90000.0\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"4-using-the-indicator-parameter",children:["4. Using the ",(0,r.jsx)(n.code,{children:"indicator"})," Parameter"]}),"\n",(0,r.jsx)(n.p,{children:"Add a column to track the origin of each row:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = pd.merge(df1, df2, how="outer", on="Name", indicator=True)\nprint(result)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"     Name  Salary_x  Salary_y      _merge\n0    John   70000.0   75000.0       both\n1     Ava   65000.0       NaN  left_only\n2    Liam   80000.0       NaN  left_only\n3   Maria       NaN   67000.0  right_only\n4  Philip       NaN   90000.0  right_only\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"both"})}),": Indicates rows present in both datasets."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"left_only"})}),": Rows unique to the left dataset."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"right_only"})}),": Rows unique to the right dataset."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"5-merging-without-specifying-on",children:["5. Merging Without Specifying ",(0,r.jsx)(n.code,{children:"on"})]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.code,{children:"on"})," is omitted, all overlapping columns are used as keys:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = pd.merge(df1, df2, how="outer")\nprint(result)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"     Name  Salary_x  Salary_y\n0    John   70000.0   75000.0\n1     Ava   65000.0       NaN\n2    Liam   80000.0       NaN\n3   Maria       NaN   67000.0\n4  Philip       NaN   90000.0\n"})}),"\n",(0,r.jsx)(n.p,{children:"This merges the datasets based on shared column names."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"key-takeaways",children:"Key Takeaways:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"All Data Included"}),": Outer join ensures that no rows are excluded."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Missing Values"}),": Rows without matches will have NaN in the corresponding columns."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Indicator"}),": Use the ",(0,r.jsx)(n.code,{children:"_merge"})," column for detailed origin tracking."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Suffixes"}),": Customize overlapping column names with meaningful suffixes."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["The outer join method in Pandas provides a comprehensive way to merge datasets, ensuring that all rows from both datasets are included. With features like ",(0,r.jsx)(n.code,{children:"suffixes"})," and ",(0,r.jsx)(n.code,{children:"indicator"}),", it\u2019s easy to manage and understand the resulting DataFrame. This functionality is crucial for handling complex datasets where completeness is essential."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var i=s(6540);const r={},a=i.createContext(r);function t(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);