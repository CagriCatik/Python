"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[2824],{2544:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"python-guide/Control_Flow/If_Elif_Else","title":"Control Flow and Conditional Statements in Python","description":"Understanding control flow and conditional statements is a fundamental aspect of programming in Python. This tutorial will guide you through the basics of using if, elif, and else statements to create logical decision-making processes in your code.","source":"@site/docs/python-guide/02_Control_Flow/01_If_Elif_Else.md","sourceDirName":"python-guide/02_Control_Flow","slug":"/python-guide/Control_Flow/If_Elif_Else","permalink":"/Python/docs/python-guide/Control_Flow/If_Elif_Else","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-guide/02_Control_Flow/01_If_Elif_Else.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Control Flow","permalink":"/Python/docs/category/control-flow"},"next":{"title":"Shorthand If-Else Statements","permalink":"/Python/docs/python-guide/Control_Flow/If_Else_Shorthand"}}');var o=t(4848),a=t(8453);const s={},r="Control Flow and Conditional Statements in Python",l={},d=[{value:"Variable Initialization and Basic <code>if-else</code> Statement",id:"variable-initialization-and-basic-if-else-statement",level:2},{value:"Nested and Sequential Conditions Using <code>elif</code>",id:"nested-and-sequential-conditions-using-elif",level:2},{value:"Order of Conditions",id:"order-of-conditions",level:2},{value:"Testing the Logic",id:"testing-the-logic",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"control-flow-and-conditional-statements-in-python",children:"Control Flow and Conditional Statements in Python"})}),"\n",(0,o.jsxs)(n.p,{children:["Understanding control flow and conditional statements is a fundamental aspect of programming in Python. This tutorial will guide you through the basics of using ",(0,o.jsx)(n.code,{children:"if"}),", ",(0,o.jsx)(n.code,{children:"elif"}),", and ",(0,o.jsx)(n.code,{children:"else"})," statements to create logical decision-making processes in your code."]}),"\n",(0,o.jsxs)(n.h2,{id:"variable-initialization-and-basic-if-else-statement",children:["Variable Initialization and Basic ",(0,o.jsx)(n.code,{children:"if-else"})," Statement"]}),"\n",(0,o.jsxs)(n.p,{children:["Let's begin by creating a variable called ",(0,o.jsx)(n.code,{children:"age"})," of type integer and setting it to 30:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"age = 30\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Next, we'll create logic to check if a person is old enough to enter a club. This will be done using the ",(0,o.jsx)(n.code,{children:"if-else"})," statement."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'if age >= 21:\n    print("You may enter the club.")\nelse:\n    print("You are not allowed in.")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, the condition ",(0,o.jsx)(n.code,{children:"age >= 21"})," is evaluated. If it returns ",(0,o.jsx)(n.code,{children:"True"}),', the message "You may enter the club." is printed. Otherwise, the message "You are not allowed in." is printed. Python uses indentation to define code blocks, typically with four spaces per indentation level.']}),"\n",(0,o.jsxs)(n.h2,{id:"nested-and-sequential-conditions-using-elif",children:["Nested and Sequential Conditions Using ",(0,o.jsx)(n.code,{children:"elif"})]}),"\n",(0,o.jsx)(n.p,{children:"We can introduce more complexity by checking multiple conditions. Consider the following example where we check the weather:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'weather = "cloudy"\n\nif weather == "clear":\n    print("It is a nice day.")\nelif weather == "cloudy":\n    print("The weather could be better.")\nelif weather == "rainy":\n    print("What an awful day.")\nelse:\n    print("Unknown weather.")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Here, we have multiple conditions to evaluate. The program checks each condition in sequence until one returns ",(0,o.jsx)(n.code,{children:"True"}),". If no conditions are met, the ",(0,o.jsx)(n.code,{children:"else"})," block is executed."]}),"\n",(0,o.jsx)(n.h2,{id:"order-of-conditions",children:"Order of Conditions"}),"\n",(0,o.jsxs)(n.p,{children:["The order of conditions in ",(0,o.jsx)(n.code,{children:"if-elif-else"})," statements is crucial. Conditions are evaluated sequentially, and the first condition that evaluates to ",(0,o.jsx)(n.code,{children:"True"})," will execute its block, ignoring the rest."]}),"\n",(0,o.jsx)(n.p,{children:"Consider the following example with an age-based classification:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'age = 19\n\nif age > 12:\n    print("You are a teenager.")\nelif age >= 18:\n    print("You are a young adult.")\nelif age >= 21:\n    print("You are an adult.")\nelse:\n    print("Unknown age.")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["With ",(0,o.jsx)(n.code,{children:"age"}),' set to 19, the output will be "You are a teenager." This is because the condition ',(0,o.jsx)(n.code,{children:"age > 12"})," is evaluated first and returns ",(0,o.jsx)(n.code,{children:"True"}),". However, this might not be the intended logic. To correct this, conditions should be ordered from the most specific to the most general:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'age = 19\n\nif age >= 21:\n    print("You are an adult.")\nelif age >= 18:\n    print("You are a young adult.")\nelif age > 12:\n    print("You are a teenager.")\nelse:\n    print("Unknown age.")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Now, with ",(0,o.jsx)(n.code,{children:"age"}),' set to 19, the output will be "You are a young adult." The conditions are now evaluated in a logical sequence, ensuring the correct block is executed.']}),"\n",(0,o.jsx)(n.h2,{id:"testing-the-logic",children:"Testing the Logic"}),"\n",(0,o.jsxs)(n.p,{children:["Let's test our logic by changing the values of ",(0,o.jsx)(n.code,{children:"age"})," and ",(0,o.jsx)(n.code,{children:"weather"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Age tests\nage = 30\nif age >= 21:\n    print("You may enter the club.")\nelse:\n    print("You are not allowed in.")\n\nage = 20\nif age >= 21:\n    print("You may enter the club.")\nelse:\n    print("You are not allowed in.")\n\n# Weather tests\nweather = "cloudy"\nif weather == "clear":\n    print("It is a nice day.")\nelif weather == "cloudy":\n    print("The weather could be better.")\nelif weather == "rainy":\n    print("What an awful day.")\nelse:\n    print("Unknown weather.")\n\nweather = "rainy"\nif weather == "clear":\n    print("It is a nice day.")\nelif weather == "cloudy":\n    print("The weather could be better.")\nelif weather == "rainy":\n    print("What an awful day.")\nelse:\n    print("Unknown weather.")\n\nweather = "dry"\nif weather == "clear":\n    print("It is a nice day.")\nelif weather == "cloudy":\n    print("The weather could be better.")\nelif weather == "rainy":\n    print("What an awful day.")\nelse:\n    print("Unknown weather.")\n'})}),"\n",(0,o.jsx)(n.h1,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(n.p,{children:["Conditional statements are essential for making decisions in your programs. By mastering ",(0,o.jsx)(n.code,{children:"if"}),", ",(0,o.jsx)(n.code,{children:"elif"}),", and ",(0,o.jsx)(n.code,{children:"else"}),", you can create complex logical flows and ensure your programs behave as expected. Always remember the importance of indentation in Python, as it defines the scope of your control structures."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(6540);const o={},a=i.createContext(o);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);