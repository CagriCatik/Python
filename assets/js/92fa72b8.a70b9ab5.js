"use strict";(self.webpackChunkpython=self.webpackChunkpython||[]).push([[3828],{7600:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"python-guide/Python_Basics/Truthy_and_Falsy","title":"Truthy and Falsy Values","description":"In Python, every object can be categorized as either truthy or falsy. While the most explicit examples are the True and False booleans, it\'s important to note that these booleans are essentially constants representing 1 and 0, respectively. You can use any non-zero number as truthy and zero as falsy. For instance, using 1 instead of True and 0 instead of False is completely valid.","source":"@site/docs/python-guide/01_Python_Basics/22_Truthy_and_Falsy.md","sourceDirName":"python-guide/01_Python_Basics","slug":"/python-guide/Python_Basics/Truthy_and_Falsy","permalink":"/Python/docs/python-guide/Python_Basics/Truthy_and_Falsy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-guide/01_Python_Basics/22_Truthy_and_Falsy.md","tags":[],"version":"current","sidebarPosition":22,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Mad Libs Game","permalink":"/Python/docs/python-guide/Python_Basics/Mad_Libs_Project"},"next":{"title":"Floating Point Precision","permalink":"/Python/docs/python-guide/Python_Basics/Comparing_Floats"}}');var a=t(4848),o=t(8453);const i={},r="Truthy and Falsy Values",l={},c=[{value:"Examples",id:"examples",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"truthy-and-falsy-values",children:"Truthy and Falsy Values"})}),"\n",(0,a.jsxs)(n.p,{children:["In Python, every object can be categorized as either truthy or falsy. While the most explicit examples are the ",(0,a.jsx)(n.code,{children:"True"})," and ",(0,a.jsx)(n.code,{children:"False"})," booleans, it's important to note that these booleans are essentially constants representing 1 and 0, respectively. You can use any non-zero number as truthy and zero as falsy. For instance, using 1 instead of ",(0,a.jsx)(n.code,{children:"True"})," and 0 instead of ",(0,a.jsx)(n.code,{children:"False"})," is completely valid."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Using 1 as truthy and 0 as falsy\ntruthy_value = 1\nfalsy_value = 0\n"})}),"\n",(0,a.jsx)(n.p,{children:"To determine the truthiness or falsiness of a value in Python, you can use the boolean type with parentheses."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Checking the truthiness or falsiness of values\nempty_list = []\nis_empty_list_truthy = bool(empty_list)  # Evaluates to False\n\nnone_value = None\nis_none_truthy = bool(none_value)  # Evaluates to False\n\nnon_empty_value = 200\nis_non_empty_truthy = bool(non_empty_value)  # Evaluates to True\n"})}),"\n",(0,a.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.p,{children:"Consider different scenarios where truthy and falsy values play a crucial role in boolean checks."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Example: Checking if users exist before performing an operation\nusers = {'Alice': 25, 'Bob': 30, 'Charlie': 22}\n\nif users:\n    for name, age in users.items():\n        print(f\"{name}: {age}\")\nelse:\n    print(\"No data found\")\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In this example, the code checks if the ",(0,a.jsx)(n.code,{children:"users"})," dictionary is truthy before iterating over its items. If ",(0,a.jsx)(n.code,{children:"users"})," is empty, set to ",(0,a.jsx)(n.code,{children:"None"}),', or any other falsy value, it prints "No data found."']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Example: Checking truthiness of different data types\nempty_dict = {}\nempty_string = ''\nnon_empty_list = [1, 2, 3]\n\nprint(bool(empty_dict))       # Evaluates to False\nprint(bool(empty_string))     # Evaluates to False\nprint(bool(non_empty_list))   # Evaluates to True\n"})}),"\n",(0,a.jsx)(n.p,{children:"Here, you can observe how empty dictionary and string are considered falsy, while a non-empty list is truthy. Understanding truthy and falsy values is essential for effective boolean checks in Python, especially when dealing with conditions based on the existence or emptiness of data."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(6540);const a={},o=s.createContext(a);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);