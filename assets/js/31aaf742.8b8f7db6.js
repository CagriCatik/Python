"use strict";(self.webpackChunkpython=self.webpackChunkpython||[]).push([[9070],{4018:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"python-guide/OOP/init","title":"__init__ Method","description":"In Python, the init method is a crucial part of object initialization within a class. Often referred to as a constructor, this special method gets called automatically when an object is created, enabling the setup of initial values and other necessary actions. This tutorial aims to provide a comprehensive understanding of the init method and its significance in Python programming.","source":"@site/docs/python-guide/07_OOP/03_init.md","sourceDirName":"python-guide/07_OOP","slug":"/python-guide/OOP/init","permalink":"/Python/docs/python-guide/OOP/init","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-guide/07_OOP/03_init.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Classes and Objects","permalink":"/Python/docs/python-guide/OOP/Classes_and_Objects"},"next":{"title":"self Parameter","permalink":"/Python/docs/python-guide/OOP/self"}}');var a=i(4848),s=i(8453);const o={},l="__init__ Method",r={},c=[{value:"1. Purpose of <code>__init__</code> method",id:"1-purpose-of-__init__-method",level:2},{value:"2. The <code>self</code> parameter",id:"2-the-self-parameter",level:2},{value:"3. Creating an object and calling <code>__init__</code>",id:"3-creating-an-object-and-calling-__init__",level:2},{value:"4. Default values in <code>__init__</code> parameters",id:"4-default-values-in-__init__-parameters",level:2},{value:"5. Initializing mutable objects",id:"5-initializing-mutable-objects",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsxs)(t.h1,{id:"__init__-method",children:[(0,a.jsx)(t.code,{children:"__init__"})," Method"]})}),"\n",(0,a.jsxs)(t.p,{children:["In Python, the ",(0,a.jsx)(t.code,{children:"__init__"})," method is a crucial part of object initialization within a class. Often referred to as a constructor, this special method gets called automatically when an object is created, enabling the setup of initial values and other necessary actions. This tutorial aims to provide a comprehensive understanding of the ",(0,a.jsx)(t.code,{children:"__init__"})," method and its significance in Python programming."]}),"\n",(0,a.jsxs)(t.h2,{id:"1-purpose-of-__init__-method",children:["1. Purpose of ",(0,a.jsx)(t.code,{children:"__init__"})," method"]}),"\n",(0,a.jsxs)(t.p,{children:["The primary role of the ",(0,a.jsx)(t.code,{children:"__init__"})," method is to initialize the attributes of an object during its creation. It is executed immediately after the object is instantiated, allowing you to set up initial values and perform any required setup actions."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class MyClass:\n    def __init__(self, param1, param2):\n        self.attribute1 = param1\n        self.attribute2 = param2\n"})}),"\n",(0,a.jsxs)(t.p,{children:["In this example, ",(0,a.jsx)(t.code,{children:"__init__"})," takes two parameters (",(0,a.jsx)(t.code,{children:"param1"})," and ",(0,a.jsx)(t.code,{children:"param2"}),") along with the mandatory ",(0,a.jsx)(t.code,{children:"self"})," parameter, initializing the attributes ",(0,a.jsx)(t.code,{children:"attribute1"})," and ",(0,a.jsx)(t.code,{children:"attribute2"})," with the values passed during object creation."]}),"\n",(0,a.jsxs)(t.h2,{id:"2-the-self-parameter",children:["2. The ",(0,a.jsx)(t.code,{children:"self"})," parameter"]}),"\n",(0,a.jsxs)(t.p,{children:["The first parameter of the ",(0,a.jsx)(t.code,{children:"__init__"})," method is always ",(0,a.jsx)(t.code,{children:"self"}),". It represents the instance of the class and is automatically passed when the object is created. The use of ",(0,a.jsx)(t.code,{children:"self"})," allows you to refer to the instance variables within the class."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class MyClass:\n    def __init__(self, param1, param2):\n        self.attribute1 = param1\n        self.attribute2 = param2\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"3-creating-an-object-and-calling-__init__",children:["3. Creating an object and calling ",(0,a.jsx)(t.code,{children:"__init__"})]}),"\n",(0,a.jsxs)(t.p,{children:["When you create an object of a class, the ",(0,a.jsx)(t.code,{children:"__init__"})," method is automatically called. This is where you can pass initial values to set up the object's attributes."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'obj = MyClass("initial_value1", "initial_value2")\n'})}),"\n",(0,a.jsxs)(t.h2,{id:"4-default-values-in-__init__-parameters",children:["4. Default values in ",(0,a.jsx)(t.code,{children:"__init__"})," parameters"]}),"\n",(0,a.jsxs)(t.p,{children:["Provide default values for ",(0,a.jsx)(t.code,{children:"__init__"})," parameters to allow the creation of objects without specifying all values. If a value is not provided during object creation, the default value is used."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'class MyClass:\n    def __init__(self, param1="default_value1", param2="default_value2"):\n        self.attribute1 = param1\n        self.attribute2 = param2\n'})}),"\n",(0,a.jsx)(t.p,{children:"This way, you can create objects with or without passing values explicitly."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'obj1 = MyClass()               # Uses default values\nobj2 = MyClass("custom_value")  # Overrides the default value for param1\n'})}),"\n",(0,a.jsx)(t.h2,{id:"5-initializing-mutable-objects",children:"5. Initializing mutable objects"}),"\n",(0,a.jsxs)(t.p,{children:["Exercise caution when initializing mutable objects like lists or dictionaries in the ",(0,a.jsx)(t.code,{children:"__init__"})," method to avoid unexpected behavior."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class MyClass:\n    def __init__(self, my_list=[]):\n        self.my_list = my_list\n"})}),"\n",(0,a.jsxs)(t.p,{children:["To prevent shared mutable objects among instances, use immutable objects as default values or initialize mutable objects within the ",(0,a.jsx)(t.code,{children:"__init__"})," method."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class MyClass:\n    def __init__(self, my_list=None):\n        self.my_list = my_list if my_list is not None else []\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Understanding the ",(0,a.jsx)(t.code,{children:"__init__"})," method is fundamental to effective object-oriented programming in Python. It facilitates the initialization of object attributes, setting default values, and performing necessary setup actions when creating instances of a class. By grasping the concepts presented in this tutorial, you'll be better equipped to design and implement Python classes with proper initialization logic."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>l});var n=i(6540);const a={},s=n.createContext(a);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);