"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[3278],{7913:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rest-api/Building-REST-API/02","title":"Expanding and Using Flask App","description":"In this tutorial, we will expand on our basic Flask application by adding more features and organizing the code for better scalability and maintainability. We will cover:","source":"@site/docs/rest-api/Building-REST-API/02.md","sourceDirName":"rest-api/Building-REST-API","slug":"/rest-api/Building-REST-API/02","permalink":"/Python/docs/rest-api/Building-REST-API/02","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rest-api/Building-REST-API/02.md","tags":[],"version":"current","frontMatter":{},"sidebar":"restAPISidebar","previous":{"title":"Building REST APIs with Flask","permalink":"/Python/docs/rest-api/Building-REST-API/01"},"next":{"title":"Getting to Know Django Rest Framework (DRF)","permalink":"/Python/docs/rest-api/Building-REST-API/03"}}');var t=i(4848),a=i(8453);const r={},l="Expanding and Using Flask App",o={},d=[{value:"Step 1: Modularizing the Flask App",id:"step-1-modularizing-the-flask-app",level:2},{value:"Create a Project Structure",id:"create-a-project-structure",level:3},{value:"<code>__init__.py</code>",id:"__init__py",level:3},{value:"<code>config.py</code>",id:"configpy",level:3},{value:"<code>models.py</code>",id:"modelspy",level:3},{value:"<code>routes.py</code>",id:"routespy",level:3},{value:"<code>run.py</code>",id:"runpy",level:3},{value:"Step 2: Adding Data Persistence with a Database",id:"step-2-adding-data-persistence-with-a-database",level:2},{value:"Install SQLAlchemy",id:"install-sqlalchemy",level:3},{value:"Configure SQLAlchemy",id:"configure-sqlalchemy",level:3},{value:"Define Models",id:"define-models",level:3},{value:"Use Models in Routes",id:"use-models-in-routes",level:3},{value:"Step 3: Implementing Authentication",id:"step-3-implementing-authentication",level:2},{value:"Install Flask-Login",id:"install-flask-login",level:3},{value:"Configure Flask-Login",id:"configure-flask-login",level:3},{value:"Create User Loader",id:"create-user-loader",level:3},{value:"Implement Authentication Routes",id:"implement-authentication-routes",level:3},{value:"Step 4: Using Blueprints for Better Organization",id:"step-4-using-blueprints-for-better-organization",level:2},{value:"Define Blueprints",id:"define-blueprints",level:3},{value:"Register Blueprints",id:"register-blueprints",level:3},{value:"Step 5: Testing the Flask App",id:"step-5-testing-the-flask-app",level:2},{value:"Write Tests",id:"write-tests",level:3},{value:"Run Tests",id:"run-tests",level:3},{value:"Conclusion",id:"conclusion",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"expanding-and-using-flask-app",children:"Expanding and Using Flask App"})}),"\n",(0,t.jsx)(n.p,{children:"In this tutorial, we will expand on our basic Flask application by adding more features and organizing the code for better scalability and maintainability. We will cover:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Modularizing the Flask app"}),"\n",(0,t.jsx)(n.li,{children:"Adding data persistence with a database"}),"\n",(0,t.jsx)(n.li,{children:"Implementing authentication"}),"\n",(0,t.jsx)(n.li,{children:"Using Blueprints for better organization"}),"\n",(0,t.jsx)(n.li,{children:"Testing the Flask app"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-1-modularizing-the-flask-app",children:"Step 1: Modularizing the Flask App"}),"\n",(0,t.jsx)(n.p,{children:"As your Flask application grows, organizing your code into multiple files and modules will make it easier to manage."}),"\n",(0,t.jsx)(n.h3,{id:"create-a-project-structure",children:"Create a Project Structure"}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s a recommended structure for a larger Flask application:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"/my_flask_app\n    /app\n        __init__.py\n        models.py\n        routes.py\n        config.py\n    /tests\n        test_routes.py\n    run.py\n"})}),"\n",(0,t.jsx)(n.h3,{id:"__init__py",children:(0,t.jsx)(n.code,{children:"__init__.py"})}),"\n",(0,t.jsx)(n.p,{children:"This file initializes the Flask application and brings together components."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from flask import Flask\nfrom .config import Config\n\ndef create_app():\n    app = Flask(__name__)\n    app.config.from_object(Config)\n\n    from .routes import main_bp\n    app.register_blueprint(main_bp)\n\n    return app\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configpy",children:(0,t.jsx)(n.code,{children:"config.py"})}),"\n",(0,t.jsx)(n.p,{children:"Store configuration settings here."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Config:\n    SECRET_KEY = 'your_secret_key'\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///site.db'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n"})}),"\n",(0,t.jsx)(n.h3,{id:"modelspy",children:(0,t.jsx)(n.code,{children:"models.py"})}),"\n",(0,t.jsx)(n.p,{children:"Define your data models using SQLAlchemy."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"routespy",children:(0,t.jsx)(n.code,{children:"routes.py"})}),"\n",(0,t.jsx)(n.p,{children:"Define your routes and handlers."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from flask import Blueprint, jsonify, request\nfrom .models import db, User\n\nmain_bp = Blueprint('main', __name__)\n\n@main_bp.route('/users', methods=['GET'])\ndef get_users():\n    users = User.query.all()\n    return jsonify([user.as_dict() for user in users]), 200\n\n@main_bp.route('/users', methods=['POST'])\ndef add_user():\n    if not request.json:\n        return jsonify({\"error\": \"No input data provided\"}), 400\n    \n    data = request.json\n    new_user = User(name=data['name'], email=data['email'])\n    db.session.add(new_user)\n    db.session.commit()\n    return jsonify(new_user.as_dict()), 201\n\n# Add methods for updating and deleting users similarly\n"})}),"\n",(0,t.jsx)(n.h3,{id:"runpy",children:(0,t.jsx)(n.code,{children:"run.py"})}),"\n",(0,t.jsx)(n.p,{children:"Entry point to run the application."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from app import create_app, db\n\napp = create_app()\n\nif __name__ == '__main__':\n    with app.app_context():\n        db.create_all()  # Create database tables\n    app.run(debug=True)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-2-adding-data-persistence-with-a-database",children:"Step 2: Adding Data Persistence with a Database"}),"\n",(0,t.jsx)(n.p,{children:"To persist data, you\u2019ll use a database. Flask integrates well with SQLAlchemy, a powerful ORM for Python."}),"\n",(0,t.jsx)(n.h3,{id:"install-sqlalchemy",children:"Install SQLAlchemy"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install Flask-SQLAlchemy\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configure-sqlalchemy",children:"Configure SQLAlchemy"}),"\n",(0,t.jsxs)(n.p,{children:["Add the database URI to ",(0,t.jsx)(n.code,{children:"config.py"})," and initialize SQLAlchemy in ",(0,t.jsx)(n.code,{children:"__init__.py"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"define-models",children:"Define Models"}),"\n",(0,t.jsxs)(n.p,{children:["Define your data models in ",(0,t.jsx)(n.code,{children:"models.py"})," as shown above. Use ",(0,t.jsx)(n.code,{children:"db.create_all()"})," in ",(0,t.jsx)(n.code,{children:"run.py"})," to create the database tables."]}),"\n",(0,t.jsx)(n.h3,{id:"use-models-in-routes",children:"Use Models in Routes"}),"\n",(0,t.jsx)(n.p,{children:"Access and manipulate data using SQLAlchemy\u2019s ORM capabilities in your route handlers."}),"\n",(0,t.jsx)(n.h2,{id:"step-3-implementing-authentication",children:"Step 3: Implementing Authentication"}),"\n",(0,t.jsx)(n.p,{children:"Authentication ensures that only authorized users can access certain resources."}),"\n",(0,t.jsx)(n.h3,{id:"install-flask-login",children:"Install Flask-Login"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install Flask-Login\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configure-flask-login",children:"Configure Flask-Login"}),"\n",(0,t.jsxs)(n.p,{children:["Set up Flask-Login in ",(0,t.jsx)(n.code,{children:"__init__.py"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from flask_login import LoginManager\n\nlogin_manager = LoginManager()\nlogin_manager.login_view = 'login'\n\ndef create_app():\n    app = Flask(__name__)\n    app.config.from_object(Config)\n    \n    db.init_app(app)\n    login_manager.init_app(app)\n\n    from .routes import main_bp\n    app.register_blueprint(main_bp)\n\n    return app\n"})}),"\n",(0,t.jsx)(n.h3,{id:"create-user-loader",children:"Create User Loader"}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"models.py"}),", add a user loader function."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from flask_login import UserMixin\n\nclass User(db.Model, UserMixin):\n    # Define model fields\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n"})}),"\n",(0,t.jsx)(n.h3,{id:"implement-authentication-routes",children:"Implement Authentication Routes"}),"\n",(0,t.jsxs)(n.p,{children:["Add routes for login and logout in ",(0,t.jsx)(n.code,{children:"routes.py"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from flask_login import login_user, logout_user, login_required, current_user\n\n@main_bp.route('/login', methods=['POST'])\ndef login():\n    data = request.json\n    user = User.query.filter_by(email=data['email']).first()\n    if user and user.password == data['password']:  # Hash and check passwords in practice\n        login_user(user)\n        return jsonify({\"message\": \"Login successful\"}), 200\n    return jsonify({\"error\": \"Invalid credentials\"}), 401\n\n@main_bp.route('/logout', methods=['POST'])\n@login_required\ndef logout():\n    logout_user()\n    return jsonify({\"message\": \"Logout successful\"}), 200\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-4-using-blueprints-for-better-organization",children:"Step 4: Using Blueprints for Better Organization"}),"\n",(0,t.jsx)(n.p,{children:"Blueprints help in organizing routes and functionality into modular components."}),"\n",(0,t.jsx)(n.h3,{id:"define-blueprints",children:"Define Blueprints"}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"routes.py"}),", you\u2019ve already defined a blueprint. Use blueprints to separate different sections of your application."]}),"\n",(0,t.jsx)(n.h3,{id:"register-blueprints",children:"Register Blueprints"}),"\n",(0,t.jsxs)(n.p,{children:["Register blueprints in ",(0,t.jsx)(n.code,{children:"create_app()"})," function in ",(0,t.jsx)(n.code,{children:"__init__.py"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def create_app():\n    app = Flask(__name__)\n    app.config.from_object(Config)\n\n    db.init_app(app)\n    login_manager.init_app(app)\n\n    from .routes import main_bp\n    app.register_blueprint(main_bp, url_prefix='/api')\n\n    return app\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-5-testing-the-flask-app",children:"Step 5: Testing the Flask App"}),"\n",(0,t.jsx)(n.p,{children:"Testing ensures your application behaves as expected and helps prevent bugs."}),"\n",(0,t.jsx)(n.h3,{id:"write-tests",children:"Write Tests"}),"\n",(0,t.jsxs)(n.p,{children:["Create tests in the ",(0,t.jsx)(n.code,{children:"tests"})," directory. For example, ",(0,t.jsx)(n.code,{children:"test_routes.py"})," might look like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import unittest\nfrom app import create_app, db\n\nclass BasicTests(unittest.TestCase):\n    def setUp(self):\n        self.app = create_app()\n        self.app.config['TESTING'] = True\n        self.app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'\n        self.client = self.app.test_client()\n        with self.app.app_context():\n            db.create_all()\n\n    def tearDown(self):\n        with self.app.app_context():\n            db.drop_all()\n\n    def test_get_users(self):\n        response = self.client.get('/api/users')\n        self.assertEqual(response.status_code, 200)\n\n    def test_add_user(self):\n        response = self.client.post('/api/users', json={'name': 'John Doe', 'email': 'john@example.com'})\n        self.assertEqual(response.status_code, 201)\n        self.assertIn(b'John Doe', response.data)\n\nif __name__ == '__main__':\n    unittest.main()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"run-tests",children:"Run Tests"}),"\n",(0,t.jsx)(n.p,{children:"Execute tests with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python -m unittest discover\n"})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"In this tutorial, we've expanded our basic Flask application by modularizing the code, adding data persistence with SQLAlchemy, implementing authentication, using blueprints for better organization, and writing tests. These steps will help you build more robust, scalable, and maintainable Flask applications."}),"\n",(0,t.jsx)(n.p,{children:"In the next chapter, we'll explore using Django Rest Framework (DRF) for building REST APIs, another powerful option for Python developers. Stay tuned!"})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var s=i(6540);const t={},a=s.createContext(t);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);