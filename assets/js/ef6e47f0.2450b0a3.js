"use strict";(self.webpackChunkmy_docusaurus_site=self.webpackChunkmy_docusaurus_site||[]).push([[4494],{2349:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"python-guide/Python_Basics/Tuples","title":"Tuple","description":"In Python, tuples are similar to lists but with a key difference - they are immutable. Once a tuple is created, it cannot be modified, making them more memory-efficient. The defining factor for a tuple is the comma (,), not the parentheses. While tuples are often seen wrapped in parentheses, it\'s the comma that denotes the tuple.","source":"@site/docs/python-guide/01_Python_Basics/16_Tuples.md","sourceDirName":"python-guide/01_Python_Basics","slug":"/python-guide/Python_Basics/Tuples","permalink":"/Python/docs/python-guide/Python_Basics/Tuples","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python-guide/01_Python_Basics/16_Tuples.md","tags":[],"version":"current","sidebarPosition":16,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Lists","permalink":"/Python/docs/python-guide/Python_Basics/Lists"},"next":{"title":"Sets","permalink":"/Python/docs/python-guide/Python_Basics/Sets"}}');var i=n(4848),l=n(8453);const a={},o="Tuple",r={},p=[{value:"Creating Tuples",id:"creating-tuples",level:2},{value:"Basic Tuple",id:"basic-tuple",level:3},{value:"Single-Element Tuple",id:"single-element-tuple",level:3},{value:"Empty Tuple",id:"empty-tuple",level:3},{value:"Using Tuples",id:"using-tuples",level:2},{value:"Example: Coordinates",id:"example-coordinates",level:3},{value:"Tuple Methods",id:"tuple-methods",level:3},{value:"Annotating Tuples",id:"annotating-tuples",level:2},{value:"Choosing Between Lists and Tuples",id:"choosing-between-lists-and-tuples",level:2}];function u(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"tuple",children:"Tuple"})}),"\n",(0,i.jsxs)(t.p,{children:["In Python, tuples are similar to lists but with a key difference - they are immutable. Once a tuple is created, it cannot be modified, making them more memory-efficient. The defining factor for a tuple is the comma (",(0,i.jsx)(t.code,{children:","}),"), not the parentheses. While tuples are often seen wrapped in parentheses, it's the comma that denotes the tuple."]}),"\n",(0,i.jsx)(t.h2,{id:"creating-tuples",children:"Creating Tuples"}),"\n",(0,i.jsx)(t.h3,{id:"basic-tuple",children:"Basic Tuple"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# Tuple without parentheses\nitems = 1, True, 'text'\nprint(type(items))  # Output: <class 'tuple'>\n"})}),"\n",(0,i.jsx)(t.h3,{id:"single-element-tuple",children:"Single-Element Tuple"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# Single-element tuple\nsingle_item_tuple = (42,)\nprint(type(single_item_tuple))  # Output: <class 'tuple'>\n"})}),"\n",(0,i.jsx)(t.h3,{id:"empty-tuple",children:"Empty Tuple"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# Empty tuple\nempty_tuple = ()\nprint(type(empty_tuple))  # Output: <class 'tuple'>\n"})}),"\n",(0,i.jsx)(t.h2,{id:"using-tuples",children:"Using Tuples"}),"\n",(0,i.jsx)(t.h3,{id:"example-coordinates",children:"Example: Coordinates"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# Tuple for coordinates\ncoordinates = 1.5, 2.5\n\n# Attempting to modify the tuple will raise a TypeError\ntry:\n    coordinates[0] = 10\nexcept TypeError as e:\n    print(f\"Error: {e}\")\n\n# Output: Error: 'tuple' object does not support item assignment\n"})}),"\n",(0,i.jsx)(t.h3,{id:"tuple-methods",children:"Tuple Methods"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# Tuple methods (count and index)\nprint(coordinates.count(1.5))  # Output: 1\nprint(coordinates.index(2.5))  # Output: 1\n"})}),"\n",(0,i.jsx)(t.h2,{id:"annotating-tuples",children:"Annotating Tuples"}),"\n",(0,i.jsx)(t.p,{children:"When annotating tuples, specify the data types by position."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# Annotating tuple elements\nannotated_coordinates: tuple[float, float] = 1.5, 2.5\n"})}),"\n",(0,i.jsx)(t.h2,{id:"choosing-between-lists-and-tuples",children:"Choosing Between Lists and Tuples"}),"\n",(0,i.jsx)(t.p,{children:"Remember, if your data needs to change dynamically, use a list. If the data is constant, choose a tuple."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"List vs. Tuple Summary:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Lists for dynamic data with add and remove operations."}),"\n",(0,i.jsx)(t.li,{children:"Tuples for immutable, constant data."}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(6540);const i={},l=s.createContext(i);function a(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);